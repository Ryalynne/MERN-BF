{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n  const isMounted = useIsMounted();\n  const [forcedRenderCount, setForcedRenderCount] = useState(0);\n  const forceRender = useCallback(() => {\n    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n  }, [forcedRenderCount]);\n  /**\r\n   * Defer this to the end of the next animation frame in case there are multiple\r\n   * synchronous calls.\r\n   */\n\n  const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n  return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/utils/use-force-update.mjs"],"names":["frame","useState","useCallback","useIsMounted","useForceUpdate","isMounted","forcedRenderCount","setForcedRenderCount","forceRender","current","deferredForceRender","postRender"],"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,SAASC,cAAT,GAA0B;AACtB,QAAMC,SAAS,GAAGF,YAAY,EAA9B;AACA,QAAM,CAACG,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAMO,WAAW,GAAGN,WAAW,CAAC,MAAM;AAClCG,IAAAA,SAAS,CAACI,OAAV,IAAqBF,oBAAoB,CAACD,iBAAiB,GAAG,CAArB,CAAzC;AACH,GAF8B,EAE5B,CAACA,iBAAD,CAF4B,CAA/B;AAGA;AACJ;AACA;AACA;;AACI,QAAMI,mBAAmB,GAAGR,WAAW,CAAC,MAAMF,KAAK,CAACW,UAAN,CAAiBH,WAAjB,CAAP,EAAsC,CAACA,WAAD,CAAtC,CAAvC;AACA,SAAO,CAACE,mBAAD,EAAsBJ,iBAAtB,CAAP;AACH;;AAED,SAASF,cAAT","sourcesContent":["import { frame } from 'motion-dom';\r\nimport { useState, useCallback } from 'react';\r\nimport { useIsMounted } from './use-is-mounted.mjs';\r\n\r\nfunction useForceUpdate() {\r\n    const isMounted = useIsMounted();\r\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\r\n    const forceRender = useCallback(() => {\r\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\r\n    }, [forcedRenderCount]);\r\n    /**\r\n     * Defer this to the end of the next animation frame in case there are multiple\r\n     * synchronous calls.\r\n     */\r\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\r\n    return [deferredForceRender, forcedRenderCount];\r\n}\r\n\r\nexport { useForceUpdate };\r\n"]},"metadata":{},"sourceType":"module"}