{"ast":null,"code":"import { GroupPlaybackControls } from 'motion-dom';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction isSequence(value) {\n  return Array.isArray(value) && value.some(Array.isArray);\n}\n/**\r\n * Creates an animation function that is optionally scoped\r\n * to a specific element.\r\n */\n\n\nfunction createScopedAnimate(scope) {\n  /**\r\n   * Implementation\r\n   */\n  function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n    let animations = [];\n\n    if (isSequence(subjectOrSequence)) {\n      animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n    } else {\n      animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\n    }\n\n    const animation = new GroupPlaybackControls(animations);\n\n    if (scope) {\n      scope.animations.push(animation);\n    }\n\n    return animation;\n  }\n\n  return scopedAnimate;\n}\n\nconst animate = createScopedAnimate();\nexport { animate, createScopedAnimate };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/animation/animate/index.mjs"],"names":["GroupPlaybackControls","animateSequence","animateSubject","isSequence","value","Array","isArray","some","createScopedAnimate","scope","scopedAnimate","subjectOrSequence","optionsOrKeyframes","options","animations","animation","push","animate"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,YAAtC;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACG,IAAN,CAAWF,KAAK,CAACC,OAAjB,CAA/B;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,CAA6BC,KAA7B,EAAoC;AAChC;AACJ;AACA;AACI,WAASC,aAAT,CAAuBC,iBAAvB,EAA0CC,kBAA1C,EAA8DC,OAA9D,EAAuE;AACnE,QAAIC,UAAU,GAAG,EAAjB;;AACA,QAAIX,UAAU,CAACQ,iBAAD,CAAd,EAAmC;AAC/BG,MAAAA,UAAU,GAAGb,eAAe,CAACU,iBAAD,EAAoBC,kBAApB,EAAwCH,KAAxC,CAA5B;AACH,KAFD,MAGK;AACDK,MAAAA,UAAU,GAAGZ,cAAc,CAACS,iBAAD,EAAoBC,kBAApB,EAAwCC,OAAxC,EAAiDJ,KAAjD,CAA3B;AACH;;AACD,UAAMM,SAAS,GAAG,IAAIf,qBAAJ,CAA0Bc,UAA1B,CAAlB;;AACA,QAAIL,KAAJ,EAAW;AACPA,MAAAA,KAAK,CAACK,UAAN,CAAiBE,IAAjB,CAAsBD,SAAtB;AACH;;AACD,WAAOA,SAAP;AACH;;AACD,SAAOL,aAAP;AACH;;AACD,MAAMO,OAAO,GAAGT,mBAAmB,EAAnC;AAEA,SAASS,OAAT,EAAkBT,mBAAlB","sourcesContent":["import { GroupPlaybackControls } from 'motion-dom';\r\nimport { animateSequence } from './sequence.mjs';\r\nimport { animateSubject } from './subject.mjs';\r\n\r\nfunction isSequence(value) {\r\n    return Array.isArray(value) && value.some(Array.isArray);\r\n}\r\n/**\r\n * Creates an animation function that is optionally scoped\r\n * to a specific element.\r\n */\r\nfunction createScopedAnimate(scope) {\r\n    /**\r\n     * Implementation\r\n     */\r\n    function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\r\n        let animations = [];\r\n        if (isSequence(subjectOrSequence)) {\r\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\r\n        }\r\n        else {\r\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\r\n        }\r\n        const animation = new GroupPlaybackControls(animations);\r\n        if (scope) {\r\n            scope.animations.push(animation);\r\n        }\r\n        return animation;\r\n    }\r\n    return scopedAnimate;\r\n}\r\nconst animate = createScopedAnimate();\r\n\r\nexport { animate, createScopedAnimate };\r\n"]},"metadata":{},"sourceType":"module"}