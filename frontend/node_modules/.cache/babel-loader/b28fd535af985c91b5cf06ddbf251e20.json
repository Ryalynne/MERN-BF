{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Link } from \"react-router-dom\";\n// import AddDeptModal from \"../UI/Modal/AddDeptModal\";\n// function DepartList() {\n//   /*** State Hooks ***/\n//   const [jobs, setJobs] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [entriesToShow, setEntriesToShow] = useState(10);\n//   const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n//   const [editingJobId, setEditingJobId] = useState(null);\n//   const [editedJobTitle, setEditedJobTitle] = useState(\"\");\n//   const [isModalActive, setIsModalActive] = useState(false); // Modal state\n//   /*** Effect Hooks ***/\n//   useEffect(() => {\n//     fetchJobs();\n//     // Handle screen size changes\n//     const handleResize = () => setIsMobile(window.innerWidth < 768);\n//     window.addEventListener(\"resize\", handleResize);\n//     return () => window.removeEventListener(\"resize\", handleResize);\n//   }, []);\n//   /*** API Calls ***/\n//   const fetchJobs = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/job\");\n//       setJobs(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching job titles:\", error);\n//     }\n//   };\n//   /*** Filtering Logic ***/\n//   const filteredJobs = jobs.filter((job) =>\n//     job.Job_Title.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n//   const displayedJobs = filteredJobs.slice(0, entriesToShow);\n//   /*** Inline Editing Functions ***/\n//   const startEditing = (job) => {\n//     setEditingJobId(job.id);\n//     setEditedJobTitle(job.Job_Title);\n//   };\n//   const cancelEditing = () => {\n//     setEditingJobId(null);\n//     setEditedJobTitle(\"\");\n//   };\n//   const saveJobTitle = async (id) => {\n//     try {\n//       await axios.patch(`http://localhost:5000/job/${id}`, {\n//         job_title: editedJobTitle,\n//       });\n//       setJobs(\n//         jobs.map((job) =>\n//           job.id === id ? { ...job, Job_Title: editedJobTitle } : job\n//         )\n//       );\n//       setEditingJobId(null);\n//     } catch (error) {\n//       console.error(\"Error updating job title:\", error);\n//     }\n//   };\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       {/* Background and Overlay */}\n//       <div\n//         style={{\n//           position: \"fixed\",\n//           top: 0,\n//           left: 0,\n//           width: \"100vw\",\n//           height: \"100vh\",\n//           backgroundImage: \"url('/loginBanner.jpg')\",\n//           backgroundSize: \"cover\",\n//           backgroundPosition: \"center\",\n//           backgroundRepeat: \"no-repeat\",\n//           backgroundAttachment: \"fixed\",\n//           zIndex: -2,\n//         }}\n//       />\n//       <div\n//         style={{\n//           position: \"fixed\",\n//           top: 0,\n//           left: 0,\n//           width: \"100vw\",\n//           height: \"100vh\",\n//           background: \"rgba(0, 0, 0, 0.5)\",\n//           zIndex: -1,\n//         }}\n//       />\n//       {/* Main Content */}\n//       <div\n//         className=\"column container mt-5\"\n//         style={{ position: \"relative\", zIndex: 1 }}\n//       >\n//         {/* Search & Actions */}\n//         <div className=\"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\">\n//           <input\n//             type=\"text\"\n//             className=\"input\"\n//             style={{ maxWidth: \"300px\" }}\n//             placeholder=\"Search Job Title...\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//           {isMobile ? (\n//             <Link to=\"/home/AddJob\" className=\"button is-success ml-3\">\n//               Add Job Title\n//             </Link>\n//           ) : (\n//             <div>\n//               <button\n//                 className=\"button is-success ml-3\"\n//                 onClick={() => setIsModalActive(true)} // Open modal\n//               >\n//                 Add Job Title\n//               </button>{\" \"}\n//               <AddDeptModal\n//                 isActive={isModalActive}\n//                 onClose={() => setIsModalActive(false)}\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {/* Table View (Desktop) */}\n//         {!isMobile ? (\n//           <table className=\"table is-striped is-fullwidth\">\n//             <thead>\n//               <tr>\n//                 <th>Job ID</th>\n//                 <th>Job Title</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {displayedJobs.map((job) => (\n//                 <tr key={job.id}>\n//                   <td>{job.id}</td>\n//                   <td>\n//                     {editingJobId === job.id ? (\n//                       <input\n//                         type=\"text\"\n//                         className=\"input\"\n//                         value={editedJobTitle}\n//                         onChange={(e) => setEditedJobTitle(e.target.value)}\n//                       />\n//                     ) : (\n//                       job.Job_Title\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingJobId === job.id ? (\n//                       <>\n//                         <button\n//                           className=\"button is-small is-success mr-2\"\n//                           onClick={() => saveJobTitle(job.id)}\n//                         >\n//                           Save\n//                         </button>\n//                         <button\n//                           className=\"button is-small is-danger\"\n//                           onClick={cancelEditing}\n//                         >\n//                           Cancel\n//                         </button>\n//                       </>\n//                     ) : (\n//                       <button\n//                         className=\"button is-small is-info mr-2\"\n//                         onClick={() => startEditing(job)}\n//                       >\n//                         Edit\n//                       </button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <div className=\"columns is-multiline\">\n//             {displayedJobs.map((job) => (\n//               <div key={job.id} className=\"column is-12\">\n//                 <div className=\"card\">\n//                   <header className=\"card-header\">\n//                     <p className=\"card-header-title\">{job.Job_Title}</p>\n//                   </header>\n//                   <div className=\"card-content\">\n//                     <p className=\"subtitle is-6\">\n//                       <strong>Job ID:</strong> {job.id}\n//                     </p>\n//                   </div>\n//                   <footer className=\"card-footer\">\n//                     <Link\n//                       to={`/home/editJobTitle/${job.id}`}\n//                       className=\"card-footer-item button is-small is-info\"\n//                     >\n//                       Edit\n//                     </Link>\n//                   </footer>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//         {/* Footer - Entry Controls */}\n//         <div className=\"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\">\n//           <div>\n//             <label className=\"mr-2\">Show entries:</label>\n//             <div className=\"select\">\n//               <select\n//                 value={entriesToShow}\n//                 onChange={(e) => setEntriesToShow(Number(e.target.value))}\n//               >\n//                 <option value=\"5\">5</option>\n//                 <option value=\"10\">10</option>\n//                 <option value=\"20\">20</option>\n//                 <option value={filteredJobs.length}>All</option>\n//               </select>\n//             </div>\n//           </div>\n//           <p>\n//             Showing {displayedJobs.length} of {filteredJobs.length} entries\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default DepartList;","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/JobTitle/JobList.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Link } from \"react-router-dom\";\r\n// import AddDeptModal from \"../UI/Modal/AddDeptModal\";\r\n\r\n// function DepartList() {\r\n//   /*** State Hooks ***/\r\n//   const [jobs, setJobs] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [entriesToShow, setEntriesToShow] = useState(10);\r\n//   const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n//   const [editingJobId, setEditingJobId] = useState(null);\r\n//   const [editedJobTitle, setEditedJobTitle] = useState(\"\");\r\n//   const [isModalActive, setIsModalActive] = useState(false); // Modal state\r\n\r\n//   /*** Effect Hooks ***/\r\n//   useEffect(() => {\r\n//     fetchJobs();\r\n\r\n//     // Handle screen size changes\r\n//     const handleResize = () => setIsMobile(window.innerWidth < 768);\r\n//     window.addEventListener(\"resize\", handleResize);\r\n//     return () => window.removeEventListener(\"resize\", handleResize);\r\n//   }, []);\r\n\r\n//   /*** API Calls ***/\r\n//   const fetchJobs = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/job\");\r\n//       setJobs(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching job titles:\", error);\r\n//     }\r\n//   };\r\n\r\n//   /*** Filtering Logic ***/\r\n//   const filteredJobs = jobs.filter((job) =>\r\n//     job.Job_Title.toLowerCase().includes(searchTerm.toLowerCase())\r\n//   );\r\n//   const displayedJobs = filteredJobs.slice(0, entriesToShow);\r\n\r\n//   /*** Inline Editing Functions ***/\r\n//   const startEditing = (job) => {\r\n//     setEditingJobId(job.id);\r\n//     setEditedJobTitle(job.Job_Title);\r\n//   };\r\n\r\n//   const cancelEditing = () => {\r\n//     setEditingJobId(null);\r\n//     setEditedJobTitle(\"\");\r\n//   };\r\n\r\n//   const saveJobTitle = async (id) => {\r\n//     try {\r\n//       await axios.patch(`http://localhost:5000/job/${id}`, {\r\n//         job_title: editedJobTitle,\r\n//       });\r\n\r\n//       setJobs(\r\n//         jobs.map((job) =>\r\n//           job.id === id ? { ...job, Job_Title: editedJobTitle } : job\r\n//         )\r\n//       );\r\n//       setEditingJobId(null);\r\n//     } catch (error) {\r\n//       console.error(\"Error updating job title:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ position: \"relative\" }}>\r\n//       {/* Background and Overlay */}\r\n//       <div\r\n//         style={{\r\n//           position: \"fixed\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100vw\",\r\n//           height: \"100vh\",\r\n//           backgroundImage: \"url('/loginBanner.jpg')\",\r\n//           backgroundSize: \"cover\",\r\n//           backgroundPosition: \"center\",\r\n//           backgroundRepeat: \"no-repeat\",\r\n//           backgroundAttachment: \"fixed\",\r\n//           zIndex: -2,\r\n//         }}\r\n//       />\r\n//       <div\r\n//         style={{\r\n//           position: \"fixed\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100vw\",\r\n//           height: \"100vh\",\r\n//           background: \"rgba(0, 0, 0, 0.5)\",\r\n//           zIndex: -1,\r\n//         }}\r\n//       />\r\n\r\n//       {/* Main Content */}\r\n//       <div\r\n//         className=\"column container mt-5\"\r\n//         style={{ position: \"relative\", zIndex: 1 }}\r\n//       >\r\n//         {/* Search & Actions */}\r\n//         <div className=\"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\">\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"input\"\r\n//             style={{ maxWidth: \"300px\" }}\r\n//             placeholder=\"Search Job Title...\"\r\n//             value={searchTerm}\r\n//             onChange={(e) => setSearchTerm(e.target.value)}\r\n//           />\r\n//           {isMobile ? (\r\n//             <Link to=\"/home/AddJob\" className=\"button is-success ml-3\">\r\n//               Add Job Title\r\n//             </Link>\r\n//           ) : (\r\n//             <div>\r\n//               <button\r\n//                 className=\"button is-success ml-3\"\r\n//                 onClick={() => setIsModalActive(true)} // Open modal\r\n//               >\r\n//                 Add Job Title\r\n//               </button>{\" \"}\r\n//               <AddDeptModal\r\n//                 isActive={isModalActive}\r\n//                 onClose={() => setIsModalActive(false)}\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Table View (Desktop) */}\r\n//         {!isMobile ? (\r\n//           <table className=\"table is-striped is-fullwidth\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Job ID</th>\r\n//                 <th>Job Title</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {displayedJobs.map((job) => (\r\n//                 <tr key={job.id}>\r\n//                   <td>{job.id}</td>\r\n//                   <td>\r\n//                     {editingJobId === job.id ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className=\"input\"\r\n//                         value={editedJobTitle}\r\n//                         onChange={(e) => setEditedJobTitle(e.target.value)}\r\n//                       />\r\n//                     ) : (\r\n//                       job.Job_Title\r\n//                     )}\r\n//                   </td>\r\n//                   <td>\r\n//                     {editingJobId === job.id ? (\r\n//                       <>\r\n//                         <button\r\n//                           className=\"button is-small is-success mr-2\"\r\n//                           onClick={() => saveJobTitle(job.id)}\r\n//                         >\r\n//                           Save\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"button is-small is-danger\"\r\n//                           onClick={cancelEditing}\r\n//                         >\r\n//                           Cancel\r\n//                         </button>\r\n//                       </>\r\n//                     ) : (\r\n//                       <button\r\n//                         className=\"button is-small is-info mr-2\"\r\n//                         onClick={() => startEditing(job)}\r\n//                       >\r\n//                         Edit\r\n//                       </button>\r\n//                     )}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         ) : (\r\n//           <div className=\"columns is-multiline\">\r\n//             {displayedJobs.map((job) => (\r\n//               <div key={job.id} className=\"column is-12\">\r\n//                 <div className=\"card\">\r\n//                   <header className=\"card-header\">\r\n//                     <p className=\"card-header-title\">{job.Job_Title}</p>\r\n//                   </header>\r\n//                   <div className=\"card-content\">\r\n//                     <p className=\"subtitle is-6\">\r\n//                       <strong>Job ID:</strong> {job.id}\r\n//                     </p>\r\n//                   </div>\r\n//                   <footer className=\"card-footer\">\r\n//                     <Link\r\n//                       to={`/home/editJobTitle/${job.id}`}\r\n//                       className=\"card-footer-item button is-small is-info\"\r\n//                     >\r\n//                       Edit\r\n//                     </Link>\r\n//                   </footer>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Footer - Entry Controls */}\r\n//         <div className=\"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\">\r\n//           <div>\r\n//             <label className=\"mr-2\">Show entries:</label>\r\n//             <div className=\"select\">\r\n//               <select\r\n//                 value={entriesToShow}\r\n//                 onChange={(e) => setEntriesToShow(Number(e.target.value))}\r\n//               >\r\n//                 <option value=\"5\">5</option>\r\n//                 <option value=\"10\">10</option>\r\n//                 <option value=\"20\">20</option>\r\n//                 <option value={filteredJobs.length}>All</option>\r\n//               </select>\r\n//             </div>\r\n//           </div>\r\n//           <p>\r\n//             Showing {displayedJobs.length} of {filteredJobs.length} entries\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default DepartList;\r\n"]},"metadata":{},"sourceType":"module"}