{"ast":null,"code":"import { frame } from 'motion-dom';\nimport { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\n\nfunction measureAllKeyframes() {\n  if (anyNeedsMeasurement) {\n    const resolversToMeasure = Array.from(toResolve).filter(resolver => resolver.needsMeasurement);\n    const elementsToMeasure = new Set(resolversToMeasure.map(resolver => resolver.element));\n    const transformsToRestore = new Map();\n    /**\r\n     * Write pass\r\n     * If we're measuring elements we want to remove bounding box-changing transforms.\r\n     */\n\n    elementsToMeasure.forEach(element => {\n      const removedTransforms = removeNonTranslationalTransform(element);\n      if (!removedTransforms.length) return;\n      transformsToRestore.set(element, removedTransforms);\n      element.render();\n    }); // Read\n\n    resolversToMeasure.forEach(resolver => resolver.measureInitialState()); // Write\n\n    elementsToMeasure.forEach(element => {\n      element.render();\n      const restore = transformsToRestore.get(element);\n\n      if (restore) {\n        restore.forEach(_ref => {\n          let [key, value] = _ref;\n\n          var _a;\n\n          (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n        });\n      }\n    }); // Read\n\n    resolversToMeasure.forEach(resolver => resolver.measureEndState()); // Write\n\n    resolversToMeasure.forEach(resolver => {\n      if (resolver.suspendedScrollY !== undefined) {\n        window.scrollTo(0, resolver.suspendedScrollY);\n      }\n    });\n  }\n\n  anyNeedsMeasurement = false;\n  isScheduled = false;\n  toResolve.forEach(resolver => resolver.complete());\n  toResolve.clear();\n}\n\nfunction readAllKeyframes() {\n  toResolve.forEach(resolver => {\n    resolver.readKeyframes();\n\n    if (resolver.needsMeasurement) {\n      anyNeedsMeasurement = true;\n    }\n  });\n}\n\nfunction flushKeyframeResolvers() {\n  readAllKeyframes();\n  measureAllKeyframes();\n}\n\nclass KeyframeResolver {\n  constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n    let isAsync = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    /**\r\n     * Track whether this resolver has completed. Once complete, it never\r\n     * needs to attempt keyframe resolution again.\r\n     */\n    this.isComplete = false;\n    /**\r\n     * Track whether this resolver is async. If it is, it'll be added to the\r\n     * resolver queue and flushed in the next frame. Resolvers that aren't going\r\n     * to trigger read/write thrashing don't need to be async.\r\n     */\n\n    this.isAsync = false;\n    /**\r\n     * Track whether this resolver needs to perform a measurement\r\n     * to resolve its keyframes.\r\n     */\n\n    this.needsMeasurement = false;\n    /**\r\n     * Track whether this resolver is currently scheduled to resolve\r\n     * to allow it to be cancelled and resumed externally.\r\n     */\n\n    this.isScheduled = false;\n    this.unresolvedKeyframes = [...unresolvedKeyframes];\n    this.onComplete = onComplete;\n    this.name = name;\n    this.motionValue = motionValue;\n    this.element = element;\n    this.isAsync = isAsync;\n  }\n\n  scheduleResolve() {\n    this.isScheduled = true;\n\n    if (this.isAsync) {\n      toResolve.add(this);\n\n      if (!isScheduled) {\n        isScheduled = true;\n        frame.read(readAllKeyframes);\n        frame.resolveKeyframes(measureAllKeyframes);\n      }\n    } else {\n      this.readKeyframes();\n      this.complete();\n    }\n  }\n\n  readKeyframes() {\n    const {\n      unresolvedKeyframes,\n      name,\n      element,\n      motionValue\n    } = this;\n    /**\r\n     * If a keyframe is null, we hydrate it either by reading it from\r\n     * the instance, or propagating from previous keyframes.\r\n     */\n\n    for (let i = 0; i < unresolvedKeyframes.length; i++) {\n      if (unresolvedKeyframes[i] === null) {\n        /**\r\n         * If the first keyframe is null, we need to find its value by sampling the element\r\n         */\n        if (i === 0) {\n          const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n          const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n\n          if (currentValue !== undefined) {\n            unresolvedKeyframes[0] = currentValue;\n          } else if (element && name) {\n            const valueAsRead = element.readValue(name, finalKeyframe);\n\n            if (valueAsRead !== undefined && valueAsRead !== null) {\n              unresolvedKeyframes[0] = valueAsRead;\n            }\n          }\n\n          if (unresolvedKeyframes[0] === undefined) {\n            unresolvedKeyframes[0] = finalKeyframe;\n          }\n\n          if (motionValue && currentValue === undefined) {\n            motionValue.set(unresolvedKeyframes[0]);\n          }\n        } else {\n          unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n        }\n      }\n    }\n  }\n\n  setFinalKeyframe() {}\n\n  measureInitialState() {}\n\n  renderEndStyles() {}\n\n  measureEndState() {}\n\n  complete() {\n    this.isComplete = true;\n    this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n    toResolve.delete(this);\n  }\n\n  cancel() {\n    if (!this.isComplete) {\n      this.isScheduled = false;\n      toResolve.delete(this);\n    }\n  }\n\n  resume() {\n    if (!this.isComplete) this.scheduleResolve();\n  }\n\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs"],"names":["frame","removeNonTranslationalTransform","toResolve","Set","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","Array","from","filter","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","forEach","removedTransforms","length","set","render","measureInitialState","restore","get","key","value","_a","getValue","measureEndState","suspendedScrollY","undefined","window","scrollTo","complete","clear","readAllKeyframes","readKeyframes","flushKeyframeResolvers","KeyframeResolver","constructor","unresolvedKeyframes","onComplete","name","motionValue","isAsync","isComplete","scheduleResolve","add","read","resolveKeyframes","i","currentValue","finalKeyframe","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","delete","cancel","resume"],"mappings":"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","sourcesContent":["import { frame } from 'motion-dom';\r\nimport { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\r\n\r\nconst toResolve = new Set();\r\nlet isScheduled = false;\r\nlet anyNeedsMeasurement = false;\r\nfunction measureAllKeyframes() {\r\n    if (anyNeedsMeasurement) {\r\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\r\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\r\n        const transformsToRestore = new Map();\r\n        /**\r\n         * Write pass\r\n         * If we're measuring elements we want to remove bounding box-changing transforms.\r\n         */\r\n        elementsToMeasure.forEach((element) => {\r\n            const removedTransforms = removeNonTranslationalTransform(element);\r\n            if (!removedTransforms.length)\r\n                return;\r\n            transformsToRestore.set(element, removedTransforms);\r\n            element.render();\r\n        });\r\n        // Read\r\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\r\n        // Write\r\n        elementsToMeasure.forEach((element) => {\r\n            element.render();\r\n            const restore = transformsToRestore.get(element);\r\n            if (restore) {\r\n                restore.forEach(([key, value]) => {\r\n                    var _a;\r\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\r\n                });\r\n            }\r\n        });\r\n        // Read\r\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\r\n        // Write\r\n        resolversToMeasure.forEach((resolver) => {\r\n            if (resolver.suspendedScrollY !== undefined) {\r\n                window.scrollTo(0, resolver.suspendedScrollY);\r\n            }\r\n        });\r\n    }\r\n    anyNeedsMeasurement = false;\r\n    isScheduled = false;\r\n    toResolve.forEach((resolver) => resolver.complete());\r\n    toResolve.clear();\r\n}\r\nfunction readAllKeyframes() {\r\n    toResolve.forEach((resolver) => {\r\n        resolver.readKeyframes();\r\n        if (resolver.needsMeasurement) {\r\n            anyNeedsMeasurement = true;\r\n        }\r\n    });\r\n}\r\nfunction flushKeyframeResolvers() {\r\n    readAllKeyframes();\r\n    measureAllKeyframes();\r\n}\r\nclass KeyframeResolver {\r\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\r\n        /**\r\n         * Track whether this resolver has completed. Once complete, it never\r\n         * needs to attempt keyframe resolution again.\r\n         */\r\n        this.isComplete = false;\r\n        /**\r\n         * Track whether this resolver is async. If it is, it'll be added to the\r\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\r\n         * to trigger read/write thrashing don't need to be async.\r\n         */\r\n        this.isAsync = false;\r\n        /**\r\n         * Track whether this resolver needs to perform a measurement\r\n         * to resolve its keyframes.\r\n         */\r\n        this.needsMeasurement = false;\r\n        /**\r\n         * Track whether this resolver is currently scheduled to resolve\r\n         * to allow it to be cancelled and resumed externally.\r\n         */\r\n        this.isScheduled = false;\r\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\r\n        this.onComplete = onComplete;\r\n        this.name = name;\r\n        this.motionValue = motionValue;\r\n        this.element = element;\r\n        this.isAsync = isAsync;\r\n    }\r\n    scheduleResolve() {\r\n        this.isScheduled = true;\r\n        if (this.isAsync) {\r\n            toResolve.add(this);\r\n            if (!isScheduled) {\r\n                isScheduled = true;\r\n                frame.read(readAllKeyframes);\r\n                frame.resolveKeyframes(measureAllKeyframes);\r\n            }\r\n        }\r\n        else {\r\n            this.readKeyframes();\r\n            this.complete();\r\n        }\r\n    }\r\n    readKeyframes() {\r\n        const { unresolvedKeyframes, name, element, motionValue } = this;\r\n        /**\r\n         * If a keyframe is null, we hydrate it either by reading it from\r\n         * the instance, or propagating from previous keyframes.\r\n         */\r\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\r\n            if (unresolvedKeyframes[i] === null) {\r\n                /**\r\n                 * If the first keyframe is null, we need to find its value by sampling the element\r\n                 */\r\n                if (i === 0) {\r\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\r\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\r\n                    if (currentValue !== undefined) {\r\n                        unresolvedKeyframes[0] = currentValue;\r\n                    }\r\n                    else if (element && name) {\r\n                        const valueAsRead = element.readValue(name, finalKeyframe);\r\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\r\n                            unresolvedKeyframes[0] = valueAsRead;\r\n                        }\r\n                    }\r\n                    if (unresolvedKeyframes[0] === undefined) {\r\n                        unresolvedKeyframes[0] = finalKeyframe;\r\n                    }\r\n                    if (motionValue && currentValue === undefined) {\r\n                        motionValue.set(unresolvedKeyframes[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setFinalKeyframe() { }\r\n    measureInitialState() { }\r\n    renderEndStyles() { }\r\n    measureEndState() { }\r\n    complete() {\r\n        this.isComplete = true;\r\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\r\n        toResolve.delete(this);\r\n    }\r\n    cancel() {\r\n        if (!this.isComplete) {\r\n            this.isScheduled = false;\r\n            toResolve.delete(this);\r\n        }\r\n    }\r\n    resume() {\r\n        if (!this.isComplete)\r\n            this.scheduleResolve();\r\n    }\r\n}\r\n\r\nexport { KeyframeResolver, flushKeyframeResolvers };\r\n"]},"metadata":{},"sourceType":"module"}