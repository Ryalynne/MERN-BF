{"ast":null,"code":"import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\n\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(instance => {\n    if (instance) {\n      visualState.onMount && visualState.onMount(instance);\n    }\n\n    if (visualElement) {\n      if (instance) {\n        visualElement.mount(instance);\n      } else {\n        visualElement.unmount();\n      }\n    }\n\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\r\n   * Only pass a new ref callback to React if we've received a visual element\r\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\r\n   * or other dependencies change.\r\n   */\n  [visualElement]);\n}\n\nexport { useMotionRef };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","onMount","mount","unmount","current"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,aAAnC,EAAkDC,WAAlD,EAA+D;AAC3D,SAAOL,WAAW,CAAEM,QAAD,IAAc;AAC7B,QAAIA,QAAJ,EAAc;AACVH,MAAAA,WAAW,CAACI,OAAZ,IAAuBJ,WAAW,CAACI,OAAZ,CAAoBD,QAApB,CAAvB;AACH;;AACD,QAAIF,aAAJ,EAAmB;AACf,UAAIE,QAAJ,EAAc;AACVF,QAAAA,aAAa,CAACI,KAAd,CAAoBF,QAApB;AACH,OAFD,MAGK;AACDF,QAAAA,aAAa,CAACK,OAAd;AACH;AACJ;;AACD,QAAIJ,WAAJ,EAAiB;AACb,UAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;AACnCA,QAAAA,WAAW,CAACC,QAAD,CAAX;AACH,OAFD,MAGK,IAAIL,WAAW,CAACI,WAAD,CAAf,EAA8B;AAC/BA,QAAAA,WAAW,CAACK,OAAZ,GAAsBJ,QAAtB;AACH;AACJ;AACJ,GApBiB;AAqBlB;AACJ;AACA;AACA;AACA;AACI,GAACF,aAAD,CA1BkB,CAAlB;AA2BH;;AAED,SAASF,YAAT","sourcesContent":["import { useCallback } from 'react';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\n\r\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\r\nfunction useMotionRef(visualState, visualElement, externalRef) {\r\n    return useCallback((instance) => {\r\n        if (instance) {\r\n            visualState.onMount && visualState.onMount(instance);\r\n        }\r\n        if (visualElement) {\r\n            if (instance) {\r\n                visualElement.mount(instance);\r\n            }\r\n            else {\r\n                visualElement.unmount();\r\n            }\r\n        }\r\n        if (externalRef) {\r\n            if (typeof externalRef === \"function\") {\r\n                externalRef(instance);\r\n            }\r\n            else if (isRefObject(externalRef)) {\r\n                externalRef.current = instance;\r\n            }\r\n        }\r\n    }, \r\n    /**\r\n     * Only pass a new ref callback to React if we've received a visual element\r\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\r\n     * or other dependencies change.\r\n     */\r\n    [visualElement]);\r\n}\r\n\r\nexport { useMotionRef };\r\n"]},"metadata":{},"sourceType":"module"}