{"ast":null,"code":"import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n  const {\n    props\n  } = node;\n\n  if (node.animationState && props.whileHover) {\n    node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n  }\n\n  const eventName = \"onHover\" + lifecycle;\n  const callback = props[eventName];\n\n  if (callback) {\n    frame.postRender(() => callback(event, extractEventInfo(event)));\n  }\n}\n\nclass HoverGesture extends Feature {\n  mount() {\n    const {\n      current\n    } = this.node;\n    if (!current) return;\n    this.unmount = hover(current, (_element, startEvent) => {\n      handleHoverEvent(this.node, startEvent, \"Start\");\n      return endEvent => handleHoverEvent(this.node, endEvent, \"End\");\n    });\n  }\n\n  unmount() {}\n\n}\n\nexport { HoverGesture };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/gestures/hover.mjs"],"names":["hover","frame","extractEventInfo","Feature","handleHoverEvent","node","event","lifecycle","props","animationState","whileHover","setActive","eventName","callback","postRender","HoverGesture","mount","current","unmount","_element","startEvent","endEvent"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,OAAT,QAAwB,gCAAxB;;AAEA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,SAAvC,EAAkD;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAYH,IAAlB;;AACA,MAAIA,IAAI,CAACI,cAAL,IAAuBD,KAAK,CAACE,UAAjC,EAA6C;AACzCL,IAAAA,IAAI,CAACI,cAAL,CAAoBE,SAApB,CAA8B,YAA9B,EAA4CJ,SAAS,KAAK,OAA1D;AACH;;AACD,QAAMK,SAAS,GAAI,YAAYL,SAA/B;AACA,QAAMM,QAAQ,GAAGL,KAAK,CAACI,SAAD,CAAtB;;AACA,MAAIC,QAAJ,EAAc;AACVZ,IAAAA,KAAK,CAACa,UAAN,CAAiB,MAAMD,QAAQ,CAACP,KAAD,EAAQJ,gBAAgB,CAACI,KAAD,CAAxB,CAA/B;AACH;AACJ;;AACD,MAAMS,YAAN,SAA2BZ,OAA3B,CAAmC;AAC/Ba,EAAAA,KAAK,GAAG;AACJ,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKZ,IAAzB;AACA,QAAI,CAACY,OAAL,EACI;AACJ,SAAKC,OAAL,GAAelB,KAAK,CAACiB,OAAD,EAAU,CAACE,QAAD,EAAWC,UAAX,KAA0B;AACpDhB,MAAAA,gBAAgB,CAAC,KAAKC,IAAN,EAAYe,UAAZ,EAAwB,OAAxB,CAAhB;AACA,aAAQC,QAAD,IAAcjB,gBAAgB,CAAC,KAAKC,IAAN,EAAYgB,QAAZ,EAAsB,KAAtB,CAArC;AACH,KAHmB,CAApB;AAIH;;AACDH,EAAAA,OAAO,GAAG,CAAG;;AAVkB;;AAanC,SAASH,YAAT","sourcesContent":["import { hover, frame } from 'motion-dom';\r\nimport { extractEventInfo } from '../events/event-info.mjs';\r\nimport { Feature } from '../motion/features/Feature.mjs';\r\n\r\nfunction handleHoverEvent(node, event, lifecycle) {\r\n    const { props } = node;\r\n    if (node.animationState && props.whileHover) {\r\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\r\n    }\r\n    const eventName = (\"onHover\" + lifecycle);\r\n    const callback = props[eventName];\r\n    if (callback) {\r\n        frame.postRender(() => callback(event, extractEventInfo(event)));\r\n    }\r\n}\r\nclass HoverGesture extends Feature {\r\n    mount() {\r\n        const { current } = this.node;\r\n        if (!current)\r\n            return;\r\n        this.unmount = hover(current, (_element, startEvent) => {\r\n            handleHoverEvent(this.node, startEvent, \"Start\");\r\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\r\n        });\r\n    }\r\n    unmount() { }\r\n}\r\n\r\nexport { HoverGesture };\r\n"]},"metadata":{},"sourceType":"module"}