{"ast":null,"code":"import { clamp } from '../../../../utils/clamp.mjs';\nimport { interpolate } from '../../../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\nimport { calcInset } from './inset.mjs';\nimport { resolveOffset } from './offset.mjs';\nimport { ScrollOffset } from './presets.mjs';\nconst point = {\n  x: 0,\n  y: 0\n};\n\nfunction getTargetSize(target) {\n  return \"getBBox\" in target && target.tagName !== \"svg\" ? target.getBBox() : {\n    width: target.clientWidth,\n    height: target.clientHeight\n  };\n}\n\nfunction resolveOffsets(container, info, options) {\n  const {\n    offset: offsetDefinition = ScrollOffset.All\n  } = options;\n  const {\n    target = container,\n    axis = \"y\"\n  } = options;\n  const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n  const inset = target !== container ? calcInset(target, container) : point;\n  /**\r\n   * Measure the target and container. If they're the same thing then we\r\n   * use the container's scrollWidth/Height as the target, from there\r\n   * all other calculations can remain the same.\r\n   */\n\n  const targetSize = target === container ? {\n    width: container.scrollWidth,\n    height: container.scrollHeight\n  } : getTargetSize(target);\n  const containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight\n  };\n  /**\r\n   * Reset the length of the resolved offset array rather than creating a new one.\r\n   * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n   */\n\n  info[axis].offset.length = 0;\n  /**\r\n   * Populate the offset array by resolving the user's offset definition into\r\n   * a list of pixel scroll offets.\r\n   */\n\n  let hasChanged = !info[axis].interpolate;\n  const numOffsets = offsetDefinition.length;\n\n  for (let i = 0; i < numOffsets; i++) {\n    const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n\n    if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n      hasChanged = true;\n    }\n\n    info[axis].offset[i] = offset;\n  }\n  /**\r\n   * If the pixel scroll offsets have changed, create a new interpolator function\r\n   * to map scroll value into a progress.\r\n   */\n\n\n  if (hasChanged) {\n    info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition), {\n      clamp: false\n    });\n    info[axis].interpolatorOffsets = [...info[axis].offset];\n  }\n\n  info[axis].progress = clamp(0, 1, info[axis].interpolate(info[axis].current));\n}\n\nexport { resolveOffsets };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/dom/scroll/offsets/index.mjs"],"names":["clamp","interpolate","defaultOffset","calcInset","resolveOffset","ScrollOffset","point","x","y","getTargetSize","target","tagName","getBBox","width","clientWidth","height","clientHeight","resolveOffsets","container","info","options","offset","offsetDefinition","All","axis","lengthLabel","inset","targetSize","scrollWidth","scrollHeight","containerSize","length","hasChanged","numOffsets","i","interpolatorOffsets","progress","current"],"mappings":"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","sourcesContent":["import { clamp } from '../../../../utils/clamp.mjs';\r\nimport { interpolate } from '../../../../utils/interpolate.mjs';\r\nimport { defaultOffset } from '../../../../utils/offsets/default.mjs';\r\nimport { calcInset } from './inset.mjs';\r\nimport { resolveOffset } from './offset.mjs';\r\nimport { ScrollOffset } from './presets.mjs';\r\n\r\nconst point = { x: 0, y: 0 };\r\nfunction getTargetSize(target) {\r\n    return \"getBBox\" in target && target.tagName !== \"svg\"\r\n        ? target.getBBox()\r\n        : { width: target.clientWidth, height: target.clientHeight };\r\n}\r\nfunction resolveOffsets(container, info, options) {\r\n    const { offset: offsetDefinition = ScrollOffset.All } = options;\r\n    const { target = container, axis = \"y\" } = options;\r\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\r\n    const inset = target !== container ? calcInset(target, container) : point;\r\n    /**\r\n     * Measure the target and container. If they're the same thing then we\r\n     * use the container's scrollWidth/Height as the target, from there\r\n     * all other calculations can remain the same.\r\n     */\r\n    const targetSize = target === container\r\n        ? { width: container.scrollWidth, height: container.scrollHeight }\r\n        : getTargetSize(target);\r\n    const containerSize = {\r\n        width: container.clientWidth,\r\n        height: container.clientHeight,\r\n    };\r\n    /**\r\n     * Reset the length of the resolved offset array rather than creating a new one.\r\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\r\n     */\r\n    info[axis].offset.length = 0;\r\n    /**\r\n     * Populate the offset array by resolving the user's offset definition into\r\n     * a list of pixel scroll offets.\r\n     */\r\n    let hasChanged = !info[axis].interpolate;\r\n    const numOffsets = offsetDefinition.length;\r\n    for (let i = 0; i < numOffsets; i++) {\r\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\r\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\r\n            hasChanged = true;\r\n        }\r\n        info[axis].offset[i] = offset;\r\n    }\r\n    /**\r\n     * If the pixel scroll offsets have changed, create a new interpolator function\r\n     * to map scroll value into a progress.\r\n     */\r\n    if (hasChanged) {\r\n        info[axis].interpolate = interpolate(info[axis].offset, defaultOffset(offsetDefinition), { clamp: false });\r\n        info[axis].interpolatorOffsets = [...info[axis].offset];\r\n    }\r\n    info[axis].progress = clamp(0, 1, info[axis].interpolate(info[axis].current));\r\n}\r\n\r\nexport { resolveOffsets };\r\n"]},"metadata":{},"sourceType":"module"}