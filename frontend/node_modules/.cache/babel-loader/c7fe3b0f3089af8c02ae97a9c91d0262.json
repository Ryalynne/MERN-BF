{"ast":null,"code":"// In our case, there's only one dependency\nvar toRgb = require('hsl-to-rgb-for-reals'); // Typically all dependencies should be declared at the top of the file.\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\n\n\nfunction max(val, n) {\n  return val > n ? n : val;\n}\n\nfunction min(val, n) {\n  return val < n ? n : val;\n}\n\nfunction cycle(val) {\n  // for safety:\n  val = max(val, 1e7);\n  val = min(val, -1e7); // cycle value:\n\n  while (val < 0) {\n    val += 360;\n  }\n\n  while (val > 359) {\n    val -= 360;\n  }\n\n  return val;\n} // Now for the main piece, the `hsl` function:\n\n\nfunction hsl(hue, saturation, luminosity) {\n  // resolve degrees to 0 - 359 range\n  hue = cycle(hue); // enforce constraints\n\n  saturation = min(max(saturation, 100), 0);\n  luminosity = min(max(luminosity, 100), 0); // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n\n  saturation /= 100;\n  luminosity /= 100; // let hsl-to-rgb-for-reals do the hard work\n\n  var rgb = toRgb(hue, saturation, luminosity); // convert each value in the returned RGB array\n  // to a 2 character hex value, join the array into\n  // a string, prefixed with a hash\n\n  return '#' + rgb.map(function (n) {\n    return (256 + n).toString(16).substr(-2);\n  }).join('');\n} // In order to make our code into a bona fide module we have to export it:\n\n\nmodule.exports = hsl;","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/hsl-to-hex/index.js"],"names":["toRgb","require","max","val","n","min","cycle","hsl","hue","saturation","luminosity","rgb","map","toString","substr","join","module","exports"],"mappings":"AAAA;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAAnB,C,CAEA;AAEA;AACA;AACA;AACA;;;AAEA,SAASC,GAAT,CAAcC,GAAd,EAAmBC,CAAnB,EAAsB;AACpB,SAAQD,GAAG,GAAGC,CAAP,GAAYA,CAAZ,GAAgBD,GAAvB;AACD;;AAED,SAASE,GAAT,CAAcF,GAAd,EAAmBC,CAAnB,EAAsB;AACpB,SAAQD,GAAG,GAAGC,CAAP,GAAYA,CAAZ,GAAgBD,GAAvB;AACD;;AAED,SAASG,KAAT,CAAgBH,GAAhB,EAAqB;AACnB;AACAA,EAAAA,GAAG,GAAGD,GAAG,CAACC,GAAD,EAAM,GAAN,CAAT;AACAA,EAAAA,GAAG,GAAGE,GAAG,CAACF,GAAD,EAAM,CAAC,GAAP,CAAT,CAHmB,CAInB;;AACA,SAAOA,GAAG,GAAG,CAAb,EAAgB;AAAEA,IAAAA,GAAG,IAAI,GAAP;AAAY;;AAC9B,SAAOA,GAAG,GAAG,GAAb,EAAkB;AAAEA,IAAAA,GAAG,IAAI,GAAP;AAAY;;AAChC,SAAOA,GAAP;AACD,C,CAED;;;AAEA,SAASI,GAAT,CAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,UAA/B,EAA2C;AACzC;AACAF,EAAAA,GAAG,GAAGF,KAAK,CAACE,GAAD,CAAX,CAFyC,CAIzC;;AACAC,EAAAA,UAAU,GAAGJ,GAAG,CAACH,GAAG,CAACO,UAAD,EAAa,GAAb,CAAJ,EAAuB,CAAvB,CAAhB;AACAC,EAAAA,UAAU,GAAGL,GAAG,CAACH,GAAG,CAACQ,UAAD,EAAa,GAAb,CAAJ,EAAuB,CAAvB,CAAhB,CANyC,CAQzC;;AACAD,EAAAA,UAAU,IAAI,GAAd;AACAC,EAAAA,UAAU,IAAI,GAAd,CAVyC,CAYzC;;AACA,MAAIC,GAAG,GAAGX,KAAK,CAACQ,GAAD,EAAMC,UAAN,EAAkBC,UAAlB,CAAf,CAbyC,CAezC;AACA;AACA;;AACA,SAAO,MAAMC,GAAG,CACbC,GADU,CACN,UAAUR,CAAV,EAAa;AAChB,WAAO,CAAC,MAAMA,CAAP,EAAUS,QAAV,CAAmB,EAAnB,EAAuBC,MAAvB,CAA8B,CAAC,CAA/B,CAAP;AACD,GAHU,EAIVC,IAJU,CAIL,EAJK,CAAb;AAKD,C,CAED;;;AAEAC,MAAM,CAACC,OAAP,GAAiBV,GAAjB","sourcesContent":["// In our case, there's only one dependency\r\n\r\nvar toRgb = require('hsl-to-rgb-for-reals')\r\n\r\n// Typically all dependencies should be declared at the top of the file.\r\n\r\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\r\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\r\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\r\n// Let's write some utility functions to handle this logic:\r\n\r\nfunction max (val, n) {\r\n  return (val > n) ? n : val\r\n}\r\n\r\nfunction min (val, n) {\r\n  return (val < n) ? n : val\r\n}\r\n\r\nfunction cycle (val) {\r\n  // for safety:\r\n  val = max(val, 1e7)\r\n  val = min(val, -1e7)\r\n  // cycle value:\r\n  while (val < 0) { val += 360 }\r\n  while (val > 359) { val -= 360 }\r\n  return val\r\n}\r\n\r\n// Now for the main piece, the `hsl` function:\r\n\r\nfunction hsl (hue, saturation, luminosity) {\r\n  // resolve degrees to 0 - 359 range\r\n  hue = cycle(hue)\r\n\r\n  // enforce constraints\r\n  saturation = min(max(saturation, 100), 0)\r\n  luminosity = min(max(luminosity, 100), 0)\r\n\r\n  // convert to 0 to 1 range used by hsl-to-rgb-for-reals\r\n  saturation /= 100\r\n  luminosity /= 100\r\n\r\n  // let hsl-to-rgb-for-reals do the hard work\r\n  var rgb = toRgb(hue, saturation, luminosity)\r\n\r\n  // convert each value in the returned RGB array\r\n  // to a 2 character hex value, join the array into\r\n  // a string, prefixed with a hash\r\n  return '#' + rgb\r\n    .map(function (n) {\r\n      return (256 + n).toString(16).substr(-2)\r\n    })\r\n    .join('')\r\n}\r\n\r\n// In order to make our code into a bona fide module we have to export it:\r\n\r\nmodule.exports = hsl\r\n"]},"metadata":{},"sourceType":"script"}