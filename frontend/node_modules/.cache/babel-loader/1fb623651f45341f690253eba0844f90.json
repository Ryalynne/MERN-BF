{"ast":null,"code":"\"use client\";\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n/**\r\n * Used in conjunction with the `m` component to reduce bundle size.\r\n *\r\n * `m` is a version of the `motion` component that only loads functionality\r\n * critical for the initial render.\r\n *\r\n * `LazyMotion` can then be used to either synchronously or asynchronously\r\n * load animation and gesture support.\r\n *\r\n * ```jsx\r\n * // Synchronous loading\r\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={domAnimation}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n *\r\n * // Asynchronous loading\r\n * import { LazyMotion, m } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\n\nfunction LazyMotion(_ref) {\n  let {\n    children,\n    features,\n    strict = false\n  } = _ref;\n  const [, setIsLoaded] = useState(!isLazyBundle(features));\n  const loadedRenderer = useRef(undefined);\n  /**\r\n   * If this is a synchronous load, load features immediately\r\n   */\n\n  if (!isLazyBundle(features)) {\n    const {\n      renderer,\n      ...loadedFeatures\n    } = features;\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n\n  useEffect(() => {\n    if (isLazyBundle(features)) {\n      features().then(_ref2 => {\n        let {\n          renderer,\n          ...loadedFeatures\n        } = _ref2;\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return jsx(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict\n    },\n    children: children\n  });\n}\n\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\n\nexport { LazyMotion };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs"],"names":["jsx","useState","useRef","useEffect","LazyContext","loadFeatures","LazyMotion","children","features","strict","setIsLoaded","isLazyBundle","loadedRenderer","undefined","renderer","loadedFeatures","current","then","Provider","value"],"mappings":"AAAA;;AACA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,OAA4D;AAAA,MAAxC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,MAAM,GAAG;AAA/B,GAAwC;AACxD,QAAM,GAAGC,WAAH,IAAkBT,QAAQ,CAAC,CAACU,YAAY,CAACH,QAAD,CAAd,CAAhC;AACA,QAAMI,cAAc,GAAGV,MAAM,CAACW,SAAD,CAA7B;AACA;AACJ;AACA;;AACI,MAAI,CAACF,YAAY,CAACH,QAAD,CAAjB,EAA6B;AACzB,UAAM;AAAEM,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAAkCP,QAAxC;AACAI,IAAAA,cAAc,CAACI,OAAf,GAAyBF,QAAzB;AACAT,IAAAA,YAAY,CAACU,cAAD,CAAZ;AACH;;AACDZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,YAAY,CAACH,QAAD,CAAhB,EAA4B;AACxBA,MAAAA,QAAQ,GAAGS,IAAX,CAAgB,SAAqC;AAAA,YAApC;AAAEH,UAAAA,QAAF;AAAY,aAAGC;AAAf,SAAoC;AACjDV,QAAAA,YAAY,CAACU,cAAD,CAAZ;AACAH,QAAAA,cAAc,CAACI,OAAf,GAAyBF,QAAzB;AACAJ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH,OAJD;AAKH;AACJ,GARQ,EAQN,EARM,CAAT;AASA,SAAQV,GAAG,CAACI,WAAW,CAACc,QAAb,EAAuB;AAAEC,IAAAA,KAAK,EAAE;AAAEL,MAAAA,QAAQ,EAAEF,cAAc,CAACI,OAA3B;AAAoCP,MAAAA;AAApC,KAAT;AAAuDF,IAAAA,QAAQ,EAAEA;AAAjE,GAAvB,CAAX;AACH;;AACD,SAASI,YAAT,CAAsBH,QAAtB,EAAgC;AAC5B,SAAO,OAAOA,QAAP,KAAoB,UAA3B;AACH;;AAED,SAASF,UAAT","sourcesContent":["\"use client\";\r\nimport { jsx } from 'react/jsx-runtime';\r\nimport { useState, useRef, useEffect } from 'react';\r\nimport { LazyContext } from '../../context/LazyContext.mjs';\r\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\r\n\r\n/**\r\n * Used in conjunction with the `m` component to reduce bundle size.\r\n *\r\n * `m` is a version of the `motion` component that only loads functionality\r\n * critical for the initial render.\r\n *\r\n * `LazyMotion` can then be used to either synchronously or asynchronously\r\n * load animation and gesture support.\r\n *\r\n * ```jsx\r\n * // Synchronous loading\r\n * import { LazyMotion, m, domAnimation } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={domAnimation}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n *\r\n * // Asynchronous loading\r\n * import { LazyMotion, m } from \"framer-motion\"\r\n *\r\n * function App() {\r\n *   return (\r\n *     <LazyMotion features={() => import('./path/to/domAnimation')}>\r\n *       <m.div animate={{ scale: 2 }} />\r\n *     </LazyMotion>\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction LazyMotion({ children, features, strict = false }) {\r\n    const [, setIsLoaded] = useState(!isLazyBundle(features));\r\n    const loadedRenderer = useRef(undefined);\r\n    /**\r\n     * If this is a synchronous load, load features immediately\r\n     */\r\n    if (!isLazyBundle(features)) {\r\n        const { renderer, ...loadedFeatures } = features;\r\n        loadedRenderer.current = renderer;\r\n        loadFeatures(loadedFeatures);\r\n    }\r\n    useEffect(() => {\r\n        if (isLazyBundle(features)) {\r\n            features().then(({ renderer, ...loadedFeatures }) => {\r\n                loadFeatures(loadedFeatures);\r\n                loadedRenderer.current = renderer;\r\n                setIsLoaded(true);\r\n            });\r\n        }\r\n    }, []);\r\n    return (jsx(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict }, children: children }));\r\n}\r\nfunction isLazyBundle(features) {\r\n    return typeof features === \"function\";\r\n}\r\n\r\nexport { LazyMotion };\r\n"]},"metadata":{},"sourceType":"module"}