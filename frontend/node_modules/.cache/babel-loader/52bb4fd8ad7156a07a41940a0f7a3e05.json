{"ast":null,"code":"import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n  /**\r\n   * We dynamically generate the AnimationState manager as it contains a reference\r\n   * to the underlying animation library. We only want to load that if we load this,\r\n   * so people can optionally code split it out using the `m` component.\r\n   */\n  constructor(node) {\n    super(node);\n    node.animationState || (node.animationState = createAnimationState(node));\n  }\n\n  updateAnimationControlsSubscription() {\n    const {\n      animate\n    } = this.node.getProps();\n\n    if (isAnimationControls(animate)) {\n      this.unmountControls = animate.subscribe(this.node);\n    }\n  }\n  /**\r\n   * Subscribe any provided AnimationControls to the component's VisualElement\r\n   */\n\n\n  mount() {\n    this.updateAnimationControlsSubscription();\n  }\n\n  update() {\n    const {\n      animate\n    } = this.node.getProps();\n    const {\n      animate: prevAnimate\n    } = this.node.prevProps || {};\n\n    if (animate !== prevAnimate) {\n      this.updateAnimationControlsSubscription();\n    }\n  }\n\n  unmount() {\n    var _a;\n\n    this.node.animationState.reset();\n    (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\n  }\n\n}\n\nexport { AnimationFeature };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs"],"names":["isAnimationControls","createAnimationState","Feature","AnimationFeature","constructor","node","animationState","updateAnimationControlsSubscription","animate","getProps","unmountControls","subscribe","mount","update","prevAnimate","prevProps","unmount","_a","reset","call"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,oDAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;AACnC;AACJ;AACA;AACA;AACA;AACIE,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAMA,IAAN;AACAA,IAAAA,IAAI,CAACC,cAAL,KAAwBD,IAAI,CAACC,cAAL,GAAsBL,oBAAoB,CAACI,IAAD,CAAlE;AACH;;AACDE,EAAAA,mCAAmC,GAAG;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;;AACA,QAAIT,mBAAmB,CAACQ,OAAD,CAAvB,EAAkC;AAC9B,WAAKE,eAAL,GAAuBF,OAAO,CAACG,SAAR,CAAkB,KAAKN,IAAvB,CAAvB;AACH;AACJ;AACD;AACJ;AACA;;;AACIO,EAAAA,KAAK,GAAG;AACJ,SAAKL,mCAAL;AACH;;AACDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEL,MAAAA;AAAF,QAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;AACA,UAAM;AAAED,MAAAA,OAAO,EAAEM;AAAX,QAA2B,KAAKT,IAAL,CAAUU,SAAV,IAAuB,EAAxD;;AACA,QAAIP,OAAO,KAAKM,WAAhB,EAA6B;AACzB,WAAKP,mCAAL;AACH;AACJ;;AACDS,EAAAA,OAAO,GAAG;AACN,QAAIC,EAAJ;;AACA,SAAKZ,IAAL,CAAUC,cAAV,CAAyBY,KAAzB;AACA,KAACD,EAAE,GAAG,KAAKP,eAAX,MAAgC,IAAhC,IAAwCO,EAAE,KAAK,KAAK,CAApD,GAAwD,KAAK,CAA7D,GAAiEA,EAAE,CAACE,IAAH,CAAQ,IAAR,CAAjE;AACH;;AAjCkC;;AAoCvC,SAAShB,gBAAT","sourcesContent":["import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\r\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\r\nimport { Feature } from '../Feature.mjs';\r\n\r\nclass AnimationFeature extends Feature {\r\n    /**\r\n     * We dynamically generate the AnimationState manager as it contains a reference\r\n     * to the underlying animation library. We only want to load that if we load this,\r\n     * so people can optionally code split it out using the `m` component.\r\n     */\r\n    constructor(node) {\r\n        super(node);\r\n        node.animationState || (node.animationState = createAnimationState(node));\r\n    }\r\n    updateAnimationControlsSubscription() {\r\n        const { animate } = this.node.getProps();\r\n        if (isAnimationControls(animate)) {\r\n            this.unmountControls = animate.subscribe(this.node);\r\n        }\r\n    }\r\n    /**\r\n     * Subscribe any provided AnimationControls to the component's VisualElement\r\n     */\r\n    mount() {\r\n        this.updateAnimationControlsSubscription();\r\n    }\r\n    update() {\r\n        const { animate } = this.node.getProps();\r\n        const { animate: prevAnimate } = this.node.prevProps || {};\r\n        if (animate !== prevAnimate) {\r\n            this.updateAnimationControlsSubscription();\r\n        }\r\n    }\r\n    unmount() {\r\n        var _a;\r\n        this.node.animationState.reset();\r\n        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    }\r\n}\r\n\r\nexport { AnimationFeature };\r\n"]},"metadata":{},"sourceType":"module"}