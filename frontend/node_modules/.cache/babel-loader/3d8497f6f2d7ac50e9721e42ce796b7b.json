{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\Employee\\\\EditUser.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditUser = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [positions, setPositions] = useState([]);\n  const [position_id, setPositionId] = useState(\"\");\n  const [salary, setSalary] = useState(\"\");\n  const [departments, setDepartments] = useState([]);\n  const [dep_id, setDepId] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams(); // Add validation errors state\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    gender: false,\n    dep_id: false,\n    position_id: false\n  }); // Update salary when position_id changes\n\n  useEffect(() => {\n    const selectedPosition = positions.find(pos => String(pos.id) === String(position_id));\n    setSalary(selectedPosition ? selectedPosition.salary : \"\");\n  }, [position_id, positions]); // Fetch all initial data (user, departments, positions)\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true); // Fetch departments\n\n        const deptResponse = await axios.get(\"http://localhost:5000/job\");\n        setDepartments(deptResponse.data); // Fetch user data\n\n        const userResponse = await axios.get(`http://localhost:5000/users/${id}`);\n        console.log(\"User API Response:\", userResponse.data);\n        setName(userResponse.data.full_name || \"\");\n        setEmail(userResponse.data.email || \"\");\n        setGender(userResponse.data.gender || \"\");\n        const jobId = userResponse.data.job_id ? String(userResponse.data.job_id) : \"\";\n        setDepId(jobId);\n        const posId = userResponse.data.salary_id ? String(userResponse.data.salary_id) : \"\";\n        setPositionId(posId); // Fetch positions if job_id exists\n\n        if (jobId) {\n          const posResponse = await axios.get(`http://localhost:5000/salary/getPosition/${jobId}`);\n          console.log(\"Positions for job\", jobId, \":\", posResponse.data);\n          setPositions(posResponse.data); // Validate position_id against fetched positions\n\n          const isValidPosition = posResponse.data.some(pos => String(pos.id) === String(posId));\n\n          if (!isValidPosition) {\n            setPositionId(\"\");\n          }\n        } // Set initial errors based on fetched data\n\n\n        setErrors({\n          name: !userResponse.data.full_name,\n          email: !userResponse.data.email,\n          gender: !userResponse.data.gender,\n          dep_id: !jobId,\n          position_id: !posId\n        });\n      } catch (error) {\n        console.error(\"Error fetching initial data:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, [id]); // Fetch positions when dep_id changes (after initial load)\n\n  useEffect(() => {\n    if (!dep_id || loading) {\n      return;\n    }\n\n    const fetchPositions = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/salary/getPosition/${dep_id}`);\n        const fetchedPositions = response.data;\n        console.log(\"Positions updated for job\", dep_id, \":\", fetchedPositions);\n        setPositions(fetchedPositions); // Reset position_id if it's not valid for the new job\n\n        const isCurrentPositionValid = fetchedPositions.some(pos => String(pos.id) === String(position_id));\n\n        if (!isCurrentPositionValid) {\n          setPositionId(\"\");\n          setSalary(\"\");\n          setErrors(prev => ({ ...prev,\n            position_id: true\n          }));\n        }\n      } catch (error) {\n        console.error(\"Error fetching positions:\", error);\n        setPositions([]);\n        setPositionId(\"\");\n        setSalary(\"\");\n        setErrors(prev => ({ ...prev,\n          position_id: true\n        }));\n      }\n    };\n\n    fetchPositions();\n  }, [dep_id, loading]); // Real-time validation handler\n\n  const handleInputChange = (field, value) => {\n    switch (field) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"email\":\n        setEmail(value);\n        break;\n\n      case \"gender\":\n        setGender(value);\n        break;\n\n      case \"dep_id\":\n        setDepId(value);\n        break;\n\n      case \"position_id\":\n        setPositionId(value);\n        break;\n\n      default:\n        break;\n    }\n\n    setErrors(prev => ({ ...prev,\n      [field]: !value || value.trim() === \"\"\n    }));\n  };\n\n  const updateUser = async e => {\n    e.preventDefault(); // Programmatic validation for all required fields\n\n    const newErrors = {\n      name: !name || name.trim() === \"\",\n      email: !email || email.trim() === \"\",\n      gender: !gender || gender.trim() === \"\",\n      dep_id: !dep_id || dep_id.trim() === \"\",\n      position_id: !position_id || position_id.trim() === \"\"\n    };\n\n    if (Object.values(newErrors).some(error => error)) {\n      setErrors(newErrors);\n      console.log(\"Validation failed:\", newErrors);\n      return;\n    }\n\n    try {\n      await axios.patch(`http://localhost:5000/users/${id}`, {\n        name,\n        email,\n        gender,\n        position_id: position_id ? parseInt(position_id) : null,\n        job_id: dep_id ? parseInt(dep_id) : null\n      });\n      navigate(\"/home/EmployeeList\");\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column is-half container mt-5\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: updateUser,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input\",\n              value: name,\n              onChange: e => handleInputChange(\"name\", e.target.value),\n              placeholder: \"Name\",\n              style: {\n                borderColor: errors.name ? \"red\" : \"\"\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              className: \"input\",\n              value: email,\n              onChange: e => handleInputChange(\"email\", e.target.value),\n              placeholder: \"Email\",\n              style: {\n                borderColor: errors.email ? \"red\" : \"\"\n              },\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Gender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select is-fullwidth\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: gender,\n                onChange: e => handleInputChange(\"gender\", e.target.value),\n                style: {\n                  borderColor: errors.gender ? \"red\" : \"\"\n                },\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Gender\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Male\",\n                  children: \"Male\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Female\",\n                  children: \"Female\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select is-fullwidth\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: dep_id,\n                onChange: e => handleInputChange(\"dep_id\", e.target.value),\n                style: {\n                  borderColor: errors.dep_id ? \"red\" : \"\"\n                },\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Job Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 21\n                }, this), departments.map(dep => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: dep.id,\n                  children: dep.Job_Title\n                }, dep.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select is-fullwidth\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: position_id,\n                onChange: e => handleInputChange(\"position_id\", e.target.value),\n                disabled: !dep_id || positions.length === 0,\n                style: {\n                  borderColor: errors.position_id ? \"red\" : \"\"\n                },\n                required: true,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 21\n                }, this), positions.map(pos => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: pos.id,\n                  children: pos.position\n                }, pos.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label\",\n            children: \"Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"control\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input\",\n              value: salary ? `₱${parseFloat(salary).toLocaleString(\"en-PH\", {\n                minimumFractionDigits: 2\n              })}` : \"\",\n              disabled: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"field\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"button is-success\",\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditUser, \"WYLjJXX6SaEFCdgmhv2cbjBuQSo=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = EditUser;\nexport default EditUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUser\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/Employee/EditUser.js"],"names":["React","useState","useEffect","axios","useNavigate","useParams","EditUser","name","setName","email","setEmail","gender","setGender","positions","setPositions","position_id","setPositionId","salary","setSalary","departments","setDepartments","dep_id","setDepId","loading","setLoading","navigate","id","errors","setErrors","selectedPosition","find","pos","String","fetchInitialData","deptResponse","get","data","userResponse","console","log","full_name","jobId","job_id","posId","salary_id","posResponse","isValidPosition","some","error","fetchPositions","response","fetchedPositions","isCurrentPositionValid","prev","handleInputChange","field","value","trim","updateUser","e","preventDefault","newErrors","Object","values","patch","parseInt","target","borderColor","map","dep","Job_Title","length","position","parseFloat","toLocaleString","minimumFractionDigits"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nconst EditUser = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n  const [positions, setPositions] = useState([]);\r\n  const [position_id, setPositionId] = useState(\"\");\r\n  const [salary, setSalary] = useState(\"\");\r\n  const [departments, setDepartments] = useState([]);\r\n  const [dep_id, setDepId] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n\r\n  // Add validation errors state\r\n  const [errors, setErrors] = useState({\r\n    name: false,\r\n    email: false,\r\n    gender: false,\r\n    dep_id: false,\r\n    position_id: false,\r\n  });\r\n\r\n  // Update salary when position_id changes\r\n  useEffect(() => {\r\n    const selectedPosition = positions.find(\r\n      (pos) => String(pos.id) === String(position_id)\r\n    );\r\n    setSalary(selectedPosition ? selectedPosition.salary : \"\");\r\n  }, [position_id, positions]);\r\n\r\n  // Fetch all initial data (user, departments, positions)\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        setLoading(true);\r\n\r\n        // Fetch departments\r\n        const deptResponse = await axios.get(\"http://localhost:5000/job\");\r\n        setDepartments(deptResponse.data);\r\n\r\n        // Fetch user data\r\n        const userResponse = await axios.get(`http://localhost:5000/users/${id}`);\r\n        console.log(\"User API Response:\", userResponse.data);\r\n        setName(userResponse.data.full_name || \"\");\r\n        setEmail(userResponse.data.email || \"\");\r\n        setGender(userResponse.data.gender || \"\");\r\n        const jobId = userResponse.data.job_id ? String(userResponse.data.job_id) : \"\";\r\n        setDepId(jobId);\r\n        const posId = userResponse.data.salary_id ? String(userResponse.data.salary_id) : \"\";\r\n        setPositionId(posId);\r\n\r\n        // Fetch positions if job_id exists\r\n        if (jobId) {\r\n          const posResponse = await axios.get(\r\n            `http://localhost:5000/salary/getPosition/${jobId}`\r\n          );\r\n          console.log(\"Positions for job\", jobId, \":\", posResponse.data);\r\n          setPositions(posResponse.data);\r\n\r\n          // Validate position_id against fetched positions\r\n          const isValidPosition = posResponse.data.some(\r\n            (pos) => String(pos.id) === String(posId)\r\n          );\r\n          if (!isValidPosition) {\r\n            setPositionId(\"\");\r\n          }\r\n        }\r\n\r\n        // Set initial errors based on fetched data\r\n        setErrors({\r\n          name: !userResponse.data.full_name,\r\n          email: !userResponse.data.email,\r\n          gender: !userResponse.data.gender,\r\n          dep_id: !jobId,\r\n          position_id: !posId,\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error fetching initial data:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, [id]);\r\n\r\n  // Fetch positions when dep_id changes (after initial load)\r\n  useEffect(() => {\r\n    if (!dep_id || loading) {\r\n      return;\r\n    }\r\n\r\n    const fetchPositions = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:5000/salary/getPosition/${dep_id}`\r\n        );\r\n        const fetchedPositions = response.data;\r\n        console.log(\"Positions updated for job\", dep_id, \":\", fetchedPositions);\r\n        setPositions(fetchedPositions);\r\n\r\n        // Reset position_id if it's not valid for the new job\r\n        const isCurrentPositionValid = fetchedPositions.some(\r\n          (pos) => String(pos.id) === String(position_id)\r\n        );\r\n        if (!isCurrentPositionValid) {\r\n          setPositionId(\"\");\r\n          setSalary(\"\");\r\n          setErrors((prev) => ({ ...prev, position_id: true }));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching positions:\", error);\r\n        setPositions([]);\r\n        setPositionId(\"\");\r\n        setSalary(\"\");\r\n        setErrors((prev) => ({ ...prev, position_id: true }));\r\n      }\r\n    };\r\n\r\n    fetchPositions();\r\n  }, [dep_id, loading]);\r\n\r\n  // Real-time validation handler\r\n  const handleInputChange = (field, value) => {\r\n    switch (field) {\r\n      case \"name\":\r\n        setName(value);\r\n        break;\r\n      case \"email\":\r\n        setEmail(value);\r\n        break;\r\n      case \"gender\":\r\n        setGender(value);\r\n        break;\r\n      case \"dep_id\":\r\n        setDepId(value);\r\n        break;\r\n      case \"position_id\":\r\n        setPositionId(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    setErrors((prev) => ({ ...prev, [field]: !value || value.trim() === \"\" }));\r\n  };\r\n\r\n  const updateUser = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Programmatic validation for all required fields\r\n    const newErrors = {\r\n      name: !name || name.trim() === \"\",\r\n      email: !email || email.trim() === \"\",\r\n      gender: !gender || gender.trim() === \"\",\r\n      dep_id: !dep_id || dep_id.trim() === \"\",\r\n      position_id: !position_id || position_id.trim() === \"\",\r\n    };\r\n\r\n    if (Object.values(newErrors).some((error) => error)) {\r\n      setErrors(newErrors);\r\n      console.log(\"Validation failed:\", newErrors);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.patch(`http://localhost:5000/users/${id}`, {\r\n        name,\r\n        email,\r\n        gender,\r\n        position_id: position_id ? parseInt(position_id) : null,\r\n        job_id: dep_id ? parseInt(dep_id) : null,\r\n      });\r\n      navigate(\"/home/EmployeeList\");\r\n    } catch (error) {\r\n      console.error(\"Error updating user:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"column is-half container mt-5\">\r\n        {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <form onSubmit={updateUser}>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Name</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input\"\r\n                  value={name}\r\n                  onChange={(e) => handleInputChange(\"name\", e.target.value)}\r\n                  placeholder=\"Name\"\r\n                  style={{ borderColor: errors.name ? \"red\" : \"\" }}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Email</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  type=\"email\"\r\n                  className=\"input\"\r\n                  value={email}\r\n                  onChange={(e) => handleInputChange(\"email\", e.target.value)}\r\n                  placeholder=\"Email\"\r\n                  style={{ borderColor: errors.email ? \"red\" : \"\" }}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Gender</label>\r\n              <div className=\"control\">\r\n                <div className=\"select is-fullwidth\">\r\n                  <select\r\n                    value={gender}\r\n                    onChange={(e) => handleInputChange(\"gender\", e.target.value)}\r\n                    style={{ borderColor: errors.gender ? \"red\" : \"\" }}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Gender</option>\r\n                    <option value=\"Male\">Male</option>\r\n                    <option value=\"Female\">Female</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Job Title</label>\r\n              <div className=\"control\">\r\n                <div className=\"select is-fullwidth\">\r\n                  <select\r\n                    value={dep_id}\r\n                    onChange={(e) => handleInputChange(\"dep_id\", e.target.value)}\r\n                    style={{ borderColor: errors.dep_id ? \"red\" : \"\" }}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select Job Title</option>\r\n                    {departments.map((dep) => (\r\n                      <option key={dep.id} value={dep.id}>\r\n                        {dep.Job_Title}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Position</label>\r\n              <div className=\"control\">\r\n                <div className=\"select is-fullwidth\">\r\n                  <select\r\n                    value={position_id}\r\n                    onChange={(e) => handleInputChange(\"position_id\", e.target.value)}\r\n                    disabled={!dep_id || positions.length === 0}\r\n                    style={{ borderColor: errors.position_id ? \"red\" : \"\" }}\r\n                    required\r\n                  >\r\n                    <option value=\"\">Select a position</option>\r\n                    {positions.map((pos) => (\r\n                      <option key={pos.id} value={pos.id}>\r\n                        {pos.position}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <label className=\"label\">Salary</label>\r\n              <div className=\"control\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input\"\r\n                  value={\r\n                    salary\r\n                      ? `₱${parseFloat(salary).toLocaleString(\"en-PH\", {\r\n                          minimumFractionDigits: 2,\r\n                        })}`\r\n                      : \"\"\r\n                  }\r\n                  disabled\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"field\">\r\n              <button type=\"submit\" className=\"button is-success\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditUser;"]},"metadata":{},"sourceType":"module"}