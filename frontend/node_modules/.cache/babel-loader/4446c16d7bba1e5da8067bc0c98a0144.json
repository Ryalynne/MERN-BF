{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\JobTitle\\\\JobList.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { Link } from \"react-router-dom\";\n// import AddDeptModal from \"../UI/Modal/AddDeptModal\";\n// function DepartList() {\n//   /*** State Hooks ***/\n//   const [jobs, setJobs] = useState([]);\n//   const [searchTerm, setSearchTerm] = useState(\"\");\n//   const [entriesToShow, setEntriesToShow] = useState(10);\n//   const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n//   const [editingJobId, setEditingJobId] = useState(null);\n//   const [editedJobTitle, setEditedJobTitle] = useState(\"\");\n//   const [isModalActive, setIsModalActive] = useState(false); // Modal state\n//   /*** Effect Hooks ***/\n//   useEffect(() => {\n//     fetchJobs();\n//     // Handle screen size changes\n//     const handleResize = () => setIsMobile(window.innerWidth < 768);\n//     window.addEventListener(\"resize\", handleResize);\n//     return () => window.removeEventListener(\"resize\", handleResize);\n//   }, []);\n//   /*** API Calls ***/\n//   const fetchJobs = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/job\");\n//       setJobs(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching job titles:\", error);\n//     }\n//   };\n//   /*** Filtering Logic ***/\n//   const filteredJobs = jobs.filter((job) =>\n//     job.Job_Title.toLowerCase().includes(searchTerm.toLowerCase())\n//   );\n//   const displayedJobs = filteredJobs.slice(0, entriesToShow);\n//   /*** Inline Editing Functions ***/\n//   const startEditing = (job) => {\n//     setEditingJobId(job.id);\n//     setEditedJobTitle(job.Job_Title);\n//   };\n//   const cancelEditing = () => {\n//     setEditingJobId(null);\n//     setEditedJobTitle(\"\");\n//   };\n//   const saveJobTitle = async (id) => {\n//     try {\n//       await axios.patch(`http://localhost:5000/job/${id}`, {\n//         job_title: editedJobTitle,\n//       });\n//       setJobs(\n//         jobs.map((job) =>\n//           job.id === id ? { ...job, Job_Title: editedJobTitle } : job\n//         )\n//       );\n//       setEditingJobId(null);\n//     } catch (error) {\n//       console.error(\"Error updating job title:\", error);\n//     }\n//   };\n//   return (\n//     <div style={{ position: \"relative\" }}>\n//       {/* Background and Overlay */}\n//       <div\n//         style={{\n//           position: \"fixed\",\n//           top: 0,\n//           left: 0,\n//           width: \"100vw\",\n//           height: \"100vh\",\n//           backgroundImage: \"url('/loginBanner.jpg')\",\n//           backgroundSize: \"cover\",\n//           backgroundPosition: \"center\",\n//           backgroundRepeat: \"no-repeat\",\n//           backgroundAttachment: \"fixed\",\n//           zIndex: -2,\n//         }}\n//       />\n//       <div\n//         style={{\n//           position: \"fixed\",\n//           top: 0,\n//           left: 0,\n//           width: \"100vw\",\n//           height: \"100vh\",\n//           background: \"rgba(0, 0, 0, 0.5)\",\n//           zIndex: -1,\n//         }}\n//       />\n//       {/* Main Content */}\n//       <div\n//         className=\"column container mt-5\"\n//         style={{ position: \"relative\", zIndex: 1 }}\n//       >\n//         {/* Search & Actions */}\n//         <div className=\"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\">\n//           <input\n//             type=\"text\"\n//             className=\"input\"\n//             style={{ maxWidth: \"300px\" }}\n//             placeholder=\"Search Job Title...\"\n//             value={searchTerm}\n//             onChange={(e) => setSearchTerm(e.target.value)}\n//           />\n//           {isMobile ? (\n//             <Link to=\"/home/AddJob\" className=\"button is-success ml-3\">\n//               Add Job Title\n//             </Link>\n//           ) : (\n//             <div>\n//               <button\n//                 className=\"button is-success ml-3\"\n//                 onClick={() => setIsModalActive(true)} // Open modal\n//               >\n//                 Add Job Title\n//               </button>{\" \"}\n//               <AddDeptModal\n//                 isActive={isModalActive}\n//                 onClose={() => setIsModalActive(false)}\n//               />\n//             </div>\n//           )}\n//         </div>\n//         {/* Table View (Desktop) */}\n//         {!isMobile ? (\n//           <table className=\"table is-striped is-fullwidth\">\n//             <thead>\n//               <tr>\n//                 <th>Job ID</th>\n//                 <th>Job Title</th>\n//                 <th>Action</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {displayedJobs.map((job) => (\n//                 <tr key={job.id}>\n//                   <td>{job.id}</td>\n//                   <td>\n//                     {editingJobId === job.id ? (\n//                       <input\n//                         type=\"text\"\n//                         className=\"input\"\n//                         value={editedJobTitle}\n//                         onChange={(e) => setEditedJobTitle(e.target.value)}\n//                       />\n//                     ) : (\n//                       job.Job_Title\n//                     )}\n//                   </td>\n//                   <td>\n//                     {editingJobId === job.id ? (\n//                       <>\n//                         <button\n//                           className=\"button is-small is-success mr-2\"\n//                           onClick={() => saveJobTitle(job.id)}\n//                         >\n//                           Save\n//                         </button>\n//                         <button\n//                           className=\"button is-small is-danger\"\n//                           onClick={cancelEditing}\n//                         >\n//                           Cancel\n//                         </button>\n//                       </>\n//                     ) : (\n//                       <button\n//                         className=\"button is-small is-info mr-2\"\n//                         onClick={() => startEditing(job)}\n//                       >\n//                         Edit\n//                       </button>\n//                     )}\n//                   </td>\n//                 </tr>\n//               ))}\n//             </tbody>\n//           </table>\n//         ) : (\n//           <div className=\"columns is-multiline\">\n//             {displayedJobs.map((job) => (\n//               <div key={job.id} className=\"column is-12\">\n//                 <div className=\"card\">\n//                   <header className=\"card-header\">\n//                     <p className=\"card-header-title\">{job.Job_Title}</p>\n//                   </header>\n//                   <div className=\"card-content\">\n//                     <p className=\"subtitle is-6\">\n//                       <strong>Job ID:</strong> {job.id}\n//                     </p>\n//                   </div>\n//                   <footer className=\"card-footer\">\n//                     <Link\n//                       to={`/home/editJobTitle/${job.id}`}\n//                       className=\"card-footer-item button is-small is-info\"\n//                     >\n//                       Edit\n//                     </Link>\n//                   </footer>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//         )}\n//         {/* Footer - Entry Controls */}\n//         <div className=\"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\">\n//           <div>\n//             <label className=\"mr-2\">Show entries:</label>\n//             <div className=\"select\">\n//               <select\n//                 value={entriesToShow}\n//                 onChange={(e) => setEntriesToShow(Number(e.target.value))}\n//               >\n//                 <option value=\"5\">5</option>\n//                 <option value=\"10\">10</option>\n//                 <option value=\"20\">20</option>\n//                 <option value={filteredJobs.length}>All</option>\n//               </select>\n//             </div>\n//           </div>\n//           <p>\n//             Showing {displayedJobs.length} of {filteredJobs.length} entries\n//           </p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default DepartList;\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DepartList() {\n  _s();\n\n  const [jobs, setJobs] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [entriesToShow, setEntriesToShow] = useState(10);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [editingJobId, setEditingJobId] = useState(null);\n  const [editedJobTitle, setEditedJobTitle] = useState(\"\");\n  const [newJobTitle, setNewJobTitle] = useState(\"\");\n  const [isAdding, setIsAdding] = useState(false);\n  useEffect(() => {\n    fetchJobs();\n\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const fetchJobs = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/job\");\n      console.log(\"Fetched jobs:\", response.data); // Check if response.data is null or not an array\n\n      if (!response.data || !Array.isArray(response.data)) {\n        console.error(\"Invalid response data:\", response.data);\n        setJobs([]);\n        return;\n      } // Sanitize data to ensure Job_Title exists and filter out null entries\n\n\n      const sanitizedJobs = response.data.filter(job => job !== null && typeof job === \"object\") // Remove null or invalid entries\n      .map(job => ({ ...job,\n        Job_Title: job.Job_Title || job.Department_Name || \"\",\n        // Fallback for either field\n        id: job.id || Date.now() + Math.random() // Fallback ID\n\n      }));\n      setJobs(sanitizedJobs);\n    } catch (error) {\n      console.error(\"Error fetching job titles:\", error);\n      setJobs([]); // Default to empty array on error\n    }\n  };\n\n  const startAdding = () => {\n    setIsAdding(true);\n    setNewJobTitle(\"\");\n  };\n\n  const cancelAdding = () => {\n    setIsAdding(false);\n    setNewJobTitle(\"\");\n  };\n\n  const saveNewJob = async () => {\n    if (!newJobTitle.trim()) {\n      alert(\"Job Title is required\");\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"http://localhost:5000/job\", {\n        Job_Title: newJobTitle\n      });\n      console.log(\"New job added:\", response.data); // Check if response.data is valid\n\n      if (!response.data || typeof response.data !== \"object\") {\n        console.error(\"Invalid POST response:\", response.data);\n        fetchJobs(); // Refresh anyway\n\n        return;\n      }\n\n      const newJob = {\n        id: response.data.id || Date.now(),\n        // Fallback ID\n        Job_Title: response.data.Job_Title || newJobTitle\n      };\n      setJobs([...jobs, newJob]);\n      setNewJobTitle(\"\");\n      setIsAdding(false);\n      fetchJobs(); // Refresh from server\n\n      alert(\"Job Title added successfully!\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      console.error(\"Error adding job title:\", error);\n      alert(\"Failed to add Job Title: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n      fetchJobs(); // Refresh even on error\n    }\n  };\n\n  const startEditing = job => {\n    setEditingJobId(job.id);\n    setEditedJobTitle(job.Job_Title || \"\");\n  };\n\n  const cancelEditing = () => {\n    setEditingJobId(null);\n    setEditedJobTitle(\"\");\n  };\n\n  const saveJobTitle = async id => {\n    try {\n      await axios.patch(`http://localhost:5000/job/${id}`, {\n        job_title: editedJobTitle\n      });\n      setJobs(jobs.map(job => job.id === id ? { ...job,\n        Job_Title: editedJobTitle\n      } : job));\n      setEditingJobId(null);\n      alert(\"Job title updated successfully!\");\n    } catch (error) {\n      console.error(\"Error updating job title:\", error);\n      alert(\"Failed to update job title\");\n    }\n  }; // Ensure filteredJobs handles null/undefined safely\n\n\n  const filteredJobs = jobs.filter(job => job && typeof job === \"object\") // Filter out null/undefined\n  .filter(job => (job.Job_Title || \"\").toLowerCase().includes(searchTerm.toLowerCase()));\n  const displayedJobs = filteredJobs.slice(0, entriesToShow);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        backgroundImage: \"url('/loginBanner.jpg')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundAttachment: \"fixed\",\n        zIndex: -2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"rgba(0, 0, 0, 0.5)\",\n        zIndex: -1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column container mt-5\",\n      style: {\n        position: \"relative\",\n        zIndex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"input\",\n          style: {\n            maxWidth: \"300px\"\n          },\n          placeholder: \"Search Job Title...\",\n          value: searchTerm,\n          onChange: e => setSearchTerm(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), !isMobile && !isAdding && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button is-success ml-3\",\n          onClick: startAdding,\n          children: \"Add Job Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), isMobile && /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/home/AddJob\",\n          className: \"button is-success ml-3\",\n          children: \"Add Job Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), !isMobile ? /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table is-striped is-fullwidth\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Job ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Job Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [isAdding && /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"New\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"input\",\n                value: newJobTitle,\n                onChange: e => setNewJobTitle(e.target.value),\n                placeholder: \"Enter new job title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button is-small is-success mr-2\",\n                onClick: saveNewJob,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button is-small is-danger\",\n                onClick: cancelAdding,\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, this), displayedJobs.map(job => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"td\", {\n              children: job.id || \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editingJobId === job.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"input\",\n                value: editedJobTitle,\n                onChange: e => setEditedJobTitle(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 23\n              }, this) : job.Job_Title || \"Untitled\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editingJobId === job.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"button is-small is-success mr-2\",\n                  onClick: () => saveJobTitle(job.id),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"button is-small is-danger\",\n                  onClick: cancelEditing,\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"button is-small is-info mr-2\",\n                onClick: () => startEditing(job),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 19\n            }, this)]\n          }, job.id || Math.random(), true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns is-multiline\",\n        children: displayedJobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column is-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"header\", {\n              className: \"card-header\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-header-title\",\n                children: job.Job_Title || \"Untitled\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"subtitle is-6\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Job ID:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 23\n                }, this), \" \", job.id || \"N/A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n              className: \"card-footer\",\n              children: /*#__PURE__*/_jsxDEV(Link, {\n                to: `/home/editJobTitle/${job.id}`,\n                className: \"card-footer-item button is-small is-info\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 17\n          }, this)\n        }, job.id || Math.random(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"mr-2\",\n            children: \"Show entries:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select\",\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              value: entriesToShow,\n              onChange: e => setEntriesToShow(Number(e.target.value)),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"5\",\n                children: \"5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"10\",\n                children: \"10\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 538,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"20\",\n                children: \"20\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: filteredJobs.length,\n                children: \"All\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Showing \", displayedJobs.length, \" of \", filteredJobs.length, \" entries\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 367,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DepartList, \"i/H8cVPfT+CReppA1rTVuAnQBwo=\");\n\n_c = DepartList;\nexport default DepartList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DepartList\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/JobTitle/JobList.js"],"names":["React","useState","useEffect","axios","Link","DepartList","jobs","setJobs","searchTerm","setSearchTerm","entriesToShow","setEntriesToShow","isMobile","setIsMobile","window","innerWidth","editingJobId","setEditingJobId","editedJobTitle","setEditedJobTitle","newJobTitle","setNewJobTitle","isAdding","setIsAdding","fetchJobs","handleResize","addEventListener","removeEventListener","response","get","console","log","data","Array","isArray","error","sanitizedJobs","filter","job","map","Job_Title","Department_Name","id","Date","now","Math","random","startAdding","cancelAdding","saveNewJob","trim","alert","post","newJob","message","startEditing","cancelEditing","saveJobTitle","patch","job_title","filteredJobs","toLowerCase","includes","displayedJobs","slice","position","top","left","width","height","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","zIndex","background","maxWidth","e","target","value","Number","length"],"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { Link } from \"react-router-dom\";\r\n// import AddDeptModal from \"../UI/Modal/AddDeptModal\";\r\n\r\n// function DepartList() {\r\n//   /*** State Hooks ***/\r\n//   const [jobs, setJobs] = useState([]);\r\n//   const [searchTerm, setSearchTerm] = useState(\"\");\r\n//   const [entriesToShow, setEntriesToShow] = useState(10);\r\n//   const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n//   const [editingJobId, setEditingJobId] = useState(null);\r\n//   const [editedJobTitle, setEditedJobTitle] = useState(\"\");\r\n//   const [isModalActive, setIsModalActive] = useState(false); // Modal state\r\n\r\n//   /*** Effect Hooks ***/\r\n//   useEffect(() => {\r\n//     fetchJobs();\r\n\r\n//     // Handle screen size changes\r\n//     const handleResize = () => setIsMobile(window.innerWidth < 768);\r\n//     window.addEventListener(\"resize\", handleResize);\r\n//     return () => window.removeEventListener(\"resize\", handleResize);\r\n//   }, []);\r\n\r\n//   /*** API Calls ***/\r\n//   const fetchJobs = async () => {\r\n//     try {\r\n//       const response = await axios.get(\"http://localhost:5000/job\");\r\n//       setJobs(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching job titles:\", error);\r\n//     }\r\n//   };\r\n\r\n//   /*** Filtering Logic ***/\r\n//   const filteredJobs = jobs.filter((job) =>\r\n//     job.Job_Title.toLowerCase().includes(searchTerm.toLowerCase())\r\n//   );\r\n//   const displayedJobs = filteredJobs.slice(0, entriesToShow);\r\n\r\n//   /*** Inline Editing Functions ***/\r\n//   const startEditing = (job) => {\r\n//     setEditingJobId(job.id);\r\n//     setEditedJobTitle(job.Job_Title);\r\n//   };\r\n\r\n//   const cancelEditing = () => {\r\n//     setEditingJobId(null);\r\n//     setEditedJobTitle(\"\");\r\n//   };\r\n\r\n//   const saveJobTitle = async (id) => {\r\n//     try {\r\n//       await axios.patch(`http://localhost:5000/job/${id}`, {\r\n//         job_title: editedJobTitle,\r\n//       });\r\n\r\n//       setJobs(\r\n//         jobs.map((job) =>\r\n//           job.id === id ? { ...job, Job_Title: editedJobTitle } : job\r\n//         )\r\n//       );\r\n//       setEditingJobId(null);\r\n//     } catch (error) {\r\n//       console.error(\"Error updating job title:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ position: \"relative\" }}>\r\n//       {/* Background and Overlay */}\r\n//       <div\r\n//         style={{\r\n//           position: \"fixed\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100vw\",\r\n//           height: \"100vh\",\r\n//           backgroundImage: \"url('/loginBanner.jpg')\",\r\n//           backgroundSize: \"cover\",\r\n//           backgroundPosition: \"center\",\r\n//           backgroundRepeat: \"no-repeat\",\r\n//           backgroundAttachment: \"fixed\",\r\n//           zIndex: -2,\r\n//         }}\r\n//       />\r\n//       <div\r\n//         style={{\r\n//           position: \"fixed\",\r\n//           top: 0,\r\n//           left: 0,\r\n//           width: \"100vw\",\r\n//           height: \"100vh\",\r\n//           background: \"rgba(0, 0, 0, 0.5)\",\r\n//           zIndex: -1,\r\n//         }}\r\n//       />\r\n\r\n//       {/* Main Content */}\r\n//       <div\r\n//         className=\"column container mt-5\"\r\n//         style={{ position: \"relative\", zIndex: 1 }}\r\n//       >\r\n//         {/* Search & Actions */}\r\n//         <div className=\"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\">\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"input\"\r\n//             style={{ maxWidth: \"300px\" }}\r\n//             placeholder=\"Search Job Title...\"\r\n//             value={searchTerm}\r\n//             onChange={(e) => setSearchTerm(e.target.value)}\r\n//           />\r\n//           {isMobile ? (\r\n//             <Link to=\"/home/AddJob\" className=\"button is-success ml-3\">\r\n//               Add Job Title\r\n//             </Link>\r\n//           ) : (\r\n//             <div>\r\n//               <button\r\n//                 className=\"button is-success ml-3\"\r\n//                 onClick={() => setIsModalActive(true)} // Open modal\r\n//               >\r\n//                 Add Job Title\r\n//               </button>{\" \"}\r\n//               <AddDeptModal\r\n//                 isActive={isModalActive}\r\n//                 onClose={() => setIsModalActive(false)}\r\n//               />\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Table View (Desktop) */}\r\n//         {!isMobile ? (\r\n//           <table className=\"table is-striped is-fullwidth\">\r\n//             <thead>\r\n//               <tr>\r\n//                 <th>Job ID</th>\r\n//                 <th>Job Title</th>\r\n//                 <th>Action</th>\r\n//               </tr>\r\n//             </thead>\r\n//             <tbody>\r\n//               {displayedJobs.map((job) => (\r\n//                 <tr key={job.id}>\r\n//                   <td>{job.id}</td>\r\n//                   <td>\r\n//                     {editingJobId === job.id ? (\r\n//                       <input\r\n//                         type=\"text\"\r\n//                         className=\"input\"\r\n//                         value={editedJobTitle}\r\n//                         onChange={(e) => setEditedJobTitle(e.target.value)}\r\n//                       />\r\n//                     ) : (\r\n//                       job.Job_Title\r\n//                     )}\r\n//                   </td>\r\n//                   <td>\r\n//                     {editingJobId === job.id ? (\r\n//                       <>\r\n//                         <button\r\n//                           className=\"button is-small is-success mr-2\"\r\n//                           onClick={() => saveJobTitle(job.id)}\r\n//                         >\r\n//                           Save\r\n//                         </button>\r\n//                         <button\r\n//                           className=\"button is-small is-danger\"\r\n//                           onClick={cancelEditing}\r\n//                         >\r\n//                           Cancel\r\n//                         </button>\r\n//                       </>\r\n//                     ) : (\r\n//                       <button\r\n//                         className=\"button is-small is-info mr-2\"\r\n//                         onClick={() => startEditing(job)}\r\n//                       >\r\n//                         Edit\r\n//                       </button>\r\n//                     )}\r\n//                   </td>\r\n//                 </tr>\r\n//               ))}\r\n//             </tbody>\r\n//           </table>\r\n//         ) : (\r\n//           <div className=\"columns is-multiline\">\r\n//             {displayedJobs.map((job) => (\r\n//               <div key={job.id} className=\"column is-12\">\r\n//                 <div className=\"card\">\r\n//                   <header className=\"card-header\">\r\n//                     <p className=\"card-header-title\">{job.Job_Title}</p>\r\n//                   </header>\r\n//                   <div className=\"card-content\">\r\n//                     <p className=\"subtitle is-6\">\r\n//                       <strong>Job ID:</strong> {job.id}\r\n//                     </p>\r\n//                   </div>\r\n//                   <footer className=\"card-footer\">\r\n//                     <Link\r\n//                       to={`/home/editJobTitle/${job.id}`}\r\n//                       className=\"card-footer-item button is-small is-info\"\r\n//                     >\r\n//                       Edit\r\n//                     </Link>\r\n//                   </footer>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Footer - Entry Controls */}\r\n//         <div className=\"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\">\r\n//           <div>\r\n//             <label className=\"mr-2\">Show entries:</label>\r\n//             <div className=\"select\">\r\n//               <select\r\n//                 value={entriesToShow}\r\n//                 onChange={(e) => setEntriesToShow(Number(e.target.value))}\r\n//               >\r\n//                 <option value=\"5\">5</option>\r\n//                 <option value=\"10\">10</option>\r\n//                 <option value=\"20\">20</option>\r\n//                 <option value={filteredJobs.length}>All</option>\r\n//               </select>\r\n//             </div>\r\n//           </div>\r\n//           <p>\r\n//             Showing {displayedJobs.length} of {filteredJobs.length} entries\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default DepartList;\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction DepartList() {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [entriesToShow, setEntriesToShow] = useState(10);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n  const [editingJobId, setEditingJobId] = useState(null);\r\n  const [editedJobTitle, setEditedJobTitle] = useState(\"\");\r\n  const [newJobTitle, setNewJobTitle] = useState(\"\");\r\n  const [isAdding, setIsAdding] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchJobs();\r\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const fetchJobs = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/job\");\r\n      console.log(\"Fetched jobs:\", response.data);\r\n      // Check if response.data is null or not an array\r\n      if (!response.data || !Array.isArray(response.data)) {\r\n        console.error(\"Invalid response data:\", response.data);\r\n        setJobs([]);\r\n        return;\r\n      }\r\n      // Sanitize data to ensure Job_Title exists and filter out null entries\r\n      const sanitizedJobs = response.data\r\n        .filter(job => job !== null && typeof job === \"object\") // Remove null or invalid entries\r\n        .map(job => ({\r\n          ...job,\r\n          Job_Title: job.Job_Title || job.Department_Name || \"\", // Fallback for either field\r\n          id: job.id || Date.now() + Math.random(), // Fallback ID\r\n        }));\r\n      setJobs(sanitizedJobs);\r\n    } catch (error) {\r\n      console.error(\"Error fetching job titles:\", error);\r\n      setJobs([]); // Default to empty array on error\r\n    }\r\n  };\r\n\r\n  const startAdding = () => {\r\n    setIsAdding(true);\r\n    setNewJobTitle(\"\");\r\n  };\r\n\r\n  const cancelAdding = () => {\r\n    setIsAdding(false);\r\n    setNewJobTitle(\"\");\r\n  };\r\n\r\n  const saveNewJob = async () => {\r\n    if (!newJobTitle.trim()) {\r\n      alert(\"Job Title is required\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/job\", {\r\n        Job_Title: newJobTitle,\r\n      });\r\n      console.log(\"New job added:\", response.data);\r\n      // Check if response.data is valid\r\n      if (!response.data || typeof response.data !== \"object\") {\r\n        console.error(\"Invalid POST response:\", response.data);\r\n        fetchJobs(); // Refresh anyway\r\n        return;\r\n      }\r\n      const newJob = {\r\n        id: response.data.id || Date.now(), // Fallback ID\r\n        Job_Title: response.data.Job_Title || newJobTitle,\r\n      };\r\n      setJobs([...jobs, newJob]);\r\n      setNewJobTitle(\"\");\r\n      setIsAdding(false);\r\n      fetchJobs(); // Refresh from server\r\n      alert(\"Job Title added successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error adding job title:\", error);\r\n      alert(\"Failed to add Job Title: \" + (error.response?.data?.message || error.message));\r\n      fetchJobs(); // Refresh even on error\r\n    }\r\n  };\r\n\r\n  const startEditing = (job) => {\r\n    setEditingJobId(job.id);\r\n    setEditedJobTitle(job.Job_Title || \"\");\r\n  };\r\n\r\n  const cancelEditing = () => {\r\n    setEditingJobId(null);\r\n    setEditedJobTitle(\"\");\r\n  };\r\n\r\n  const saveJobTitle = async (id) => {\r\n    try {\r\n      await axios.patch(`http://localhost:5000/job/${id}`, {\r\n        job_title: editedJobTitle,\r\n      });\r\n      setJobs(\r\n        jobs.map((job) =>\r\n          job.id === id ? { ...job, Job_Title: editedJobTitle } : job\r\n        )\r\n      );\r\n      setEditingJobId(null);\r\n      alert(\"Job title updated successfully!\");\r\n    } catch (error) {\r\n      console.error(\"Error updating job title:\", error);\r\n      alert(\"Failed to update job title\");\r\n    }\r\n  };\r\n\r\n  // Ensure filteredJobs handles null/undefined safely\r\n  const filteredJobs = jobs\r\n    .filter(job => job && typeof job === \"object\") // Filter out null/undefined\r\n    .filter(job => (job.Job_Title || \"\").toLowerCase().includes(searchTerm.toLowerCase()));\r\n  const displayedJobs = filteredJobs.slice(0, entriesToShow);\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n          backgroundImage: \"url('/loginBanner.jpg')\",\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundAttachment: \"fixed\",\r\n          zIndex: -2,\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          top: 0,\r\n          left: 0,\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n          background: \"rgba(0, 0, 0, 0.5)\",\r\n          zIndex: -1,\r\n        }}\r\n      />\r\n\r\n      <div\r\n        className=\"column container mt-5\"\r\n        style={{ position: \"relative\", zIndex: 1 }}\r\n      >\r\n        <div className=\"is-flex is-justify-content-space-between mb-3 is-flex-wrap-wrap\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"input\"\r\n            style={{ maxWidth: \"300px\" }}\r\n            placeholder=\"Search Job Title...\"\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n          />\r\n          {!isMobile && !isAdding && (\r\n            <button className=\"button is-success ml-3\" onClick={startAdding}>\r\n              Add Job Title\r\n            </button>\r\n          )}\r\n          {isMobile && (\r\n            <Link to=\"/home/AddJob\" className=\"button is-success ml-3\">\r\n              Add Job Title\r\n            </Link>\r\n          )}\r\n        </div>\r\n\r\n        {!isMobile ? (\r\n          <table className=\"table is-striped is-fullwidth\">\r\n            <thead>\r\n              <tr>\r\n                <th>Job ID</th>\r\n                <th>Job Title</th>\r\n                <th>Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {isAdding && (\r\n                <tr>\r\n                  <td>New</td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      className=\"input\"\r\n                      value={newJobTitle}\r\n                      onChange={(e) => setNewJobTitle(e.target.value)}\r\n                      placeholder=\"Enter new job title\"\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      className=\"button is-small is-success mr-2\"\r\n                      onClick={saveNewJob}\r\n                    >\r\n                      Save\r\n                    </button>\r\n                    <button\r\n                      className=\"button is-small is-danger\"\r\n                      onClick={cancelAdding}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              )}\r\n              {displayedJobs.map((job) => (\r\n                <tr key={job.id || Math.random()}> {/* Fallback key */}\r\n                  <td>{job.id || \"N/A\"}</td>\r\n                  <td>\r\n                    {editingJobId === job.id ? (\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"input\"\r\n                        value={editedJobTitle}\r\n                        onChange={(e) => setEditedJobTitle(e.target.value)}\r\n                      />\r\n                    ) : (\r\n                      job.Job_Title || \"Untitled\"\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    {editingJobId === job.id ? (\r\n                      <>\r\n                        <button\r\n                          className=\"button is-small is-success mr-2\"\r\n                          onClick={() => saveJobTitle(job.id)}\r\n                        >\r\n                          Save\r\n                        </button>\r\n                        <button\r\n                          className=\"button is-small is-danger\"\r\n                          onClick={cancelEditing}\r\n                        >\r\n                          Cancel\r\n                        </button>\r\n                      </>\r\n                    ) : (\r\n                      <button\r\n                        className=\"button is-small is-info mr-2\"\r\n                        onClick={() => startEditing(job)}\r\n                      >\r\n                        Edit\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        ) : (\r\n          <div className=\"columns is-multiline\">\r\n            {displayedJobs.map((job) => (\r\n              <div key={job.id || Math.random()} className=\"column is-12\">\r\n                <div className=\"card\">\r\n                  <header className=\"card-header\">\r\n                    <p className=\"card-header-title\">{job.Job_Title || \"Untitled\"}</p>\r\n                  </header>\r\n                  <div className=\"card-content\">\r\n                    <p className=\"subtitle is-6\">\r\n                      <strong>Job ID:</strong> {job.id || \"N/A\"}\r\n                    </p>\r\n                  </div>\r\n                  <footer className=\"card-footer\">\r\n                    <Link\r\n                      to={`/home/editJobTitle/${job.id}`}\r\n                      className=\"card-footer-item button is-small is-info\"\r\n                    >\r\n                      Edit\r\n                    </Link>\r\n                  </footer>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"is-flex is-align-items-center is-justify-content-space-between mt-3 is-flex-wrap-wrap has-text-white\">\r\n          <div>\r\n            <label className=\"mr-2\">Show entries:</label>\r\n            <div className=\"select\">\r\n              <select\r\n                value={entriesToShow}\r\n                onChange={(e) => setEntriesToShow(Number(e.target.value))}\r\n              >\r\n                <option value=\"5\">5</option>\r\n                <option value=\"10\">10</option>\r\n                <option value=\"20\">20</option>\r\n                <option value={filteredJobs.length}>All</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <p>\r\n            Showing {displayedJobs.length} of {filteredJobs.length} entries\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DepartList;"]},"metadata":{},"sourceType":"module"}