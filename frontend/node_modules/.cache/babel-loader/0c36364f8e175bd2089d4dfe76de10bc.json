{"ast":null,"code":"import { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender() {\n  let forwardMotionProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  const useRender = (Component, props, ref, _ref, isStatic) => {\n    let {\n      latestValues\n    } = _ref;\n    const useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = Component !== Fragment ? { ...filteredProps,\n      ...visualProps,\n      ref\n    } : {};\n    /**\r\n     * If component has been handed a motion value as its child,\r\n     * memoise its initial value and render that. Subsequent updates\r\n     * will be handled by the onChange handler\r\n     */\n\n    const {\n      children\n    } = props;\n    const renderedChildren = useMemo(() => isMotionValue(children) ? children.get() : children, [children]);\n    return createElement(Component, { ...elementProps,\n      children: renderedChildren\n    });\n  };\n\n  return useRender;\n}\n\nexport { createUseRender };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/dom/use-render.mjs"],"names":["Fragment","useMemo","createElement","useHTMLProps","filterProps","isSVGComponent","useSVGProps","isMotionValue","createUseRender","forwardMotionProps","useRender","Component","props","ref","isStatic","latestValues","useVisualProps","visualProps","filteredProps","elementProps","children","renderedChildren","get"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,aAA5B,QAAiD,OAAjD;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,uCAA9B;;AAEA,SAASC,eAAT,GAAqD;AAAA,MAA5BC,kBAA4B,uEAAP,KAAO;;AACjD,QAAMC,SAAS,GAAG,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,GAAnB,QAA0CC,QAA1C,KAAuD;AAAA,QAA/B;AAAEC,MAAAA;AAAF,KAA+B;AACrE,UAAMC,cAAc,GAAGX,cAAc,CAACM,SAAD,CAAd,GACjBL,WADiB,GAEjBH,YAFN;AAGA,UAAMc,WAAW,GAAGD,cAAc,CAACJ,KAAD,EAAQG,YAAR,EAAsBD,QAAtB,EAAgCH,SAAhC,CAAlC;AACA,UAAMO,aAAa,GAAGd,WAAW,CAACQ,KAAD,EAAQ,OAAOD,SAAP,KAAqB,QAA7B,EAAuCF,kBAAvC,CAAjC;AACA,UAAMU,YAAY,GAAGR,SAAS,KAAKX,QAAd,GACf,EAAE,GAAGkB,aAAL;AAAoB,SAAGD,WAAvB;AAAoCJ,MAAAA;AAApC,KADe,GAEf,EAFN;AAGA;AACR;AACA;AACA;AACA;;AACQ,UAAM;AAAEO,MAAAA;AAAF,QAAeR,KAArB;AACA,UAAMS,gBAAgB,GAAGpB,OAAO,CAAC,MAAOM,aAAa,CAACa,QAAD,CAAb,GAA0BA,QAAQ,CAACE,GAAT,EAA1B,GAA2CF,QAAnD,EAA8D,CAACA,QAAD,CAA9D,CAAhC;AACA,WAAOlB,aAAa,CAACS,SAAD,EAAY,EAC5B,GAAGQ,YADyB;AAE5BC,MAAAA,QAAQ,EAAEC;AAFkB,KAAZ,CAApB;AAIH,GApBD;;AAqBA,SAAOX,SAAP;AACH;;AAED,SAASF,eAAT","sourcesContent":["import { Fragment, useMemo, createElement } from 'react';\r\nimport { useHTMLProps } from '../html/use-props.mjs';\r\nimport { filterProps } from './utils/filter-props.mjs';\r\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\r\nimport { useSVGProps } from '../svg/use-props.mjs';\r\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\r\n\r\nfunction createUseRender(forwardMotionProps = false) {\r\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\r\n        const useVisualProps = isSVGComponent(Component)\r\n            ? useSVGProps\r\n            : useHTMLProps;\r\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\r\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\r\n        const elementProps = Component !== Fragment\r\n            ? { ...filteredProps, ...visualProps, ref }\r\n            : {};\r\n        /**\r\n         * If component has been handed a motion value as its child,\r\n         * memoise its initial value and render that. Subsequent updates\r\n         * will be handled by the onChange handler\r\n         */\r\n        const { children } = props;\r\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\r\n        return createElement(Component, {\r\n            ...elementProps,\r\n            children: renderedChildren,\r\n        });\r\n    };\r\n    return useRender;\r\n}\r\n\r\nexport { createUseRender };\r\n"]},"metadata":{},"sourceType":"module"}