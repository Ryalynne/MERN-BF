{"ast":null,"code":"// Node back-compat.\nconst ENCODING_MAPPING = {\n  utf16le: 'utf-16le',\n  ucs2: 'utf-16le',\n  utf16be: 'utf-16be'\n};\nexport class DecodeStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    this.pos = 0;\n    this.length = this.buffer.length;\n  }\n\n  readString(length) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascii';\n    encoding = ENCODING_MAPPING[encoding] || encoding;\n    let buf = this.readBuffer(length);\n\n    try {\n      let decoder = new TextDecoder(encoding);\n      return decoder.decode(buf);\n    } catch (err) {\n      return buf;\n    }\n  }\n\n  readBuffer(length) {\n    return this.buffer.slice(this.pos, this.pos += length);\n  }\n\n  readUInt24BE() {\n    return (this.readUInt16BE() << 8) + this.readUInt8();\n  }\n\n  readUInt24LE() {\n    return this.readUInt16LE() + (this.readUInt8() << 16);\n  }\n\n  readInt24BE() {\n    return (this.readInt16BE() << 8) + this.readUInt8();\n  }\n\n  readInt24LE() {\n    return this.readUInt16LE() + (this.readInt8() << 16);\n  }\n\n}\nDecodeStream.TYPES = {\n  UInt8: 1,\n  UInt16: 2,\n  UInt24: 3,\n  UInt32: 4,\n  Int8: 1,\n  Int16: 2,\n  Int24: 3,\n  Int32: 4,\n  Float: 4,\n  Double: 8\n};\n\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\n  if (key.slice(0, 3) === 'get') {\n    let type = key.slice(3).replace('Ui', 'UI');\n\n    if (type === 'Float32') {\n      type = 'Float';\n    } else if (type === 'Float64') {\n      type = 'Double';\n    }\n\n    let bytes = DecodeStream.TYPES[type];\n\n    DecodeStream.prototype['read' + type + (bytes === 1 ? '' : 'BE')] = function () {\n      const ret = this.view[key](this.pos, false);\n      this.pos += bytes;\n      return ret;\n    };\n\n    if (bytes !== 1) {\n      DecodeStream.prototype['read' + type + 'LE'] = function () {\n        const ret = this.view[key](this.pos, true);\n        this.pos += bytes;\n        return ret;\n      };\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/restructure/src/DecodeStream.js"],"names":["ENCODING_MAPPING","utf16le","ucs2","utf16be","DecodeStream","constructor","buffer","view","DataView","byteOffset","byteLength","pos","length","readString","encoding","buf","readBuffer","decoder","TextDecoder","decode","err","slice","readUInt24BE","readUInt16BE","readUInt8","readUInt24LE","readUInt16LE","readInt24BE","readInt16BE","readInt24LE","readInt8","TYPES","UInt8","UInt16","UInt24","UInt32","Int8","Int16","Int24","Int32","Float","Double","key","Object","getOwnPropertyNames","prototype","type","replace","bytes","ret"],"mappings":"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","sourcesContent":["// Node back-compat.\r\nconst ENCODING_MAPPING = {\r\n  utf16le: 'utf-16le',\r\n  ucs2: 'utf-16le',\r\n  utf16be: 'utf-16be'\r\n}\r\n\r\nexport class DecodeStream {\r\n  constructor(buffer) {\r\n    this.buffer = buffer;\r\n    this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\r\n    this.pos = 0;\r\n    this.length = this.buffer.length;\r\n  }\r\n\r\n  readString(length, encoding = 'ascii') {\r\n    encoding = ENCODING_MAPPING[encoding] || encoding;\r\n\r\n    let buf = this.readBuffer(length);\r\n    try {\r\n      let decoder = new TextDecoder(encoding);\r\n      return decoder.decode(buf);\r\n    } catch (err) {\r\n      return buf;\r\n    }\r\n  }\r\n\r\n  readBuffer(length) {\r\n    return this.buffer.slice(this.pos, (this.pos += length));\r\n  }\r\n\r\n  readUInt24BE() {\r\n    return (this.readUInt16BE() << 8) + this.readUInt8();\r\n  }\r\n\r\n  readUInt24LE() {\r\n    return this.readUInt16LE() + (this.readUInt8() << 16);\r\n  }\r\n\r\n  readInt24BE() {\r\n    return (this.readInt16BE() << 8) + this.readUInt8();\r\n  }\r\n\r\n  readInt24LE() {\r\n    return this.readUInt16LE() + (this.readInt8() << 16);\r\n  }\r\n}\r\n\r\nDecodeStream.TYPES = {\r\n  UInt8: 1,\r\n  UInt16: 2,\r\n  UInt24: 3,\r\n  UInt32: 4,\r\n  Int8: 1,\r\n  Int16: 2,\r\n  Int24: 3,\r\n  Int32: 4,\r\n  Float: 4,\r\n  Double: 8\r\n};\r\n\r\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\r\n  if (key.slice(0, 3) === 'get') {\r\n    let type = key.slice(3).replace('Ui', 'UI');\r\n    if (type === 'Float32') {\r\n      type = 'Float';\r\n    } else if (type === 'Float64') {\r\n      type = 'Double';\r\n    }\r\n    let bytes = DecodeStream.TYPES[type];\r\n    DecodeStream.prototype['read' + type + (bytes === 1 ? '' : 'BE')] = function () {\r\n      const ret = this.view[key](this.pos, false);\r\n      this.pos += bytes;\r\n      return ret;\r\n    };\r\n\r\n    if (bytes !== 1) {\r\n      DecodeStream.prototype['read' + type + 'LE'] = function () {\r\n        const ret = this.view[key](this.pos, true);\r\n        this.pos += bytes;\r\n        return ret;\r\n      };\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}