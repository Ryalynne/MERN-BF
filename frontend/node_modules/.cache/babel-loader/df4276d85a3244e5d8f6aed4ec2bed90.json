{"ast":null,"code":"import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState(_ref, props, context, presenceContext) {\n  let {\n    scrapeMotionValuesFromProps,\n    createRenderState,\n    onUpdate\n  } = _ref;\n  const state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n\n  if (onUpdate) {\n    /**\r\n     * onMount works without the VisualElement because it could be\r\n     * called before the VisualElement payload has been hydrated.\r\n     * (e.g. if someone is using m components <m.circle />)\r\n     */\n    state.onMount = instance => onUpdate({\n      props,\n      current: instance,\n      ...state\n    });\n\n    state.onUpdate = visualElement => onUpdate(visualElement);\n  }\n\n  return state;\n}\n\nconst makeUseVisualState = config => (props, isStatic) => {\n  const context = useContext(MotionContext);\n  const presenceContext = useContext(PresenceContext);\n\n  const make = () => makeState(config, props, context, presenceContext);\n\n  return isStatic ? make() : useConstant(make);\n};\n\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  const values = {};\n  const motionValues = scrapeMotionValues(props, {});\n\n  for (const key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n\n  let {\n    initial,\n    animate\n  } = props;\n  const isControllingVariants$1 = isControllingVariants(props);\n  const isVariantNode$1 = isVariantNode(props);\n\n  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n\n  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  const variantToSet = isInitialAnimationBlocked ? animate : initial;\n\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n    const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n\n    for (let i = 0; i < list.length; i++) {\n      const resolved = resolveVariantFromProps(props, list[i]);\n\n      if (resolved) {\n        const {\n          transitionEnd,\n          transition,\n          ...target\n        } = resolved;\n\n        for (const key in target) {\n          let valueTarget = target[key];\n\n          if (Array.isArray(valueTarget)) {\n            /**\r\n             * Take final keyframe if the initial animation is blocked because\r\n             * we want to initialise at the end of that blocked animation.\r\n             */\n            const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n            valueTarget = valueTarget[index];\n          }\n\n          if (valueTarget !== null) {\n            values[key] = valueTarget;\n          }\n        }\n\n        for (const key in transitionEnd) {\n          values[key] = transitionEnd[key];\n        }\n      }\n    }\n  }\n\n  return values;\n}\n\nexport { makeUseVisualState };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"names":["useContext","isAnimationControls","MotionContext","PresenceContext","isControllingVariants","isVariantNode","resolveVariantFromProps","useConstant","resolveMotionValue","makeState","props","context","presenceContext","scrapeMotionValuesFromProps","createRenderState","onUpdate","state","latestValues","makeLatestValues","renderState","onMount","instance","current","visualElement","makeUseVisualState","config","isStatic","make","scrapeMotionValues","values","motionValues","key","initial","animate","isControllingVariants$1","isVariantNode$1","inherit","undefined","isInitialAnimationBlocked","variantToSet","list","Array","isArray","i","length","resolved","transitionEnd","transition","target","valueTarget","index"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\r\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\r\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\r\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\r\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\r\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\r\nimport { useConstant } from '../../utils/use-constant.mjs';\r\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\r\n\r\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onUpdate, }, props, context, presenceContext) {\r\n    const state = {\r\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\r\n        renderState: createRenderState(),\r\n    };\r\n    if (onUpdate) {\r\n        /**\r\n         * onMount works without the VisualElement because it could be\r\n         * called before the VisualElement payload has been hydrated.\r\n         * (e.g. if someone is using m components <m.circle />)\r\n         */\r\n        state.onMount = (instance) => onUpdate({ props, current: instance, ...state });\r\n        state.onUpdate = (visualElement) => onUpdate(visualElement);\r\n    }\r\n    return state;\r\n}\r\nconst makeUseVisualState = (config) => (props, isStatic) => {\r\n    const context = useContext(MotionContext);\r\n    const presenceContext = useContext(PresenceContext);\r\n    const make = () => makeState(config, props, context, presenceContext);\r\n    return isStatic ? make() : useConstant(make);\r\n};\r\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\r\n    const values = {};\r\n    const motionValues = scrapeMotionValues(props, {});\r\n    for (const key in motionValues) {\r\n        values[key] = resolveMotionValue(motionValues[key]);\r\n    }\r\n    let { initial, animate } = props;\r\n    const isControllingVariants$1 = isControllingVariants(props);\r\n    const isVariantNode$1 = isVariantNode(props);\r\n    if (context &&\r\n        isVariantNode$1 &&\r\n        !isControllingVariants$1 &&\r\n        props.inherit !== false) {\r\n        if (initial === undefined)\r\n            initial = context.initial;\r\n        if (animate === undefined)\r\n            animate = context.animate;\r\n    }\r\n    let isInitialAnimationBlocked = presenceContext\r\n        ? presenceContext.initial === false\r\n        : false;\r\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\r\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\r\n    if (variantToSet &&\r\n        typeof variantToSet !== \"boolean\" &&\r\n        !isAnimationControls(variantToSet)) {\r\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\r\n        for (let i = 0; i < list.length; i++) {\r\n            const resolved = resolveVariantFromProps(props, list[i]);\r\n            if (resolved) {\r\n                const { transitionEnd, transition, ...target } = resolved;\r\n                for (const key in target) {\r\n                    let valueTarget = target[key];\r\n                    if (Array.isArray(valueTarget)) {\r\n                        /**\r\n                         * Take final keyframe if the initial animation is blocked because\r\n                         * we want to initialise at the end of that blocked animation.\r\n                         */\r\n                        const index = isInitialAnimationBlocked\r\n                            ? valueTarget.length - 1\r\n                            : 0;\r\n                        valueTarget = valueTarget[index];\r\n                    }\r\n                    if (valueTarget !== null) {\r\n                        values[key] = valueTarget;\r\n                    }\r\n                }\r\n                for (const key in transitionEnd) {\r\n                    values[key] = transitionEnd[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return values;\r\n}\r\n\r\nexport { makeUseVisualState };\r\n"]},"metadata":{},"sourceType":"module"}