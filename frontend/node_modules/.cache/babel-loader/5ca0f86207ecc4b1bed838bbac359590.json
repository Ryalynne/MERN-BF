{"ast":null,"code":"import { time, frame, cancelFrame, motionValue } from 'motion-dom';\nimport { warnOnce, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { transformProps } from './html/utils/keys-transform.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nconst propEventHandlers = [\"AnimationStart\", \"AnimationComplete\", \"Update\", \"BeforeLayoutMeasure\", \"LayoutMeasure\", \"LayoutAnimationStart\", \"LayoutAnimationComplete\"];\n/**\r\n * A VisualElement is an imperative abstraction around UI elements such as\r\n * HTMLElement, SVGElement, Three.Object3D etc.\r\n */\n\nclass VisualElement {\n  /**\r\n   * This method takes React props and returns found MotionValues. For example, HTML\r\n   * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\r\n   *\r\n   * This isn't an abstract method as it needs calling in the constructor, but it is\r\n   * intended to be one.\r\n   */\n  scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n    return {};\n  }\n\n  constructor(_ref) {\n    let {\n      parent,\n      props,\n      presenceContext,\n      reducedMotionConfig,\n      blockInitialAnimation,\n      visualState\n    } = _ref;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\r\n     * A reference to the current underlying Instance, e.g. a HTMLElement\r\n     * or Three.Mesh etc.\r\n     */\n    this.current = null;\n    /**\r\n     * A set containing references to this VisualElement's children.\r\n     */\n\n    this.children = new Set();\n    /**\r\n     * Determine what role this visual element should take in the variant tree.\r\n     */\n\n    this.isVariantNode = false;\n    this.isControllingVariants = false;\n    /**\r\n     * Decides whether this VisualElement should animate in reduced motion\r\n     * mode.\r\n     *\r\n     * TODO: This is currently set on every individual VisualElement but feels\r\n     * like it could be set globally.\r\n     */\n\n    this.shouldReduceMotion = null;\n    /**\r\n     * A map of all motion values attached to this visual element. Motion\r\n     * values are source of truth for any given animated value. A motion\r\n     * value might be provided externally by the component via props.\r\n     */\n\n    this.values = new Map();\n    this.KeyframeResolver = KeyframeResolver;\n    /**\r\n     * Cleanup functions for active features (hover/tap/exit etc)\r\n     */\n\n    this.features = {};\n    /**\r\n     * A map of every subscription that binds the provided or generated\r\n     * motion values onChange listeners to this visual element.\r\n     */\n\n    this.valueSubscriptions = new Map();\n    /**\r\n     * A reference to the previously-provided motion values as returned\r\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n     * if any motion values need to be removed after props are updated.\r\n     */\n\n    this.prevMotionValues = {};\n    /**\r\n     * An object containing a SubscriptionManager for each active event.\r\n     */\n\n    this.events = {};\n    /**\r\n     * An object containing an unsubscribe function for each prop event subscription.\r\n     * For example, every \"Update\" event can have multiple subscribers via\r\n     * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\r\n     */\n\n    this.propEventSubscriptions = {};\n\n    this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n\n    this.render = () => {\n      if (!this.current) return;\n      this.triggerBuild();\n      this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n    };\n\n    this.renderScheduledAt = 0.0;\n\n    this.scheduleRender = () => {\n      const now = time.now();\n\n      if (this.renderScheduledAt < now) {\n        this.renderScheduledAt = now;\n        frame.render(this.render, false, true);\n      }\n    };\n\n    const {\n      latestValues,\n      renderState,\n      onUpdate\n    } = visualState;\n    this.onUpdate = onUpdate;\n    this.latestValues = latestValues;\n    this.baseTarget = { ...latestValues\n    };\n    this.initialValues = props.initial ? { ...latestValues\n    } : {};\n    this.renderState = renderState;\n    this.parent = parent;\n    this.props = props;\n    this.presenceContext = presenceContext;\n    this.depth = parent ? parent.depth + 1 : 0;\n    this.reducedMotionConfig = reducedMotionConfig;\n    this.options = options;\n    this.blockInitialAnimation = Boolean(blockInitialAnimation);\n    this.isControllingVariants = isControllingVariants(props);\n    this.isVariantNode = isVariantNode(props);\n\n    if (this.isVariantNode) {\n      this.variantChildren = new Set();\n    }\n\n    this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n    /**\r\n     * Any motion values that are provided to the element when created\r\n     * aren't yet bound to the element, as this would technically be impure.\r\n     * However, we iterate through the motion values and set them to the\r\n     * initial values for this component.\r\n     *\r\n     * TODO: This is impure and we should look at changing this to run on mount.\r\n     * Doing so will break some tests but this isn't necessarily a breaking change,\r\n     * more a reflection of the test.\r\n     */\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = this.scrapeMotionValuesFromProps(props, {}, this);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n  }\n\n  mount(instance) {\n    this.current = instance;\n    visualElementStore.set(instance, this);\n\n    if (this.projection && !this.projection.instance) {\n      this.projection.mount(instance);\n    }\n\n    if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n      this.removeFromVariantTree = this.parent.addVariantChild(this);\n    }\n\n    this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n\n    if (!hasReducedMotionListener.current) {\n      initPrefersReducedMotion();\n    }\n\n    this.shouldReduceMotion = this.reducedMotionConfig === \"never\" ? false : this.reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n    }\n\n    if (this.parent) this.parent.children.add(this);\n    this.update(this.props, this.presenceContext);\n  }\n\n  unmount() {\n    this.projection && this.projection.unmount();\n    cancelFrame(this.notifyUpdate);\n    cancelFrame(this.render);\n    this.valueSubscriptions.forEach(remove => remove());\n    this.valueSubscriptions.clear();\n    this.removeFromVariantTree && this.removeFromVariantTree();\n    this.parent && this.parent.children.delete(this);\n\n    for (const key in this.events) {\n      this.events[key].clear();\n    }\n\n    for (const key in this.features) {\n      const feature = this.features[key];\n\n      if (feature) {\n        feature.unmount();\n        feature.isMounted = false;\n      }\n    }\n\n    this.current = null;\n  }\n\n  bindToMotionValue(key, value) {\n    if (this.valueSubscriptions.has(key)) {\n      this.valueSubscriptions.get(key)();\n    }\n\n    const valueIsTransform = transformProps.has(key);\n\n    if (valueIsTransform && this.onBindTransform) {\n      this.onBindTransform();\n    }\n\n    const removeOnChange = value.on(\"change\", latestValue => {\n      this.latestValues[key] = latestValue;\n      this.props.onUpdate && frame.preRender(this.notifyUpdate);\n\n      if (valueIsTransform && this.projection) {\n        this.projection.isTransformDirty = true;\n      }\n    });\n    const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n    let removeSyncCheck;\n\n    if (window.MotionCheckAppearSync) {\n      removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n    }\n\n    this.valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n      if (removeSyncCheck) removeSyncCheck();\n      if (value.owner) value.stop();\n    });\n  }\n\n  sortNodePosition(other) {\n    /**\r\n     * If these nodes aren't even of the same type we can't compare their depth.\r\n     */\n    if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {\n      return 0;\n    }\n\n    return this.sortInstanceNodePosition(this.current, other.current);\n  }\n\n  updateFeatures() {\n    let key = \"animation\";\n\n    for (key in featureDefinitions) {\n      const featureDefinition = featureDefinitions[key];\n      if (!featureDefinition) continue;\n      const {\n        isEnabled,\n        Feature: FeatureConstructor\n      } = featureDefinition;\n      /**\r\n       * If this feature is enabled but not active, make a new instance.\r\n       */\n\n      if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {\n        this.features[key] = new FeatureConstructor(this);\n      }\n      /**\r\n       * If we have a feature, mount or update it.\r\n       */\n\n\n      if (this.features[key]) {\n        const feature = this.features[key];\n\n        if (feature.isMounted) {\n          feature.update();\n        } else {\n          feature.mount();\n          feature.isMounted = true;\n        }\n      }\n    }\n  }\n\n  triggerBuild() {\n    this.build(this.renderState, this.latestValues, this.props);\n  }\n  /**\r\n   * Measure the current viewport box with or without transforms.\r\n   * Only measures axis-aligned boxes, rotate and skew must be manually\r\n   * removed with a re-render to work.\r\n   */\n\n\n  measureViewportBox() {\n    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();\n  }\n\n  getStaticValue(key) {\n    return this.latestValues[key];\n  }\n\n  setStaticValue(key, value) {\n    this.latestValues[key] = value;\n  }\n  /**\r\n   * Update the provided props. Ensure any newly-added motion values are\r\n   * added to our map, old ones removed, and listeners updated.\r\n   */\n\n\n  update(props, presenceContext) {\n    if (props.transformTemplate || this.props.transformTemplate) {\n      this.scheduleRender();\n    }\n\n    this.prevProps = this.props;\n    this.props = props;\n    this.prevPresenceContext = this.presenceContext;\n    this.presenceContext = presenceContext;\n    /**\r\n     * Update prop event handlers ie onAnimationStart, onAnimationComplete\r\n     */\n\n    for (let i = 0; i < propEventHandlers.length; i++) {\n      const key = propEventHandlers[i];\n\n      if (this.propEventSubscriptions[key]) {\n        this.propEventSubscriptions[key]();\n        delete this.propEventSubscriptions[key];\n      }\n\n      const listenerName = \"on\" + key;\n      const listener = props[listenerName];\n\n      if (listener) {\n        this.propEventSubscriptions[key] = this.on(key, listener);\n      }\n    }\n\n    this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n\n    if (this.handleChildMotionValue) {\n      this.handleChildMotionValue();\n    }\n\n    this.onUpdate && this.onUpdate(this);\n  }\n\n  getProps() {\n    return this.props;\n  }\n  /**\r\n   * Returns the variant definition with a given name.\r\n   */\n\n\n  getVariant(name) {\n    return this.props.variants ? this.props.variants[name] : undefined;\n  }\n  /**\r\n   * Returns the defined default transition on this component.\r\n   */\n\n\n  getDefaultTransition() {\n    return this.props.transition;\n  }\n\n  getTransformPagePoint() {\n    return this.props.transformPagePoint;\n  }\n\n  getClosestVariantNode() {\n    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : undefined;\n  }\n  /**\r\n   * Add a child visual element to our set of children.\r\n   */\n\n\n  addVariantChild(child) {\n    const closestVariantNode = this.getClosestVariantNode();\n\n    if (closestVariantNode) {\n      closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);\n      return () => closestVariantNode.variantChildren.delete(child);\n    }\n  }\n  /**\r\n   * Add a motion value and bind it to this visual element.\r\n   */\n\n\n  addValue(key, value) {\n    // Remove existing value if it exists\n    const existingValue = this.values.get(key);\n\n    if (value !== existingValue) {\n      if (existingValue) this.removeValue(key);\n      this.bindToMotionValue(key, value);\n      this.values.set(key, value);\n      this.latestValues[key] = value.get();\n    }\n  }\n  /**\r\n   * Remove a motion value and unbind any active subscriptions.\r\n   */\n\n\n  removeValue(key) {\n    this.values.delete(key);\n    const unsubscribe = this.valueSubscriptions.get(key);\n\n    if (unsubscribe) {\n      unsubscribe();\n      this.valueSubscriptions.delete(key);\n    }\n\n    delete this.latestValues[key];\n    this.removeValueFromRenderState(key, this.renderState);\n  }\n  /**\r\n   * Check whether we have a motion value for this key\r\n   */\n\n\n  hasValue(key) {\n    return this.values.has(key);\n  }\n\n  getValue(key, defaultValue) {\n    if (this.props.values && this.props.values[key]) {\n      return this.props.values[key];\n    }\n\n    let value = this.values.get(key);\n\n    if (value === undefined && defaultValue !== undefined) {\n      value = motionValue(defaultValue === null ? undefined : defaultValue, {\n        owner: this\n      });\n      this.addValue(key, value);\n    }\n\n    return value;\n  }\n  /**\r\n   * If we're trying to animate to a previously unencountered value,\r\n   * we need to check for it in our state and as a last resort read it\r\n   * directly from the instance (which might have performance implications).\r\n   */\n\n\n  readValue(key, target) {\n    var _a;\n\n    let value = this.latestValues[key] !== undefined || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n\n    if (value !== undefined && value !== null) {\n      if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n        // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n        value = parseFloat(value);\n      } else if (!findValueType(value) && complex.test(target)) {\n        value = getAnimatableNone(key, target);\n      }\n\n      this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n    }\n\n    return isMotionValue(value) ? value.get() : value;\n  }\n  /**\r\n   * Set the base target to later animate back to. This is currently\r\n   * only hydrated on creation and when we first read a value.\r\n   */\n\n\n  setBaseTarget(key, value) {\n    this.baseTarget[key] = value;\n  }\n  /**\r\n   * Find the base target for a value thats been removed from all animation\r\n   * props.\r\n   */\n\n\n  getBaseTarget(key) {\n    var _a;\n\n    const {\n      initial\n    } = this.props;\n    let valueFromInitial;\n\n    if (typeof initial === \"string\" || typeof initial === \"object\") {\n      const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n\n      if (variant) {\n        valueFromInitial = variant[key];\n      }\n    }\n    /**\r\n     * If this value still exists in the current initial variant, read that.\r\n     */\n\n\n    if (initial && valueFromInitial !== undefined) {\n      return valueFromInitial;\n    }\n    /**\r\n     * Alternatively, if this VisualElement config has defined a getBaseTarget\r\n     * so we can read the value from an alternative source, try that.\r\n     */\n\n\n    const target = this.getBaseTargetFromProps(this.props, key);\n    if (target !== undefined && !isMotionValue(target)) return target;\n    /**\r\n     * If the value was initially defined on initial, but it doesn't any more,\r\n     * return undefined. Otherwise return the value as initially read from the DOM.\r\n     */\n\n    return this.initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : this.baseTarget[key];\n  }\n\n  on(eventName, callback) {\n    if (!this.events[eventName]) {\n      this.events[eventName] = new SubscriptionManager();\n    }\n\n    return this.events[eventName].add(callback);\n  }\n\n  notify(eventName) {\n    if (this.events[eventName]) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this.events[eventName].notify(...args);\n    }\n  }\n\n}\n\nexport { VisualElement };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/VisualElement.mjs"],"names":["time","frame","cancelFrame","motionValue","warnOnce","SubscriptionManager","featureDefinitions","createBox","isNumericalString","isZeroValueString","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","complex","isMotionValue","getAnimatableNone","findValueType","transformProps","visualElementStore","isControllingVariants","isVariantNode","KeyframeResolver","updateMotionValuesFromProps","resolveVariantFromProps","propEventHandlers","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","constructor","parent","props","presenceContext","reducedMotionConfig","blockInitialAnimation","visualState","options","current","children","Set","shouldReduceMotion","values","Map","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","latestValues","render","triggerBuild","renderInstance","renderState","style","projection","renderScheduledAt","scheduleRender","now","onUpdate","baseTarget","initialValues","initial","depth","Boolean","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","key","value","undefined","set","mount","instance","removeFromVariantTree","addVariantChild","forEach","bindToMotionValue","process","env","NODE_ENV","add","update","unmount","remove","clear","delete","feature","isMounted","has","get","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","preRender","isTransformDirty","removeOnRenderRequest","removeSyncCheck","window","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","type","updateFeatures","featureDefinition","isEnabled","Feature","FeatureConstructor","build","measureViewportBox","measureInstanceViewportBox","getStaticValue","setStaticValue","transformTemplate","prevProps","prevPresenceContext","i","length","listenerName","listener","handleChildMotionValue","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getClosestVariantNode","child","closestVariantNode","addValue","existingValue","removeValue","unsubscribe","removeValueFromRenderState","hasValue","getValue","defaultValue","readValue","target","_a","getBaseTargetFromProps","readValueFromInstance","parseFloat","test","setBaseTarget","getBaseTarget","valueFromInitial","variant","custom","eventName","callback","args"],"mappings":"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","sourcesContent":["import { time, frame, cancelFrame, motionValue } from 'motion-dom';\r\nimport { warnOnce, SubscriptionManager } from 'motion-utils';\r\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\r\nimport { createBox } from '../projection/geometry/models.mjs';\r\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\r\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\r\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\r\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\r\nimport { complex } from '../value/types/complex/index.mjs';\r\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\r\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\r\nimport { findValueType } from './dom/value-types/find.mjs';\r\nimport { transformProps } from './html/utils/keys-transform.mjs';\r\nimport { visualElementStore } from './store.mjs';\r\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\r\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\r\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\r\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\r\n\r\nconst propEventHandlers = [\r\n    \"AnimationStart\",\r\n    \"AnimationComplete\",\r\n    \"Update\",\r\n    \"BeforeLayoutMeasure\",\r\n    \"LayoutMeasure\",\r\n    \"LayoutAnimationStart\",\r\n    \"LayoutAnimationComplete\",\r\n];\r\n/**\r\n * A VisualElement is an imperative abstraction around UI elements such as\r\n * HTMLElement, SVGElement, Three.Object3D etc.\r\n */\r\nclass VisualElement {\r\n    /**\r\n     * This method takes React props and returns found MotionValues. For example, HTML\r\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\r\n     *\r\n     * This isn't an abstract method as it needs calling in the constructor, but it is\r\n     * intended to be one.\r\n     */\r\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\r\n        return {};\r\n    }\r\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\r\n        /**\r\n         * A reference to the current underlying Instance, e.g. a HTMLElement\r\n         * or Three.Mesh etc.\r\n         */\r\n        this.current = null;\r\n        /**\r\n         * A set containing references to this VisualElement's children.\r\n         */\r\n        this.children = new Set();\r\n        /**\r\n         * Determine what role this visual element should take in the variant tree.\r\n         */\r\n        this.isVariantNode = false;\r\n        this.isControllingVariants = false;\r\n        /**\r\n         * Decides whether this VisualElement should animate in reduced motion\r\n         * mode.\r\n         *\r\n         * TODO: This is currently set on every individual VisualElement but feels\r\n         * like it could be set globally.\r\n         */\r\n        this.shouldReduceMotion = null;\r\n        /**\r\n         * A map of all motion values attached to this visual element. Motion\r\n         * values are source of truth for any given animated value. A motion\r\n         * value might be provided externally by the component via props.\r\n         */\r\n        this.values = new Map();\r\n        this.KeyframeResolver = KeyframeResolver;\r\n        /**\r\n         * Cleanup functions for active features (hover/tap/exit etc)\r\n         */\r\n        this.features = {};\r\n        /**\r\n         * A map of every subscription that binds the provided or generated\r\n         * motion values onChange listeners to this visual element.\r\n         */\r\n        this.valueSubscriptions = new Map();\r\n        /**\r\n         * A reference to the previously-provided motion values as returned\r\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n         * if any motion values need to be removed after props are updated.\r\n         */\r\n        this.prevMotionValues = {};\r\n        /**\r\n         * An object containing a SubscriptionManager for each active event.\r\n         */\r\n        this.events = {};\r\n        /**\r\n         * An object containing an unsubscribe function for each prop event subscription.\r\n         * For example, every \"Update\" event can have multiple subscribers via\r\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\r\n         */\r\n        this.propEventSubscriptions = {};\r\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\r\n        this.render = () => {\r\n            if (!this.current)\r\n                return;\r\n            this.triggerBuild();\r\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\r\n        };\r\n        this.renderScheduledAt = 0.0;\r\n        this.scheduleRender = () => {\r\n            const now = time.now();\r\n            if (this.renderScheduledAt < now) {\r\n                this.renderScheduledAt = now;\r\n                frame.render(this.render, false, true);\r\n            }\r\n        };\r\n        const { latestValues, renderState, onUpdate } = visualState;\r\n        this.onUpdate = onUpdate;\r\n        this.latestValues = latestValues;\r\n        this.baseTarget = { ...latestValues };\r\n        this.initialValues = props.initial ? { ...latestValues } : {};\r\n        this.renderState = renderState;\r\n        this.parent = parent;\r\n        this.props = props;\r\n        this.presenceContext = presenceContext;\r\n        this.depth = parent ? parent.depth + 1 : 0;\r\n        this.reducedMotionConfig = reducedMotionConfig;\r\n        this.options = options;\r\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\r\n        this.isControllingVariants = isControllingVariants(props);\r\n        this.isVariantNode = isVariantNode(props);\r\n        if (this.isVariantNode) {\r\n            this.variantChildren = new Set();\r\n        }\r\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\r\n        /**\r\n         * Any motion values that are provided to the element when created\r\n         * aren't yet bound to the element, as this would technically be impure.\r\n         * However, we iterate through the motion values and set them to the\r\n         * initial values for this component.\r\n         *\r\n         * TODO: This is impure and we should look at changing this to run on mount.\r\n         * Doing so will break some tests but this isn't necessarily a breaking change,\r\n         * more a reflection of the test.\r\n         */\r\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\r\n        for (const key in initialMotionValues) {\r\n            const value = initialMotionValues[key];\r\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\r\n                value.set(latestValues[key], false);\r\n            }\r\n        }\r\n    }\r\n    mount(instance) {\r\n        this.current = instance;\r\n        visualElementStore.set(instance, this);\r\n        if (this.projection && !this.projection.instance) {\r\n            this.projection.mount(instance);\r\n        }\r\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\r\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\r\n        }\r\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\r\n        if (!hasReducedMotionListener.current) {\r\n            initPrefersReducedMotion();\r\n        }\r\n        this.shouldReduceMotion =\r\n            this.reducedMotionConfig === \"never\"\r\n                ? false\r\n                : this.reducedMotionConfig === \"always\"\r\n                    ? true\r\n                    : prefersReducedMotion.current;\r\n        if (process.env.NODE_ENV !== \"production\") {\r\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\r\n        }\r\n        if (this.parent)\r\n            this.parent.children.add(this);\r\n        this.update(this.props, this.presenceContext);\r\n    }\r\n    unmount() {\r\n        this.projection && this.projection.unmount();\r\n        cancelFrame(this.notifyUpdate);\r\n        cancelFrame(this.render);\r\n        this.valueSubscriptions.forEach((remove) => remove());\r\n        this.valueSubscriptions.clear();\r\n        this.removeFromVariantTree && this.removeFromVariantTree();\r\n        this.parent && this.parent.children.delete(this);\r\n        for (const key in this.events) {\r\n            this.events[key].clear();\r\n        }\r\n        for (const key in this.features) {\r\n            const feature = this.features[key];\r\n            if (feature) {\r\n                feature.unmount();\r\n                feature.isMounted = false;\r\n            }\r\n        }\r\n        this.current = null;\r\n    }\r\n    bindToMotionValue(key, value) {\r\n        if (this.valueSubscriptions.has(key)) {\r\n            this.valueSubscriptions.get(key)();\r\n        }\r\n        const valueIsTransform = transformProps.has(key);\r\n        if (valueIsTransform && this.onBindTransform) {\r\n            this.onBindTransform();\r\n        }\r\n        const removeOnChange = value.on(\"change\", (latestValue) => {\r\n            this.latestValues[key] = latestValue;\r\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\r\n            if (valueIsTransform && this.projection) {\r\n                this.projection.isTransformDirty = true;\r\n            }\r\n        });\r\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\r\n        let removeSyncCheck;\r\n        if (window.MotionCheckAppearSync) {\r\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\r\n        }\r\n        this.valueSubscriptions.set(key, () => {\r\n            removeOnChange();\r\n            removeOnRenderRequest();\r\n            if (removeSyncCheck)\r\n                removeSyncCheck();\r\n            if (value.owner)\r\n                value.stop();\r\n        });\r\n    }\r\n    sortNodePosition(other) {\r\n        /**\r\n         * If these nodes aren't even of the same type we can't compare their depth.\r\n         */\r\n        if (!this.current ||\r\n            !this.sortInstanceNodePosition ||\r\n            this.type !== other.type) {\r\n            return 0;\r\n        }\r\n        return this.sortInstanceNodePosition(this.current, other.current);\r\n    }\r\n    updateFeatures() {\r\n        let key = \"animation\";\r\n        for (key in featureDefinitions) {\r\n            const featureDefinition = featureDefinitions[key];\r\n            if (!featureDefinition)\r\n                continue;\r\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\r\n            /**\r\n             * If this feature is enabled but not active, make a new instance.\r\n             */\r\n            if (!this.features[key] &&\r\n                FeatureConstructor &&\r\n                isEnabled(this.props)) {\r\n                this.features[key] = new FeatureConstructor(this);\r\n            }\r\n            /**\r\n             * If we have a feature, mount or update it.\r\n             */\r\n            if (this.features[key]) {\r\n                const feature = this.features[key];\r\n                if (feature.isMounted) {\r\n                    feature.update();\r\n                }\r\n                else {\r\n                    feature.mount();\r\n                    feature.isMounted = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    triggerBuild() {\r\n        this.build(this.renderState, this.latestValues, this.props);\r\n    }\r\n    /**\r\n     * Measure the current viewport box with or without transforms.\r\n     * Only measures axis-aligned boxes, rotate and skew must be manually\r\n     * removed with a re-render to work.\r\n     */\r\n    measureViewportBox() {\r\n        return this.current\r\n            ? this.measureInstanceViewportBox(this.current, this.props)\r\n            : createBox();\r\n    }\r\n    getStaticValue(key) {\r\n        return this.latestValues[key];\r\n    }\r\n    setStaticValue(key, value) {\r\n        this.latestValues[key] = value;\r\n    }\r\n    /**\r\n     * Update the provided props. Ensure any newly-added motion values are\r\n     * added to our map, old ones removed, and listeners updated.\r\n     */\r\n    update(props, presenceContext) {\r\n        if (props.transformTemplate || this.props.transformTemplate) {\r\n            this.scheduleRender();\r\n        }\r\n        this.prevProps = this.props;\r\n        this.props = props;\r\n        this.prevPresenceContext = this.presenceContext;\r\n        this.presenceContext = presenceContext;\r\n        /**\r\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\r\n         */\r\n        for (let i = 0; i < propEventHandlers.length; i++) {\r\n            const key = propEventHandlers[i];\r\n            if (this.propEventSubscriptions[key]) {\r\n                this.propEventSubscriptions[key]();\r\n                delete this.propEventSubscriptions[key];\r\n            }\r\n            const listenerName = (\"on\" + key);\r\n            const listener = props[listenerName];\r\n            if (listener) {\r\n                this.propEventSubscriptions[key] = this.on(key, listener);\r\n            }\r\n        }\r\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\r\n        if (this.handleChildMotionValue) {\r\n            this.handleChildMotionValue();\r\n        }\r\n        this.onUpdate && this.onUpdate(this);\r\n    }\r\n    getProps() {\r\n        return this.props;\r\n    }\r\n    /**\r\n     * Returns the variant definition with a given name.\r\n     */\r\n    getVariant(name) {\r\n        return this.props.variants ? this.props.variants[name] : undefined;\r\n    }\r\n    /**\r\n     * Returns the defined default transition on this component.\r\n     */\r\n    getDefaultTransition() {\r\n        return this.props.transition;\r\n    }\r\n    getTransformPagePoint() {\r\n        return this.props.transformPagePoint;\r\n    }\r\n    getClosestVariantNode() {\r\n        return this.isVariantNode\r\n            ? this\r\n            : this.parent\r\n                ? this.parent.getClosestVariantNode()\r\n                : undefined;\r\n    }\r\n    /**\r\n     * Add a child visual element to our set of children.\r\n     */\r\n    addVariantChild(child) {\r\n        const closestVariantNode = this.getClosestVariantNode();\r\n        if (closestVariantNode) {\r\n            closestVariantNode.variantChildren &&\r\n                closestVariantNode.variantChildren.add(child);\r\n            return () => closestVariantNode.variantChildren.delete(child);\r\n        }\r\n    }\r\n    /**\r\n     * Add a motion value and bind it to this visual element.\r\n     */\r\n    addValue(key, value) {\r\n        // Remove existing value if it exists\r\n        const existingValue = this.values.get(key);\r\n        if (value !== existingValue) {\r\n            if (existingValue)\r\n                this.removeValue(key);\r\n            this.bindToMotionValue(key, value);\r\n            this.values.set(key, value);\r\n            this.latestValues[key] = value.get();\r\n        }\r\n    }\r\n    /**\r\n     * Remove a motion value and unbind any active subscriptions.\r\n     */\r\n    removeValue(key) {\r\n        this.values.delete(key);\r\n        const unsubscribe = this.valueSubscriptions.get(key);\r\n        if (unsubscribe) {\r\n            unsubscribe();\r\n            this.valueSubscriptions.delete(key);\r\n        }\r\n        delete this.latestValues[key];\r\n        this.removeValueFromRenderState(key, this.renderState);\r\n    }\r\n    /**\r\n     * Check whether we have a motion value for this key\r\n     */\r\n    hasValue(key) {\r\n        return this.values.has(key);\r\n    }\r\n    getValue(key, defaultValue) {\r\n        if (this.props.values && this.props.values[key]) {\r\n            return this.props.values[key];\r\n        }\r\n        let value = this.values.get(key);\r\n        if (value === undefined && defaultValue !== undefined) {\r\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\r\n            this.addValue(key, value);\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * If we're trying to animate to a previously unencountered value,\r\n     * we need to check for it in our state and as a last resort read it\r\n     * directly from the instance (which might have performance implications).\r\n     */\r\n    readValue(key, target) {\r\n        var _a;\r\n        let value = this.latestValues[key] !== undefined || !this.current\r\n            ? this.latestValues[key]\r\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\r\n        if (value !== undefined && value !== null) {\r\n            if (typeof value === \"string\" &&\r\n                (isNumericalString(value) || isZeroValueString(value))) {\r\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\r\n                value = parseFloat(value);\r\n            }\r\n            else if (!findValueType(value) && complex.test(target)) {\r\n                value = getAnimatableNone(key, target);\r\n            }\r\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\r\n        }\r\n        return isMotionValue(value) ? value.get() : value;\r\n    }\r\n    /**\r\n     * Set the base target to later animate back to. This is currently\r\n     * only hydrated on creation and when we first read a value.\r\n     */\r\n    setBaseTarget(key, value) {\r\n        this.baseTarget[key] = value;\r\n    }\r\n    /**\r\n     * Find the base target for a value thats been removed from all animation\r\n     * props.\r\n     */\r\n    getBaseTarget(key) {\r\n        var _a;\r\n        const { initial } = this.props;\r\n        let valueFromInitial;\r\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\r\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\r\n            if (variant) {\r\n                valueFromInitial = variant[key];\r\n            }\r\n        }\r\n        /**\r\n         * If this value still exists in the current initial variant, read that.\r\n         */\r\n        if (initial && valueFromInitial !== undefined) {\r\n            return valueFromInitial;\r\n        }\r\n        /**\r\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\r\n         * so we can read the value from an alternative source, try that.\r\n         */\r\n        const target = this.getBaseTargetFromProps(this.props, key);\r\n        if (target !== undefined && !isMotionValue(target))\r\n            return target;\r\n        /**\r\n         * If the value was initially defined on initial, but it doesn't any more,\r\n         * return undefined. Otherwise return the value as initially read from the DOM.\r\n         */\r\n        return this.initialValues[key] !== undefined &&\r\n            valueFromInitial === undefined\r\n            ? undefined\r\n            : this.baseTarget[key];\r\n    }\r\n    on(eventName, callback) {\r\n        if (!this.events[eventName]) {\r\n            this.events[eventName] = new SubscriptionManager();\r\n        }\r\n        return this.events[eventName].add(callback);\r\n    }\r\n    notify(eventName, ...args) {\r\n        if (this.events[eventName]) {\r\n            this.events[eventName].notify(...args);\r\n        }\r\n    }\r\n}\r\n\r\nexport { VisualElement };\r\n"]},"metadata":{},"sourceType":"module"}