{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\Salary\\\\SalaryList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport SalaryPDF from \"../Printing/SalaryPDF\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SalaryList() {\n  _s();\n\n  // State Hooks\n  const [salaries, setSalaries] = useState([]);\n  const [jobs, setJobs] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [entriesToShow, setEntriesToShow] = useState(10);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [editingId, setEditingId] = useState(null);\n  const [editedSalary, setEditedSalary] = useState({}); // New Salary Entry State\n\n  const [newSalary, setNewSalary] = useState({\n    job_id: \"\",\n    position: \"\",\n    salary: \"\"\n  }); // Effect Hook for fetching data and handling window resize\n\n  useEffect(() => {\n    fetchSalaries();\n    fetchJobs();\n\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Fetch salary data from API\n\n  const fetchSalaries = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/salary\");\n      setSalaries(response.data);\n    } catch (error) {\n      console.error(\"Error fetching salaries:\", error);\n    }\n  }; // Fetch job titles from API\n\n\n  const fetchJobs = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/job\");\n      setJobs(response.data);\n    } catch (error) {\n      console.error(\"Error fetching job titles:\", error);\n    }\n  }; // Handle changes in the new salary input row\n\n\n  const handleNewSalaryChange = (e, field) => {\n    setNewSalary({ ...newSalary,\n      [field]: e.target.value\n    });\n  }; // Save new salary entry\n\n\n  const saveNewSalary = async () => {\n    if (!newSalary.job_id || !newSalary.position || !newSalary.salary) {\n      alert(\"Please fill all fields!\");\n      return;\n    }\n\n    try {\n      await axios.post(\"http://localhost:5000/salary\", {\n        depId: newSalary.job_id,\n        position: newSalary.position,\n        salary: newSalary.salary\n      }); // Refresh the table and reset the newSalary state\n\n      fetchSalaries();\n      setNewSalary({\n        job_id: \"\",\n        position: \"\",\n        salary: \"\"\n      });\n    } catch (error) {\n      console.error(\"Error saving new salary:\", error);\n    }\n  }; // Start inline editing for an existing salary record\n\n\n  const startEditing = salary => {\n    setEditingId(salary.id);\n    const job = jobs.find(job => job.Job_Title === salary.Job_Title);\n    setEditedSalary({\n      job_id: job ? job.id : \"\",\n      position: salary.position,\n      salary: salary.salary\n    });\n  }; // Cancel editing\n\n\n  const cancelEditing = () => {\n    setEditingId(null);\n    setEditedSalary({});\n  }; // Save updated salary record\n\n\n  const saveSalary = async id => {\n    try {\n      await axios.patch(`http://localhost:5000/salary/${id}`, {\n        depId: editedSalary.job_id,\n        position: editedSalary.position,\n        salary: editedSalary.salary\n      });\n      fetchSalaries();\n      setEditingId(null);\n    } catch (error) {\n      console.error(\"Error updating salary:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"is-flex is-justify-content-space-between mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"input\",\n        placeholder: \"Search by Job Title or Position...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveNewSalary,\n        className: \"button is-success ml-3\",\n        children: \"Save New Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table is-striped is-fullwidth\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Position / Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"New\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select is-fullwidth\",\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: newSalary.job_id,\n                onChange: e => handleNewSalaryChange(e, \"job_id\"),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select a Job\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 19\n                }, this), jobs.map(job => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: job.id,\n                  children: job.Job_Title\n                }, job.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 21\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input\",\n              placeholder: \"Position / Level\",\n              value: newSalary.position,\n              onChange: e => handleNewSalaryChange(e, \"position\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              className: \"input\",\n              placeholder: \"Salary\",\n              value: newSalary.salary,\n              onChange: e => handleNewSalaryChange(e, \"salary\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: saveNewSalary,\n              className: \"button is-small is-success\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), salaries.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.Job_Title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.position\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"\\u20B1\", parseFloat(user.salary).toLocaleString(\"en-PH\", {\n              minimumFractionDigits: 2\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button is-small is-info\",\n              onClick: () => startEditing(user),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SalaryList, \"l3x9Q7NAqJAQM+FMj2tVSHWcgpE=\");\n\n_c = SalaryList;\nexport default SalaryList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SalaryList\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/Salary/SalaryList.js"],"names":["React","useState","useEffect","axios","Link","pdf","SalaryPDF","SalaryList","salaries","setSalaries","jobs","setJobs","searchTerm","setSearchTerm","entriesToShow","setEntriesToShow","isMobile","setIsMobile","window","innerWidth","editingId","setEditingId","editedSalary","setEditedSalary","newSalary","setNewSalary","job_id","position","salary","fetchSalaries","fetchJobs","handleResize","addEventListener","removeEventListener","response","get","data","error","console","handleNewSalaryChange","e","field","target","value","saveNewSalary","alert","post","depId","startEditing","id","job","find","Job_Title","cancelEditing","saveSalary","patch","map","user","parseFloat","toLocaleString","minimumFractionDigits"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pdf } from \"@react-pdf/renderer\";\r\nimport SalaryPDF from \"../Printing/SalaryPDF\";\r\n\r\nfunction SalaryList() {\r\n  // State Hooks\r\n  const [salaries, setSalaries] = useState([]);\r\n  const [jobs, setJobs] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [entriesToShow, setEntriesToShow] = useState(10);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [editedSalary, setEditedSalary] = useState({});\r\n  \r\n  // New Salary Entry State\r\n  const [newSalary, setNewSalary] = useState({\r\n    job_id: \"\",\r\n    position: \"\",\r\n    salary: \"\",\r\n  });\r\n\r\n  // Effect Hook for fetching data and handling window resize\r\n  useEffect(() => {\r\n    fetchSalaries();\r\n    fetchJobs();\r\n\r\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  // Fetch salary data from API\r\n  const fetchSalaries = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/salary\");\r\n      setSalaries(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching salaries:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch job titles from API\r\n  const fetchJobs = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/job\");\r\n      setJobs(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching job titles:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle changes in the new salary input row\r\n  const handleNewSalaryChange = (e, field) => {\r\n    setNewSalary({ ...newSalary, [field]: e.target.value });\r\n  };\r\n\r\n  // Save new salary entry\r\n  const saveNewSalary = async () => {\r\n    if (!newSalary.job_id || !newSalary.position || !newSalary.salary) {\r\n      alert(\"Please fill all fields!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.post(\"http://localhost:5000/salary\", {\r\n        depId: newSalary.job_id,\r\n        position: newSalary.position,\r\n        salary: newSalary.salary,\r\n      });\r\n\r\n      // Refresh the table and reset the newSalary state\r\n      fetchSalaries();\r\n      setNewSalary({ job_id: \"\", position: \"\", salary: \"\" });\r\n    } catch (error) {\r\n      console.error(\"Error saving new salary:\", error);\r\n    }\r\n  };\r\n\r\n  // Start inline editing for an existing salary record\r\n  const startEditing = (salary) => {\r\n    setEditingId(salary.id);\r\n    const job = jobs.find((job) => job.Job_Title === salary.Job_Title);\r\n    setEditedSalary({\r\n      job_id: job ? job.id : \"\",\r\n      position: salary.position,\r\n      salary: salary.salary,\r\n    });\r\n  };\r\n\r\n  // Cancel editing\r\n  const cancelEditing = () => {\r\n    setEditingId(null);\r\n    setEditedSalary({});\r\n  };\r\n\r\n  // Save updated salary record\r\n  const saveSalary = async (id) => {\r\n    try {\r\n      await axios.patch(`http://localhost:5000/salary/${id}`, {\r\n        depId: editedSalary.job_id,\r\n        position: editedSalary.position,\r\n        salary: editedSalary.salary,\r\n      });\r\n\r\n      fetchSalaries();\r\n      setEditingId(null);\r\n    } catch (error) {\r\n      console.error(\"Error updating salary:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"is-flex is-justify-content-space-between mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          placeholder=\"Search by Job Title or Position...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n        <button onClick={saveNewSalary} className=\"button is-success ml-3\">\r\n          Save New Salary\r\n        </button>\r\n      </div>\r\n\r\n      <table className=\"table is-striped is-fullwidth\">\r\n        <thead>\r\n          <tr>\r\n            <th>Salary ID</th>\r\n            <th>Job Title</th>\r\n            <th>Position / Level</th>\r\n            <th>Salary</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {/* New Salary Entry Row */}\r\n          <tr>\r\n            <td>New</td>\r\n            <td>\r\n              <div className=\"select is-fullwidth\">\r\n                <select\r\n                  value={newSalary.job_id}\r\n                  onChange={(e) => handleNewSalaryChange(e, \"job_id\")}\r\n                >\r\n                  <option value=\"\">Select a Job</option>\r\n                  {jobs.map((job) => (\r\n                    <option key={job.id} value={job.id}>\r\n                      {job.Job_Title}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </td>\r\n            <td>\r\n              <input\r\n                type=\"text\"\r\n                className=\"input\"\r\n                placeholder=\"Position / Level\"\r\n                value={newSalary.position}\r\n                onChange={(e) => handleNewSalaryChange(e, \"position\")}\r\n              />\r\n            </td>\r\n            <td>\r\n              <input\r\n                type=\"number\"\r\n                className=\"input\"\r\n                placeholder=\"Salary\"\r\n                value={newSalary.salary}\r\n                onChange={(e) => handleNewSalaryChange(e, \"salary\")}\r\n              />\r\n            </td>\r\n            <td>\r\n              <button onClick={saveNewSalary} className=\"button is-small is-success\">\r\n                Add\r\n              </button>\r\n            </td>\r\n          </tr>\r\n\r\n          {/* Existing Salary Records */}\r\n          {salaries.map((user) => (\r\n            <tr key={user.id}>\r\n              <td>{user.id}</td>\r\n              <td>{user.Job_Title}</td>\r\n              <td>{user.position}</td>\r\n              <td>₱{parseFloat(user.salary).toLocaleString(\"en-PH\", { minimumFractionDigits: 2 })}</td>\r\n              <td>\r\n                <button className=\"button is-small is-info\" onClick={() => startEditing(user)}>\r\n                  Edit\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SalaryList;\r\n"]},"metadata":{},"sourceType":"module"}