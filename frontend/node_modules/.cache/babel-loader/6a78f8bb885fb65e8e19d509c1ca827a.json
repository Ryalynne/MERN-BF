{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\Employee\\\\UserList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { pdf } from \"@react-pdf/renderer\";\nimport EmployePDF from \"../Printing/EmployeePDF\";\nimport ConfirmBox from \"../UI/Modal/ConfirmBox\";\nimport AddEmployeeModal from \"../UI/Modal/AddEmployee\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UserList = () => {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [entriesToShow, setEntriesToShow] = useState(10);\n  const [deleteData, setDeleteData] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\n  const [isModalActive, setIsModalActive] = useState(false);\n  const [editRow, setEditRow] = useState(null);\n  const [editedData, setEditedData] = useState({});\n  const [positions, setPositions] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  useEffect(() => {\n    getUsers();\n    fetchDepartments();\n\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const getUsers = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/users\");\n      setUsers(response.data);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n    }\n  };\n\n  const fetchDepartments = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/job\");\n      setDepartments(response.data);\n    } catch (error) {\n      console.error(\"Error fetching departments:\", error);\n    }\n  };\n\n  const fetchPositions = async dep_id => {\n    try {\n      const response = await axios.get(`http://localhost:5000/salary/getPosition/${dep_id}`);\n      setPositions(response.data);\n    } catch (error) {\n      console.error(\"Error fetching positions:\", error);\n    }\n  };\n\n  const handleEdit = user => {\n    setEditRow(user.id);\n    setEditedData({ ...user\n    });\n    fetchPositions(user.job_id);\n  };\n\n  const handleInputChange = (e, field) => {\n    const value = e.target.value;\n    setEditedData(prevData => ({ ...prevData,\n      [field]: value\n    }));\n\n    if (field === \"job_id\") {\n      fetchPositions(value);\n      setEditedData(prevData => ({ ...prevData,\n        position_id: \"\",\n        salary: \"\"\n      }));\n    }\n\n    if (field === \"position_id\") {\n      const selectedPosition = positions.find(pos => String(pos.id) === String(value));\n      setEditedData(prevData => ({ ...prevData,\n        salary: selectedPosition ? selectedPosition.salary : \"\"\n      }));\n    }\n  };\n\n  const handleSave = async id => {\n    try {\n      await axios.put(`http://localhost:5000/users/${id}`, editedData);\n      setEditRow(null);\n      getUsers();\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container overflow-x-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table is-striped is-fullwidth\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Full Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Job Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.slice(0, entriesToShow).map(user => {\n          var _user$salary;\n\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: user.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editRow === user.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedData.full_name,\n                onChange: e => handleInputChange(e, \"full_name\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this) : user.full_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editRow === user.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedData.email,\n                onChange: e => handleInputChange(e, \"email\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this) : user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editRow === user.id ? /*#__PURE__*/_jsxDEV(\"select\", {\n                value: editedData.job_id,\n                onChange: e => handleInputChange(e, \"job_id\"),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Job Title\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 21\n                }, this), departments.map(dep => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: dep.id,\n                  children: dep.Job_Title\n                }, dep.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 19\n              }, this) : user.Job_Title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editRow === user.id ? /*#__PURE__*/_jsxDEV(\"select\", {\n                value: editedData.position_id,\n                onChange: e => handleInputChange(e, \"position_id\"),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Position\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 21\n                }, this), positions.map(pos => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: pos.id,\n                  children: pos.position\n                }, pos.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 19\n              }, this) : user.position\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editRow === user.id ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedData.salary ? `₱${editedData.salary.toLocaleString(\"en-PH\", {\n                  minimumFractionDigits: 2\n                })}` : \"\",\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this) : `₱${((_user$salary = user.salary) === null || _user$salary === void 0 ? void 0 : _user$salary.toLocaleString(\"en-PH\")) || \"-\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => editRow === user.id ? handleSave(user.id) : handleEdit(user),\n                className: \"button is-small is-info\",\n                children: editRow === user.id ? \"Save\" : \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)]\n          }, user.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UserList, \"ajb2DkbriJ6WOA5ob2eYGgU9JKw=\");\n\n_c = UserList;\nexport default UserList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/Employee/UserList.js"],"names":["React","useState","useEffect","axios","Link","pdf","EmployePDF","ConfirmBox","AddEmployeeModal","UserList","users","setUsers","searchTerm","setSearchTerm","entriesToShow","setEntriesToShow","deleteData","setDeleteData","open","setOpen","isMobile","setIsMobile","window","innerWidth","isModalActive","setIsModalActive","editRow","setEditRow","editedData","setEditedData","positions","setPositions","departments","setDepartments","getUsers","fetchDepartments","handleResize","addEventListener","removeEventListener","response","get","data","error","console","fetchPositions","dep_id","handleEdit","user","id","job_id","handleInputChange","e","field","value","target","prevData","position_id","salary","selectedPosition","find","pos","String","handleSave","put","slice","map","full_name","email","dep","Job_Title","position","toLocaleString","minimumFractionDigits"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAACqB,MAAM,CAACC,UAAP,GAAoB,GAArB,CAAxC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCxB,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACyB,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC6B,SAAD,EAAYC,YAAZ,IAA4B9B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,QAAQ;AACRC,IAAAA,gBAAgB;;AAChB,UAAMC,YAAY,GAAG,MAAMf,WAAW,CAACC,MAAM,CAACC,UAAP,GAAoB,GAArB,CAAtC;;AACAD,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMd,MAAM,CAACgB,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACD,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMF,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMK,QAAQ,GAAG,MAAMpC,KAAK,CAACqC,GAAN,CAAU,6BAAV,CAAvB;AACA7B,MAAAA,QAAQ,CAAC4B,QAAQ,CAACE,IAAV,CAAR;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,uBAAd,EAAuCA,KAAvC;AACD;AACF,GAPD;;AASA,QAAMP,gBAAgB,GAAG,YAAY;AACnC,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMpC,KAAK,CAACqC,GAAN,CAAU,2BAAV,CAAvB;AACAP,MAAAA,cAAc,CAACM,QAAQ,CAACE,IAAV,CAAd;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF,GAPD;;AASA,QAAME,cAAc,GAAG,MAAOC,MAAP,IAAkB;AACvC,QAAI;AACF,YAAMN,QAAQ,GAAG,MAAMpC,KAAK,CAACqC,GAAN,CAAW,4CAA2CK,MAAO,EAA7D,CAAvB;AACAd,MAAAA,YAAY,CAACQ,QAAQ,CAACE,IAAV,CAAZ;AACD,KAHD,CAGE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACD;AACF,GAPD;;AASA,QAAMI,UAAU,GAAIC,IAAD,IAAU;AAC3BpB,IAAAA,UAAU,CAACoB,IAAI,CAACC,EAAN,CAAV;AACAnB,IAAAA,aAAa,CAAC,EAAE,GAAGkB;AAAL,KAAD,CAAb;AACAH,IAAAA,cAAc,CAACG,IAAI,CAACE,MAAN,CAAd;AACD,GAJD;;AAMA,QAAMC,iBAAiB,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACtC,UAAMC,KAAK,GAAGF,CAAC,CAACG,MAAF,CAASD,KAAvB;AACAxB,IAAAA,aAAa,CAAE0B,QAAD,KAAe,EAC3B,GAAGA,QADwB;AAE3B,OAACH,KAAD,GAASC;AAFkB,KAAf,CAAD,CAAb;;AAKA,QAAID,KAAK,KAAK,QAAd,EAAwB;AACtBR,MAAAA,cAAc,CAACS,KAAD,CAAd;AACAxB,MAAAA,aAAa,CAAE0B,QAAD,KAAe,EAC3B,GAAGA,QADwB;AAE3BC,QAAAA,WAAW,EAAE,EAFc;AAG3BC,QAAAA,MAAM,EAAE;AAHmB,OAAf,CAAD,CAAb;AAKD;;AAED,QAAIL,KAAK,KAAK,aAAd,EAA6B;AAC3B,YAAMM,gBAAgB,GAAG5B,SAAS,CAAC6B,IAAV,CAAgBC,GAAD,IAASC,MAAM,CAACD,GAAG,CAACZ,EAAL,CAAN,KAAmBa,MAAM,CAACR,KAAD,CAAjD,CAAzB;AACAxB,MAAAA,aAAa,CAAE0B,QAAD,KAAe,EAC3B,GAAGA,QADwB;AAE3BE,QAAAA,MAAM,EAAEC,gBAAgB,GAAGA,gBAAgB,CAACD,MAApB,GAA6B;AAF1B,OAAf,CAAD,CAAb;AAID;AACF,GAvBD;;AAyBA,QAAMK,UAAU,GAAG,MAAOd,EAAP,IAAc;AAC/B,QAAI;AACF,YAAM7C,KAAK,CAAC4D,GAAN,CAAW,+BAA8Bf,EAAG,EAA5C,EAA+CpB,UAA/C,CAAN;AACAD,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAO,MAAAA,QAAQ;AACT,KAJD,CAIE,OAAOQ,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACD;AACF,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,iCAAf;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,+BAAjB;AAAA,8BACE;AAAA,+BACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAYE;AAAA,kBACGhC,KAAK,CAACsD,KAAN,CAAY,CAAZ,EAAelD,aAAf,EAA8BmD,GAA9B,CAAmClB,IAAD;AAAA;;AAAA,8BACjC;AAAA,oCACE;AAAA,wBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBACGtB,OAAO,KAAKqB,IAAI,CAACC,EAAjB,gBACC;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,KAAK,EAAEpB,UAAU,CAACsC,SAFpB;AAGE,gBAAA,QAAQ,EAAGf,CAAD,IAAOD,iBAAiB,CAACC,CAAD,EAAI,WAAJ;AAHpC;AAAA;AAAA;AAAA;AAAA,sBADD,GAOCJ,IAAI,CAACmB;AART;AAAA;AAAA;AAAA;AAAA,oBAFF,eAaE;AAAA,wBACGxC,OAAO,KAAKqB,IAAI,CAACC,EAAjB,gBACC;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,KAAK,EAAEpB,UAAU,CAACuC,KAFpB;AAGE,gBAAA,QAAQ,EAAGhB,CAAD,IAAOD,iBAAiB,CAACC,CAAD,EAAI,OAAJ;AAHpC;AAAA;AAAA;AAAA;AAAA,sBADD,GAOCJ,IAAI,CAACoB;AART;AAAA;AAAA;AAAA;AAAA,oBAbF,eAwBE;AAAA,wBACGzC,OAAO,KAAKqB,IAAI,CAACC,EAAjB,gBACC;AAAQ,gBAAA,KAAK,EAAEpB,UAAU,CAACqB,MAA1B;AAAkC,gBAAA,QAAQ,EAAGE,CAAD,IAAOD,iBAAiB,CAACC,CAAD,EAAI,QAAJ,CAApE;AAAA,wCACE;AAAQ,kBAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEGnB,WAAW,CAACiC,GAAZ,CAAiBG,GAAD,iBACf;AAAqB,kBAAA,KAAK,EAAEA,GAAG,CAACpB,EAAhC;AAAA,4BACGoB,GAAG,CAACC;AADP,mBAAaD,GAAG,CAACpB,EAAjB;AAAA;AAAA;AAAA;AAAA,wBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,GAUCD,IAAI,CAACsB;AAXT;AAAA;AAAA;AAAA;AAAA,oBAxBF,eAsCE;AAAA,wBACG3C,OAAO,KAAKqB,IAAI,CAACC,EAAjB,gBACC;AAAQ,gBAAA,KAAK,EAAEpB,UAAU,CAAC4B,WAA1B;AAAuC,gBAAA,QAAQ,EAAGL,CAAD,IAAOD,iBAAiB,CAACC,CAAD,EAAI,aAAJ,CAAzE;AAAA,wCACE;AAAQ,kBAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEGrB,SAAS,CAACmC,GAAV,CAAeL,GAAD,iBACb;AAAqB,kBAAA,KAAK,EAAEA,GAAG,CAACZ,EAAhC;AAAA,4BACGY,GAAG,CAACU;AADP,mBAAaV,GAAG,CAACZ,EAAjB;AAAA;AAAA;AAAA;AAAA,wBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,GAUCD,IAAI,CAACuB;AAXT;AAAA;AAAA;AAAA;AAAA,oBAtCF,eAoDE;AAAA,wBACG5C,OAAO,KAAKqB,IAAI,CAACC,EAAjB,gBACC;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,KAAK,EAAEpB,UAAU,CAAC6B,MAAX,GAAqB,IAAG7B,UAAU,CAAC6B,MAAX,CAAkBc,cAAlB,CAAiC,OAAjC,EAA0C;AAAEC,kBAAAA,qBAAqB,EAAE;AAAzB,iBAA1C,CAAwE,EAAhG,GAAoG,EAF7G;AAGE,gBAAA,QAAQ;AAHV;AAAA;AAAA;AAAA;AAAA,sBADD,GAOE,IAAG,iBAAAzB,IAAI,CAACU,MAAL,8DAAac,cAAb,CAA4B,OAA5B,MAAwC,GAAI;AARpD;AAAA;AAAA;AAAA;AAAA,oBApDF,eA+DE;AAAA,qCACE;AACE,gBAAA,OAAO,EAAE,MAAO7C,OAAO,KAAKqB,IAAI,CAACC,EAAjB,GAAsBc,UAAU,CAACf,IAAI,CAACC,EAAN,CAAhC,GAA4CF,UAAU,CAACC,IAAD,CADxE;AAEE,gBAAA,SAAS,EAAC,yBAFZ;AAAA,0BAIGrB,OAAO,KAAKqB,IAAI,CAACC,EAAjB,GAAsB,MAAtB,GAA+B;AAJlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBA/DF;AAAA,aAASD,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,kBADiC;AAAA,SAAlC;AADH;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6FD,CAtLD;;GAAMvC,Q;;KAAAA,Q;AAwLN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pdf } from \"@react-pdf/renderer\";\r\nimport EmployePDF from \"../Printing/EmployeePDF\";\r\nimport ConfirmBox from \"../UI/Modal/ConfirmBox\";\r\nimport AddEmployeeModal from \"../UI/Modal/AddEmployee\";\r\n\r\nconst UserList = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [entriesToShow, setEntriesToShow] = useState(10);\r\n  const [deleteData, setDeleteData] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n  const [isModalActive, setIsModalActive] = useState(false);\r\n  const [editRow, setEditRow] = useState(null);\r\n  const [editedData, setEditedData] = useState({});\r\n  const [positions, setPositions] = useState([]);\r\n  const [departments, setDepartments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n    fetchDepartments();\r\n    const handleResize = () => setIsMobile(window.innerWidth < 768);\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  const getUsers = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/users\");\r\n      setUsers(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching users:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchDepartments = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/job\");\r\n      setDepartments(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching departments:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchPositions = async (dep_id) => {\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/salary/getPosition/${dep_id}`);\r\n      setPositions(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching positions:\", error);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (user) => {\r\n    setEditRow(user.id);\r\n    setEditedData({ ...user });\r\n    fetchPositions(user.job_id);\r\n  };\r\n\r\n  const handleInputChange = (e, field) => {\r\n    const value = e.target.value;\r\n    setEditedData((prevData) => ({\r\n      ...prevData,\r\n      [field]: value,\r\n    }));\r\n\r\n    if (field === \"job_id\") {\r\n      fetchPositions(value);\r\n      setEditedData((prevData) => ({\r\n        ...prevData,\r\n        position_id: \"\",\r\n        salary: \"\",\r\n      }));\r\n    }\r\n\r\n    if (field === \"position_id\") {\r\n      const selectedPosition = positions.find((pos) => String(pos.id) === String(value));\r\n      setEditedData((prevData) => ({\r\n        ...prevData,\r\n        salary: selectedPosition ? selectedPosition.salary : \"\",\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleSave = async (id) => {\r\n    try {\r\n      await axios.put(`http://localhost:5000/users/${id}`, editedData);\r\n      setEditRow(null);\r\n      getUsers();\r\n    } catch (error) {\r\n      console.error(\"Error updating user:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-container overflow-x-auto\">\r\n      <table className=\"table is-striped is-fullwidth\">\r\n        <thead>\r\n          <tr>\r\n            <th>Employee ID</th>\r\n            <th>Full Name</th>\r\n            <th>Email</th>\r\n            <th>Job Title</th>\r\n            <th>Position</th>\r\n            <th>Salary</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.slice(0, entriesToShow).map((user) => (\r\n            <tr key={user.id}>\r\n              <td>{user.id}</td>\r\n              <td>\r\n                {editRow === user.id ? (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedData.full_name}\r\n                    onChange={(e) => handleInputChange(e, \"full_name\")}\r\n                  />\r\n                ) : (\r\n                  user.full_name\r\n                )}\r\n              </td>\r\n              <td>\r\n                {editRow === user.id ? (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedData.email}\r\n                    onChange={(e) => handleInputChange(e, \"email\")}\r\n                  />\r\n                ) : (\r\n                  user.email\r\n                )}\r\n              </td>\r\n              <td>\r\n                {editRow === user.id ? (\r\n                  <select value={editedData.job_id} onChange={(e) => handleInputChange(e, \"job_id\")}>\r\n                    <option value=\"\">Select Job Title</option>\r\n                    {departments.map((dep) => (\r\n                      <option key={dep.id} value={dep.id}>\r\n                        {dep.Job_Title}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : (\r\n                  user.Job_Title\r\n                )}\r\n              </td>\r\n              <td>\r\n                {editRow === user.id ? (\r\n                  <select value={editedData.position_id} onChange={(e) => handleInputChange(e, \"position_id\")}>\r\n                    <option value=\"\">Select Position</option>\r\n                    {positions.map((pos) => (\r\n                      <option key={pos.id} value={pos.id}>\r\n                        {pos.position}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : (\r\n                  user.position\r\n                )}\r\n              </td>\r\n              <td>\r\n                {editRow === user.id ? (\r\n                  <input\r\n                    type=\"text\"\r\n                    value={editedData.salary ? `₱${editedData.salary.toLocaleString(\"en-PH\", { minimumFractionDigits: 2 })}` : \"\"}\r\n                    disabled\r\n                  />\r\n                ) : (\r\n                  `₱${user.salary?.toLocaleString(\"en-PH\") || \"-\"}`\r\n                )}\r\n              </td>\r\n              <td>\r\n                <button\r\n                  onClick={() => (editRow === user.id ? handleSave(user.id) : handleEdit(user))}\r\n                  className=\"button is-small is-info\"\r\n                >\r\n                  {editRow === user.id ? \"Save\" : \"Edit\"}\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;"]},"metadata":{},"sourceType":"module"}