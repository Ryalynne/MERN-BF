{"ast":null,"code":"import { invariant } from 'motion-utils';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n/**\r\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\r\n *\r\n * ```\r\n * `var(--foo, #fff)` => [`--foo`, '#fff']\r\n * ```\r\n *\r\n * @param current\r\n */\n\nconst splitCSSVariableRegex = // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\n\nfunction parseCSSVariable(current) {\n  const match = splitCSSVariableRegex.exec(current);\n  if (!match) return [,];\n  const [, token1, token2, fallback] = match;\n  return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\n\nconst maxDepth = 4;\n\nfunction getVariableValue(current, element) {\n  let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n  const [token, fallback] = parseCSSVariable(current); // No CSS variable detected\n\n  if (!token) return; // Attempt to read this CSS variable off the element\n\n  const resolved = window.getComputedStyle(element).getPropertyValue(token);\n\n  if (resolved) {\n    const trimmed = resolved.trim();\n    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n  }\n\n  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"names":["invariant","isNumericalString","isCSSVariableToken","splitCSSVariableRegex","parseCSSVariable","current","match","exec","token1","token2","fallback","maxDepth","getVariableValue","element","depth","token","resolved","window","getComputedStyle","getPropertyValue","trimmed","trim","parseFloat"],"mappings":"AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,SAASC,iBAAT,QAAkC,wCAAlC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAC3B;AACA,0DAFA;;AAGA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,QAAMC,KAAK,GAAGH,qBAAqB,CAACI,IAAtB,CAA2BF,OAA3B,CAAd;AACA,MAAI,CAACC,KAAL,EACI,OAAO,GAAP;AACJ,QAAM,GAAGE,MAAH,EAAWC,MAAX,EAAmBC,QAAnB,IAA+BJ,KAArC;AACA,SAAO,CAAE,KAAIE,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgDC,MAAO,EAA7D,EAAgEC,QAAhE,CAAP;AACH;;AACD,MAAMC,QAAQ,GAAG,CAAjB;;AACA,SAASC,gBAAT,CAA0BP,OAA1B,EAAmCQ,OAAnC,EAAuD;AAAA,MAAXC,KAAW,uEAAH,CAAG;AACnDd,EAAAA,SAAS,CAACc,KAAK,IAAIH,QAAV,EAAqB,yDAAwDN,OAAQ,sDAArF,CAAT;AACA,QAAM,CAACU,KAAD,EAAQL,QAAR,IAAoBN,gBAAgB,CAACC,OAAD,CAA1C,CAFmD,CAGnD;;AACA,MAAI,CAACU,KAAL,EACI,OAL+C,CAMnD;;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,gBAAP,CAAwBL,OAAxB,EAAiCM,gBAAjC,CAAkDJ,KAAlD,CAAjB;;AACA,MAAIC,QAAJ,EAAc;AACV,UAAMI,OAAO,GAAGJ,QAAQ,CAACK,IAAT,EAAhB;AACA,WAAOpB,iBAAiB,CAACmB,OAAD,CAAjB,GAA6BE,UAAU,CAACF,OAAD,CAAvC,GAAmDA,OAA1D;AACH;;AACD,SAAOlB,kBAAkB,CAACQ,QAAD,CAAlB,GACDE,gBAAgB,CAACF,QAAD,EAAWG,OAAX,EAAoBC,KAAK,GAAG,CAA5B,CADf,GAEDJ,QAFN;AAGH;;AAED,SAASE,gBAAT,EAA2BR,gBAA3B","sourcesContent":["import { invariant } from 'motion-utils';\r\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\r\nimport { isCSSVariableToken } from './is-css-variable.mjs';\r\n\r\n/**\r\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\r\n *\r\n * ```\r\n * `var(--foo, #fff)` => [`--foo`, '#fff']\r\n * ```\r\n *\r\n * @param current\r\n */\r\nconst splitCSSVariableRegex = \r\n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\r\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\r\nfunction parseCSSVariable(current) {\r\n    const match = splitCSSVariableRegex.exec(current);\r\n    if (!match)\r\n        return [,];\r\n    const [, token1, token2, fallback] = match;\r\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\r\n}\r\nconst maxDepth = 4;\r\nfunction getVariableValue(current, element, depth = 1) {\r\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\r\n    const [token, fallback] = parseCSSVariable(current);\r\n    // No CSS variable detected\r\n    if (!token)\r\n        return;\r\n    // Attempt to read this CSS variable off the element\r\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\r\n    if (resolved) {\r\n        const trimmed = resolved.trim();\r\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\r\n    }\r\n    return isCSSVariableToken(fallback)\r\n        ? getVariableValue(fallback, element, depth + 1)\r\n        : fallback;\r\n}\r\n\r\nexport { getVariableValue, parseCSSVariable };\r\n"]},"metadata":{},"sourceType":"module"}