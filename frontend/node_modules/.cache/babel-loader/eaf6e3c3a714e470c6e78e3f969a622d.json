{"ast":null,"code":"import { resolveEdge, namedEdges } from './edge.mjs';\nconst defaultOffset = [0, 0];\n\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\n  let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\n  let targetPoint = 0;\n  let containerPoint = 0;\n\n  if (typeof offset === \"number\") {\n    /**\r\n     * If we're provided offset: [0, 0.5, 1] then each number x should become\r\n     * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\r\n     * and container etc.\r\n     */\n    offsetDefinition = [offset, offset];\n  } else if (typeof offset === \"string\") {\n    offset = offset.trim();\n\n    if (offset.includes(\" \")) {\n      offsetDefinition = offset.split(\" \");\n    } else {\n      /**\r\n       * If we're provided a definition like \"100px\" then we want to apply\r\n       * that only to the top of the target point, leaving the container at 0.\r\n       * Whereas a named offset like \"end\" should be applied to both.\r\n       */\n      offsetDefinition = [offset, namedEdges[offset] ? offset : `0`];\n    }\n  }\n\n  targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);\n  containerPoint = resolveEdge(offsetDefinition[1], containerLength);\n  return targetPoint - containerPoint;\n}\n\nexport { resolveOffset };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/dom/scroll/offsets/offset.mjs"],"names":["resolveEdge","namedEdges","defaultOffset","resolveOffset","offset","containerLength","targetLength","targetInset","offsetDefinition","Array","isArray","targetPoint","containerPoint","trim","includes","split"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,YAAxC;AAEA,MAAMC,aAAa,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAtB;;AACA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,eAA/B,EAAgDC,YAAhD,EAA8DC,WAA9D,EAA2E;AACvE,MAAIC,gBAAgB,GAAGC,KAAK,CAACC,OAAN,CAAcN,MAAd,IAAwBA,MAAxB,GAAiCF,aAAxD;AACA,MAAIS,WAAW,GAAG,CAAlB;AACA,MAAIC,cAAc,GAAG,CAArB;;AACA,MAAI,OAAOR,MAAP,KAAkB,QAAtB,EAAgC;AAC5B;AACR;AACA;AACA;AACA;AACQI,IAAAA,gBAAgB,GAAG,CAACJ,MAAD,EAASA,MAAT,CAAnB;AACH,GAPD,MAQK,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AACjCA,IAAAA,MAAM,GAAGA,MAAM,CAACS,IAAP,EAAT;;AACA,QAAIT,MAAM,CAACU,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACtBN,MAAAA,gBAAgB,GAAGJ,MAAM,CAACW,KAAP,CAAa,GAAb,CAAnB;AACH,KAFD,MAGK;AACD;AACZ;AACA;AACA;AACA;AACYP,MAAAA,gBAAgB,GAAG,CAACJ,MAAD,EAASH,UAAU,CAACG,MAAD,CAAV,GAAqBA,MAArB,GAA+B,GAAxC,CAAnB;AACH;AACJ;;AACDO,EAAAA,WAAW,GAAGX,WAAW,CAACQ,gBAAgB,CAAC,CAAD,CAAjB,EAAsBF,YAAtB,EAAoCC,WAApC,CAAzB;AACAK,EAAAA,cAAc,GAAGZ,WAAW,CAACQ,gBAAgB,CAAC,CAAD,CAAjB,EAAsBH,eAAtB,CAA5B;AACA,SAAOM,WAAW,GAAGC,cAArB;AACH;;AAED,SAAST,aAAT","sourcesContent":["import { resolveEdge, namedEdges } from './edge.mjs';\r\n\r\nconst defaultOffset = [0, 0];\r\nfunction resolveOffset(offset, containerLength, targetLength, targetInset) {\r\n    let offsetDefinition = Array.isArray(offset) ? offset : defaultOffset;\r\n    let targetPoint = 0;\r\n    let containerPoint = 0;\r\n    if (typeof offset === \"number\") {\r\n        /**\r\n         * If we're provided offset: [0, 0.5, 1] then each number x should become\r\n         * [x, x], so we default to the behaviour of mapping 0 => 0 of both target\r\n         * and container etc.\r\n         */\r\n        offsetDefinition = [offset, offset];\r\n    }\r\n    else if (typeof offset === \"string\") {\r\n        offset = offset.trim();\r\n        if (offset.includes(\" \")) {\r\n            offsetDefinition = offset.split(\" \");\r\n        }\r\n        else {\r\n            /**\r\n             * If we're provided a definition like \"100px\" then we want to apply\r\n             * that only to the top of the target point, leaving the container at 0.\r\n             * Whereas a named offset like \"end\" should be applied to both.\r\n             */\r\n            offsetDefinition = [offset, namedEdges[offset] ? offset : `0`];\r\n        }\r\n    }\r\n    targetPoint = resolveEdge(offsetDefinition[0], targetLength, targetInset);\r\n    containerPoint = resolveEdge(offsetDefinition[1], containerLength);\r\n    return targetPoint - containerPoint;\r\n}\r\n\r\nexport { resolveOffset };\r\n"]},"metadata":{},"sourceType":"module"}