{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Documents\\\\PROGRAMMING\\\\MERN\\\\frontend\\\\src\\\\components\\\\Salary\\\\SalaryList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SalaryList = () => {\n  _s();\n\n  // State declarations\n  const [salaries, setSalaries] = useState([]);\n  const [editingId, setEditingId] = useState(null);\n  const [editedSalary, setEditedSalary] = useState({\n    depId: \"\",\n    position: \"\",\n    salary: \"\"\n  });\n  const [newSalary, setNewSalary] = useState({\n    depId: \"\",\n    position: \"\",\n    salary: \"\"\n  });\n  const [editErrors, setEditErrors] = useState({\n    depId: false,\n    position: false,\n    salary: false\n  });\n  const [addErrors, setAddErrors] = useState({\n    depId: false,\n    position: false,\n    salary: false\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\"); // Fetch salaries on mount\n\n  useEffect(() => {\n    fetchSalaries();\n  }, []);\n\n  const fetchSalaries = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/salary\");\n      setSalaries(response.data || []);\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      setErrorMessage(\"Failed to fetch salaries: \" + (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message));\n    }\n  }; // Editing Functions\n\n\n  const startEditing = salary => {\n    var _salary$depId;\n\n    setEditingId(salary.id);\n    setEditedSalary({\n      depId: ((_salary$depId = salary.depId) === null || _salary$depId === void 0 ? void 0 : _salary$depId.toString()) || \"\",\n      // Convert to string for select compatibility\n      position: salary.position || \"\",\n      salary: salary.salary || \"\"\n    });\n    setEditErrors({\n      depId: false,\n      position: false,\n      salary: false\n    });\n  };\n\n  const handleEditChange = (e, field) => {\n    const value = e.target.value;\n    setEditedSalary(prev => {\n      const newState = { ...prev,\n        [field]: value\n      };\n      console.log(\"Edited Salary:\", newState); // Debugging\n\n      return newState;\n    });\n    setEditErrors(prev => ({ ...prev,\n      [field]: field === \"salary\" ? !value || parseFloat(value) <= 0 : !value\n    }));\n  };\n\n  const saveSalary = async id => {\n    const newEditErrors = {\n      depId: !editedSalary.depId || editedSalary.depId === \"\",\n      position: !editedSalary.position || editedSalary.position.trim() === \"\",\n      salary: !editedSalary.salary || parseFloat(editedSalary.salary) <= 0\n    };\n\n    if (Object.values(newEditErrors).some(error => error)) {\n      setEditErrors(newEditErrors);\n      console.log(\"Edit Validation Errors:\", newEditErrors); // Debugging\n\n      return;\n    }\n\n    try {\n      await axios.patch(`http://localhost:5000/salary/${id}`, {\n        depId: parseInt(editedSalary.depId, 10),\n        position: editedSalary.position,\n        salary: parseFloat(editedSalary.salary)\n      });\n      await fetchSalaries(); // Refresh list\n\n      setEditingId(null);\n      setErrorMessage(\"\"); // Clear any previous errors\n    } catch (error) {\n      var _error$response2, _error$response3, _error$response3$data;\n\n      console.error(\"Error updating salary:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      setErrorMessage(\"Failed to update salary: \" + (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message));\n    }\n  };\n\n  const cancelEditing = () => {\n    setEditingId(null);\n    setEditedSalary({\n      depId: \"\",\n      position: \"\",\n      salary: \"\"\n    });\n    setEditErrors({\n      depId: false,\n      position: false,\n      salary: false\n    });\n  }; // Adding Functions\n\n\n  const handleNewChange = (e, field) => {\n    const value = e.target.value;\n    setNewSalary(prev => {\n      const newState = { ...prev,\n        [field]: value\n      };\n      console.log(\"New Salary:\", newState); // Debugging\n\n      return newState;\n    });\n    setAddErrors(prev => ({ ...prev,\n      [field]: field === \"salary\" ? !value || parseFloat(value) <= 0 : !value\n    }));\n  };\n\n  const saveNewSalary = async () => {\n    const newAddErrors = {\n      depId: !newSalary.depId || newSalary.depId === \"\",\n      position: !newSalary.position || newSalary.position.trim() === \"\",\n      salary: !newSalary.salary || parseFloat(newSalary.salary) <= 0\n    };\n\n    if (Object.values(newAddErrors).some(error => error)) {\n      setAddErrors(newAddErrors);\n      console.log(\"Add Validation Errors:\", newAddErrors); // Debugging\n\n      return;\n    }\n\n    try {\n      await axios.post(\"http://localhost:5000/salary\", {\n        depId: parseInt(newSalary.depId, 10),\n        position: newSalary.position,\n        salary: parseFloat(newSalary.salary)\n      });\n      await fetchSalaries(); // Refresh list\n\n      setNewSalary({\n        depId: \"\",\n        position: \"\",\n        salary: \"\"\n      });\n      setAddErrors({\n        depId: false,\n        position: false,\n        salary: false\n      });\n      setErrorMessage(\"\"); // Clear any previous errors\n    } catch (error) {\n      var _error$response4, _error$response5, _error$response5$data;\n\n      console.error(\"Error adding salary:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      setErrorMessage(\"Failed to add salary: \" + (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message));\n    }\n  }; // Sample department data (replace with your actual data source)\n\n\n  const departments = [{\n    id: 1,\n    name: \"HR\"\n  }, {\n    id: 2,\n    name: \"Engineering\"\n  }, {\n    id: 3,\n    name: \"Sales\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Add New Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: newSalary.depId || \"\",\n        onChange: e => handleNewChange(e, \"depId\"),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Department\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), departments.map(dep => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: dep.id,\n          children: dep.name\n        }, dep.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), addErrors.depId && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newSalary.position,\n        onChange: e => handleNewChange(e, \"position\"),\n        placeholder: \"Position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), addErrors.position && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Required\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: newSalary.salary,\n        onChange: e => handleNewChange(e, \"salary\"),\n        placeholder: \"Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), addErrors.salary && /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: \"red\"\n        },\n        children: \"Must be > 0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveNewSalary,\n        children: \"Add Salary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Department\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Salary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: salaries.map(salary => {\n          var _departments$find;\n\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: editingId === salary.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"select\", {\n                  value: editedSalary.depId || \"\",\n                  onChange: e => handleEditChange(e, \"depId\"),\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"\",\n                    children: \"Select Department\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 23\n                  }, this), departments.map(dep => /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: dep.id,\n                    children: dep.name\n                  }, dep.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 25\n                  }, this))]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 21\n                }, this), editErrors.depId && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: editedSalary.position,\n                  onChange: e => handleEditChange(e, \"position\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 21\n                }, this), editErrors.position && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  children: \"Required\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: editedSalary.salary,\n                  onChange: e => handleEditChange(e, \"salary\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 21\n                }, this), editErrors.salary && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: \"red\"\n                  },\n                  children: \"Must be > 0\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => saveSalary(salary.id),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: cancelEditing,\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: ((_departments$find = departments.find(dep => dep.id === salary.depId)) === null || _departments$find === void 0 ? void 0 : _departments$find.name) || \"Unknown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: salary.position\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: salary.salary\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => startEditing(salary),\n                  children: \"Edit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true)\n          }, salary.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SalaryList, \"/siw71U3npQwnhVN1pUW9cVvsHU=\");\n\n_c = SalaryList;\nexport default SalaryList;\n\nvar _c;\n\n$RefreshReg$(_c, \"SalaryList\");","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/MERN/frontend/src/components/Salary/SalaryList.js"],"names":["React","useState","useEffect","axios","SalaryList","salaries","setSalaries","editingId","setEditingId","editedSalary","setEditedSalary","depId","position","salary","newSalary","setNewSalary","editErrors","setEditErrors","addErrors","setAddErrors","errorMessage","setErrorMessage","fetchSalaries","response","get","data","error","message","startEditing","id","toString","handleEditChange","e","field","value","target","prev","newState","console","log","parseFloat","saveSalary","newEditErrors","trim","Object","values","some","patch","parseInt","cancelEditing","handleNewChange","saveNewSalary","newAddErrors","post","departments","name","color","map","dep","find"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst SalaryList = () => {\r\n  // State declarations\r\n  const [salaries, setSalaries] = useState([]);\r\n  const [editingId, setEditingId] = useState(null);\r\n  const [editedSalary, setEditedSalary] = useState({\r\n    depId: \"\",\r\n    position: \"\",\r\n    salary: \"\",\r\n  });\r\n  const [newSalary, setNewSalary] = useState({\r\n    depId: \"\",\r\n    position: \"\",\r\n    salary: \"\",\r\n  });\r\n  const [editErrors, setEditErrors] = useState({\r\n    depId: false,\r\n    position: false,\r\n    salary: false,\r\n  });\r\n  const [addErrors, setAddErrors] = useState({\r\n    depId: false,\r\n    position: false,\r\n    salary: false,\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Fetch salaries on mount\r\n  useEffect(() => {\r\n    fetchSalaries();\r\n  }, []);\r\n\r\n  const fetchSalaries = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:5000/salary\");\r\n      setSalaries(response.data || []);\r\n    } catch (error) {\r\n      setErrorMessage(\r\n        \"Failed to fetch salaries: \" +\r\n          (error.response?.data?.message || error.message)\r\n      );\r\n    }\r\n  };\r\n\r\n  // Editing Functions\r\n  const startEditing = (salary) => {\r\n    setEditingId(salary.id);\r\n    setEditedSalary({\r\n      depId: salary.depId?.toString() || \"\", // Convert to string for select compatibility\r\n      position: salary.position || \"\",\r\n      salary: salary.salary || \"\",\r\n    });\r\n    setEditErrors({ depId: false, position: false, salary: false });\r\n  };\r\n\r\n  const handleEditChange = (e, field) => {\r\n    const value = e.target.value;\r\n    setEditedSalary((prev) => {\r\n      const newState = { ...prev, [field]: value };\r\n      console.log(\"Edited Salary:\", newState); // Debugging\r\n      return newState;\r\n    });\r\n    setEditErrors((prev) => ({\r\n      ...prev,\r\n      [field]: field === \"salary\" ? !value || parseFloat(value) <= 0 : !value,\r\n    }));\r\n  };\r\n\r\n  const saveSalary = async (id) => {\r\n    const newEditErrors = {\r\n      depId: !editedSalary.depId || editedSalary.depId === \"\",\r\n      position: !editedSalary.position || editedSalary.position.trim() === \"\",\r\n      salary: !editedSalary.salary || parseFloat(editedSalary.salary) <= 0,\r\n    };\r\n\r\n    if (Object.values(newEditErrors).some((error) => error)) {\r\n      setEditErrors(newEditErrors);\r\n      console.log(\"Edit Validation Errors:\", newEditErrors); // Debugging\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.patch(`http://localhost:5000/salary/${id}`, {\r\n        depId: parseInt(editedSalary.depId, 10),\r\n        position: editedSalary.position,\r\n        salary: parseFloat(editedSalary.salary),\r\n      });\r\n      await fetchSalaries(); // Refresh list\r\n      setEditingId(null);\r\n      setErrorMessage(\"\"); // Clear any previous errors\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error updating salary:\",\r\n        error.response?.data || error.message\r\n      );\r\n      setErrorMessage(\r\n        \"Failed to update salary: \" +\r\n          (error.response?.data?.message || error.message)\r\n      );\r\n    }\r\n  };\r\n\r\n  const cancelEditing = () => {\r\n    setEditingId(null);\r\n    setEditedSalary({ depId: \"\", position: \"\", salary: \"\" });\r\n    setEditErrors({ depId: false, position: false, salary: false });\r\n  };\r\n\r\n  // Adding Functions\r\n  const handleNewChange = (e, field) => {\r\n    const value = e.target.value;\r\n    setNewSalary((prev) => {\r\n      const newState = { ...prev, [field]: value };\r\n      console.log(\"New Salary:\", newState); // Debugging\r\n      return newState;\r\n    });\r\n    setAddErrors((prev) => ({\r\n      ...prev,\r\n      [field]: field === \"salary\" ? !value || parseFloat(value) <= 0 : !value,\r\n    }));\r\n  };\r\n\r\n  const saveNewSalary = async () => {\r\n    const newAddErrors = {\r\n      depId: !newSalary.depId || newSalary.depId === \"\",\r\n      position: !newSalary.position || newSalary.position.trim() === \"\",\r\n      salary: !newSalary.salary || parseFloat(newSalary.salary) <= 0,\r\n    };\r\n\r\n    if (Object.values(newAddErrors).some((error) => error)) {\r\n      setAddErrors(newAddErrors);\r\n      console.log(\"Add Validation Errors:\", newAddErrors); // Debugging\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.post(\"http://localhost:5000/salary\", {\r\n        depId: parseInt(newSalary.depId, 10),\r\n        position: newSalary.position,\r\n        salary: parseFloat(newSalary.salary),\r\n      });\r\n      await fetchSalaries(); // Refresh list\r\n      setNewSalary({ depId: \"\", position: \"\", salary: \"\" });\r\n      setAddErrors({ depId: false, position: false, salary: false });\r\n      setErrorMessage(\"\"); // Clear any previous errors\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error adding salary:\",\r\n        error.response?.data || error.message\r\n      );\r\n      setErrorMessage(\r\n        \"Failed to add salary: \" +\r\n          (error.response?.data?.message || error.message)\r\n      );\r\n    }\r\n  };\r\n\r\n  // Sample department data (replace with your actual data source)\r\n  const departments = [\r\n    { id: 1, name: \"HR\" },\r\n    { id: 2, name: \"Engineering\" },\r\n    { id: 3, name: \"Sales\" },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {errorMessage && <p style={{ color: \"red\" }}>{errorMessage}</p>}\r\n\r\n      {/* Add Salary Form */}\r\n      <div>\r\n        <h3>Add New Salary</h3>\r\n        <select\r\n          value={newSalary.depId || \"\"}\r\n          onChange={(e) => handleNewChange(e, \"depId\")}\r\n        >\r\n          <option value=\"\">Select Department</option>\r\n          {departments.map((dep) => (\r\n            <option key={dep.id} value={dep.id}>\r\n              {dep.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        {addErrors.depId && <span style={{ color: \"red\" }}>Required</span>}\r\n\r\n        <input\r\n          type=\"text\"\r\n          value={newSalary.position}\r\n          onChange={(e) => handleNewChange(e, \"position\")}\r\n          placeholder=\"Position\"\r\n        />\r\n        {addErrors.position && <span style={{ color: \"red\" }}>Required</span>}\r\n\r\n        <input\r\n          type=\"number\"\r\n          value={newSalary.salary}\r\n          onChange={(e) => handleNewChange(e, \"salary\")}\r\n          placeholder=\"Salary\"\r\n        />\r\n        {addErrors.salary && <span style={{ color: \"red\" }}>Must be > 0</span>}\r\n\r\n        <button onClick={saveNewSalary}>Add Salary</button>\r\n      </div>\r\n\r\n      {/* Salary List */}\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Department</th>\r\n            <th>Position</th>\r\n            <th>Salary</th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {salaries.map((salary) => (\r\n            <tr key={salary.id}>\r\n              {editingId === salary.id ? (\r\n                <>\r\n                  <td>\r\n                    <select\r\n                      value={editedSalary.depId || \"\"}\r\n                      onChange={(e) => handleEditChange(e, \"depId\")}\r\n                    >\r\n                      <option value=\"\">Select Department</option>\r\n                      {departments.map((dep) => (\r\n                        <option key={dep.id} value={dep.id}>\r\n                          {dep.name}\r\n                        </option>\r\n                      ))}\r\n                    </select>\r\n                    {editErrors.depId && (\r\n                      <span style={{ color: \"red\" }}>Required</span>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={editedSalary.position}\r\n                      onChange={(e) => handleEditChange(e, \"position\")}\r\n                    />\r\n                    {editErrors.position && (\r\n                      <span style={{ color: \"red\" }}>Required</span>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={editedSalary.salary}\r\n                      onChange={(e) => handleEditChange(e, \"salary\")}\r\n                    />\r\n                    {editErrors.salary && (\r\n                      <span style={{ color: \"red\" }}>Must be > 0</span>\r\n                    )}\r\n                  </td>\r\n                  <td>\r\n                    <button onClick={() => saveSalary(salary.id)}>Save</button>\r\n                    <button onClick={cancelEditing}>Cancel</button>\r\n                  </td>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <td>\r\n                    {departments.find((dep) => dep.id === salary.depId)?.name ||\r\n                      \"Unknown\"}\r\n                  </td>\r\n                  <td>{salary.position}</td>\r\n                  <td>{salary.salary}</td>\r\n                  <td>\r\n                    <button onClick={() => startEditing(salary)}>Edit</button>\r\n                  </td>\r\n                </>\r\n              )}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SalaryList;\r\n"]},"metadata":{},"sourceType":"module"}