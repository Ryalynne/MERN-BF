{"ast":null,"code":"import { statsBuffer, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations } from 'motion-dom';\nimport { SubscriptionManager, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\nconst metrics = {\n  nodes: 0,\n  calculatedTargetDeltas: 0,\n  calculatedProjections: 0\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = {\n  visibility: \"hidden\"\n};\n/**\r\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\r\n * which has a noticeable difference in spring animations\r\n */\n\nconst animationTarget = 1000;\nlet id = 0;\n\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n  const {\n    latestValues\n  } = visualElement; // Record the distorting transform and then temporarily set it to 0\n\n  if (latestValues[key]) {\n    values[key] = latestValues[key];\n    visualElement.setStaticValue(key, 0);\n\n    if (sharedAnimationValues) {\n      sharedAnimationValues[key] = 0;\n    }\n  }\n}\n\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n  projectionNode.hasCheckedOptimisedAppear = true;\n  if (projectionNode.root === projectionNode) return;\n  const {\n    visualElement\n  } = projectionNode.options;\n  if (!visualElement) return;\n  const appearId = getOptimisedAppearId(visualElement);\n\n  if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n    const {\n      layout,\n      layoutId\n    } = projectionNode.options;\n    window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n  }\n\n  const {\n    parent\n  } = projectionNode;\n\n  if (parent && !parent.hasCheckedOptimisedAppear) {\n    cancelTreeOptimisedTransformAnimations(parent);\n  }\n}\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor() {\n      let latestValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\r\n       * A unique ID generated for every projection node.\r\n       */\n      this.id = id++;\n      /**\r\n       * An id that represents a unique session instigated by startUpdate.\r\n       */\n\n      this.animationId = 0;\n      /**\r\n       * A Set containing all this component's children. This is used to iterate\r\n       * through the children.\r\n       *\r\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\r\n       */\n\n      this.children = new Set();\n      /**\r\n       * Options for the node. We use this to configure what kind of layout animations\r\n       * we should perform (if any).\r\n       */\n\n      this.options = {};\n      /**\r\n       * We use this to detect when its safe to shut down part of a projection tree.\r\n       * We have to keep projecting children for scale correction and relative projection\r\n       * until all their parents stop performing layout animations.\r\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\r\n       * Flag to true if we think this layout has been changed. We can't always know this,\r\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\r\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\r\n       * and if one node is dirtied, they all are.\r\n       */\n\n      this.isLayoutDirty = false;\n      /**\r\n       * Flag to true if we think the projection calculations for this node needs\r\n       * recalculating as a result of an updated transform or layout animation.\r\n       */\n\n      this.isProjectionDirty = false;\n      /**\r\n       * Flag to true if the layout *or* transform has changed. This then gets propagated\r\n       * throughout the projection tree, forcing any element below to recalculate on the next frame.\r\n       */\n\n      this.isSharedProjectionDirty = false;\n      /**\r\n       * Flag transform dirty. This gets propagated throughout the whole tree but is only\r\n       * respected by shared nodes.\r\n       */\n\n      this.isTransformDirty = false;\n      /**\r\n       * Block layout updates for instant layout transitions throughout the tree.\r\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\r\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\r\n       * call.\r\n       */\n\n      this.isUpdating = false;\n      /**\r\n       * If this is an SVG element we currently disable projection transforms\r\n       */\n\n      this.isSVG = false;\n      /**\r\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\r\n       * its projection styles.\r\n       */\n\n      this.needsReset = false;\n      /**\r\n       * Flags whether this node should have its transform reset prior to measuring.\r\n       */\n\n      this.shouldResetTransform = false;\n      /**\r\n       * Store whether this node has been checked for optimised appear animations. As\r\n       * effects fire bottom-up, and we want to look up the tree for appear animations,\r\n       * this makes sure we only check each path once, stopping at nodes that\r\n       * have already been checked.\r\n       */\n\n      this.hasCheckedOptimisedAppear = false;\n      /**\r\n       * An object representing the calculated contextual/accumulated/tree scale.\r\n       * This will be used to scale calculcated projection transforms, as these are\r\n       * calculated in screen-space but need to be scaled for elements to layoutly\r\n       * make it to their calculated destinations.\r\n       *\r\n       * TODO: Lazy-init\r\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\r\n       *\r\n       */\n\n      this.eventHandlers = new Map();\n      this.hasTreeAnimated = false; // Note: Currently only running on root node\n\n      this.updateScheduled = false;\n\n      this.scheduleUpdate = () => this.update();\n\n      this.projectionUpdateScheduled = false;\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n      /**\r\n       * This is a multi-step process as shared nodes might be of different depths. Nodes\r\n       * are sorted by depth order, so we need to resolve the entire tree before moving to\r\n       * the next step.\r\n       */\n\n\n      this.updateProjection = () => {\n        this.projectionUpdateScheduled = false;\n        /**\r\n         * Reset debug counts. Manually resetting rather than creating a new\r\n         * object each frame.\r\n         */\n\n        if (statsBuffer.value) {\n          metrics.nodes = metrics.calculatedTargetDeltas = metrics.calculatedProjections = 0;\n        }\n\n        this.nodes.forEach(propagateDirtyNodes);\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n        this.nodes.forEach(cleanDirtyNodes);\n\n        if (statsBuffer.addProjectionMetrics) {\n          statsBuffer.addProjectionMetrics(metrics);\n        }\n      };\n      /**\r\n       * Frame calculations\r\n       */\n\n\n      this.resolvedRelativeTargetAt = 0.0;\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\r\n       * Shared layout\r\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager && subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n    /**\r\n     * Lifecycles\r\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root.hasTreeAnimated;\n      if (this.instance) return;\n      this.isSVG = isSVGElement(instance);\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.current) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      this.parent && this.parent.children.add(this);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let cancelDelay;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          cancelDelay && cancelDelay();\n          cancelDelay = delay(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n            layout: newLayout\n          } = _ref2;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\r\n           * The target layout of the element might stay the same,\r\n           * but its position relative to its parent has changed.\r\n           */\n\n          const hasTargetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout);\n          /*\r\n           * Note: Disabled to fix relative animations always triggering new\r\n           * layout animations. If this causes further issues, we can try\r\n           * a different approach to detecting relative target changes.\r\n           */\n          // || hasRelativeLayoutChanged\n\n          /**\r\n           * If the layout hasn't seemed to have changed, it might be that the\r\n           * element is visually in the same place in the document but its position\r\n           * relative to its parent has indeed changed. So here we check for that.\r\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n\n          if (this.options.layoutRoot || this.resumeFrom || hasOnlyRelativeTargetChanged || hasLayoutChanged && (hasTargetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion || this.options.layoutRoot) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\r\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\r\n             * finish it immediately. Otherwise it will be animating from a location\r\n             * that was probably never commited to screen and look like a jumpy box.\r\n             */\n            if (!hasLayoutChanged) {\n              finishAnimation(this);\n            }\n\n            if (this.isLead() && this.options.onExitComplete) {\n              this.options.onExitComplete();\n            }\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      const stack = this.getStack();\n      stack && stack.remove(this);\n      this.parent && this.parent.children.delete(this);\n      this.instance = undefined;\n      cancelFrame(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      this.nodes && this.nodes.forEach(resetSkewAndRotation);\n      this.animationId++;\n    }\n\n    getTransformTemplate() {\n      const {\n        visualElement\n      } = this.options;\n      return visualElement && visualElement.getProps().transformTemplate;\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.root.hasTreeAnimated = true;\n\n      if (this.root.isUpdateBlocked()) {\n        this.options.onExitComplete && this.options.onExitComplete();\n        return;\n      }\n      /**\r\n       * If we're running optimised appear animations then these must be\r\n       * cancelled before measuring the DOM. This is so we can measure\r\n       * the true layout of the element rather than the WAAPI animation\r\n       * which will be unaffected by the resetSkewAndRotate step.\r\n       *\r\n       * Note: This is a DOM write. Worst case scenario is this is sandwiched\r\n       * between other snapshot reads which will cause unnecessary style recalculations.\r\n       * This has to happen here though, as we don't yet know which nodes will need\r\n       * snapshots in startUpdate(), but we only want to cancel optimised animations\r\n       * if a layout animation measurement is actually going to be affected by them.\r\n       */\n\n\n      if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(this);\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        node.updateScroll(\"snapshot\");\n\n        if (node.options.layoutRoot) {\n          node.willUpdate(false);\n        }\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = this.getTransformTemplate();\n      this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }\n\n    update() {\n      this.updateScheduled = false;\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) {\n        this.nodes.forEach(clearIsLayoutDirty);\n      }\n\n      this.isUpdating = false;\n      /**\r\n       * Write\r\n       */\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\r\n       * Read ==================\r\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\r\n       * Write\r\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots();\n      /**\r\n       * Manually flush any pending updates. Ideally\r\n       * we could leave this to the following requestAnimationFrame but this seems\r\n       * to leave a flash of incorrectly styled content.\r\n       */\n\n      const now = time.now();\n      frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n      frameData.timestamp = now;\n      frameData.isProcessing = true;\n      frameSteps.update.process(frameData);\n      frameSteps.preRender.process(frameData);\n      frameSteps.render.process(frameData);\n      frameData.isProcessing = false;\n    }\n\n    didUpdate() {\n      if (!this.updateScheduled) {\n        this.updateScheduled = true;\n        microtask.read(this.scheduleUpdate);\n      }\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      if (!this.projectionUpdateScheduled) {\n        this.projectionUpdateScheduled = true;\n        frame.preRender(this.updateProjection, false, true);\n      }\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\r\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\r\n       * we manually call didUpdate to give a chance to the siblings to animate.\r\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\r\n       */\n      frame.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\r\n     * Update measurements\r\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      this.snapshot = this.measure();\n\n      if (this.snapshot && !calcLength(this.snapshot.measuredBox.x) && !calcLength(this.snapshot.measuredBox.y)) {\n        this.snapshot = undefined;\n      }\n    }\n\n    updateLayout() {\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\r\n       * When a node is mounted, it simply resumes from the prevLead's\r\n       * snapshot instead of taking a new one, but the ancestors scroll\r\n       * might have updated while the prevLead is unmounted. We need to\r\n       * update the scroll again to make sure the layout we measure is\r\n       * up to date.\r\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const prevLayout = this.layout;\n      this.layout = this.measure(false);\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.layoutBox);\n      const {\n        visualElement\n      } = this.options;\n      visualElement && visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n    }\n\n    updateScroll() {\n      let phase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"measure\";\n      let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n\n      if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {\n        needsMeasurement = false;\n      }\n\n      if (needsMeasurement) {\n        const isRoot = checkIsScrollRoot(this.instance);\n        this.scroll = {\n          animationId: this.root.animationId,\n          phase,\n          isRoot,\n          offset: measureScroll(this.instance),\n          wasRoot: this.scroll ? this.scroll.isRoot : isRoot\n        };\n      }\n    }\n\n    resetTransform() {\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = this.getTransformTemplate();\n      const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, \"\") : undefined;\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      let removeTransform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      const pageBox = this.measurePageBox();\n      let layoutBox = this.removeElementScroll(pageBox);\n      /**\r\n       * Measurements taken during the pre-render stage\r\n       * still have transforms applied so we remove them\r\n       * via calculation.\r\n       */\n\n      if (removeTransform) {\n        layoutBox = this.removeTransform(layoutBox);\n      }\n\n      roundBox(layoutBox);\n      return {\n        animationId: this.root.animationId,\n        measuredBox: pageBox,\n        layoutBox,\n        latestValues: {},\n        source: this.id\n      };\n    }\n\n    measurePageBox() {\n      var _a;\n\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox();\n      const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n\n      if (!wasInScrollRoot) {\n        // Remove viewport scroll to give page-relative coordinates\n        const {\n          scroll\n        } = this.root;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.offset.x);\n          translateAxis(box.y, scroll.offset.y);\n        }\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      var _a;\n\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n\n      if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n        return boxWithoutScroll;\n      }\n      /**\r\n       * Performance TODO: Keep a cumulative scroll offset down the tree\r\n       * rather than loop back up the path.\r\n       */\n\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\r\n           * If this is a new scroll root, we want to remove all previous scrolls\r\n           * from the viewport box.\r\n           */\n          if (scroll.wasRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.offset.x);\n          translateAxis(boxWithoutScroll.y, scroll.offset.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.offset.x,\n            y: -node.scroll.offset.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measurePageBox();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n      this.isProjectionDirty = true;\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n\n    forceRelativeParentToResolveTarget() {\n      if (!this.relativeParent) return;\n      /**\r\n       * If the parent target isn't up-to-date, force it to update.\r\n       * This is an unfortunate de-optimisation as it means any updating relative\r\n       * projection will cause all the relative parents to recalculate back\r\n       * up the tree.\r\n       */\n\n      if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {\n        this.relativeParent.resolveTargetDelta(true);\n      }\n    }\n\n    resolveTargetDelta() {\n      let forceRecalculation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      var _a;\n      /**\r\n       * Once the dirty status of nodes has been spread through the tree, we also\r\n       * need to check if we have a shared node of a different depth that has itself\r\n       * been dirtied.\r\n       */\n\n\n      const lead = this.getLead();\n      this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n      this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n      this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      /**\r\n       * We don't use transform for this step of processing so we don't\r\n       * need to check whether any nodes have changed transform.\r\n       */\n\n      const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\r\n       * If we have no layout, we can't perform projection, so early return\r\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      this.resolvedRelativeTargetAt = frameData.timestamp;\n      /**\r\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\r\n       * a relativeParent. This will allow a component to perform scale correction\r\n       * even if no animation has started.\r\n       */\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\r\n       * If we have no relative target or no target delta our target isn't valid\r\n       * for this frame.\r\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\r\n       * Lazy-init target data structure\r\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\r\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\r\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {\n        this.forceRelativeParentToResolveTarget();\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\r\n         * If we've only got a targetDelta, resolve it into a target\r\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.layoutBox);\n        } else {\n          copyBoxInto(this.target, this.layout.layoutBox);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\r\n         * If no target, use own layout as target\r\n         */\n        copyBoxInto(this.target, this.layout.layoutBox);\n      }\n      /**\r\n       * If we've been told to attempt to resolve a relative target, do so.\r\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        const relativeParent = this.getClosestProjectingParent();\n\n        if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {\n          this.relativeParent = relativeParent;\n          this.forceRelativeParentToResolveTarget();\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        } else {\n          this.relativeParent = this.relativeTarget = undefined;\n        }\n      }\n      /**\r\n       * Increase debug counter for resolved target deltas\r\n       */\n\n\n      if (statsBuffer.value) {\n        metrics.calculatedTargetDeltas++;\n      }\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {\n        return undefined;\n      }\n\n      if (this.parent.isProjecting()) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    isProjecting() {\n      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);\n    }\n\n    calcProjection() {\n      var _a;\n\n      const lead = this.getLead();\n      const isShared = Boolean(this.resumingFrom) || this !== lead;\n      let canSkip = true;\n      /**\r\n       * If this is a normal layout animation and neither this node nor its nearest projecting\r\n       * is dirty then we can't skip.\r\n       */\n\n      if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n        canSkip = false;\n      }\n      /**\r\n       * If this is a shared layout animation and this node's shared projection is dirty then\r\n       * we can't skip.\r\n       */\n\n\n      if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {\n        canSkip = false;\n      }\n      /**\r\n       * If we have resolved the target this frame we must recalculate the\r\n       * projection to ensure it visually represents the internal calculations.\r\n       */\n\n\n      if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n        canSkip = false;\n      }\n\n      if (canSkip) return;\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\r\n       * If this section of the tree isn't animating we can\r\n       * delete our target sources for the following frame.\r\n       */\n\n      this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\r\n       * Reset the corrected box with the latest values from box, as we're then going\r\n       * to perform mutative operations on it.\r\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n      /**\r\n       * Record previous tree scales before updating.\r\n       */\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      /**\r\n       * Apply all the parent deltas to this box to produce the corrected box. This\r\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n      /**\r\n       * If this layer needs to perform scale correction but doesn't have a target,\r\n       * use the layout as the target.\r\n       */\n\n      if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n        lead.target = lead.layout.layoutBox;\n        lead.targetWithTransforms = createBox();\n      }\n\n      const {\n        target\n      } = lead;\n\n      if (!target) {\n        /**\r\n         * If we don't have a target to project into, but we were previously\r\n         * projecting, we want to remove the stored transform and schedule\r\n         * a render to ensure the elements reflect the removed transform.\r\n         */\n        if (this.prevProjectionDelta) {\n          this.createProjectionDeltas();\n          this.scheduleRender();\n        }\n\n        return;\n      }\n\n      if (!this.projectionDelta || !this.prevProjectionDelta) {\n        this.createProjectionDeltas();\n      } else {\n        copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n        copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n      }\n      /**\r\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n       * to allow people to choose whether these styles are corrected based on just the\r\n       * layout reprojection or the final bounding box.\r\n       */\n\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n\n      if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n      /**\r\n       * Increase debug counter for recalculated projections\r\n       */\n\n\n      if (statsBuffer.value) {\n        metrics.calculatedProjections++;\n      }\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a;\n\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n\n      if (notifyAll) {\n        const stack = this.getStack();\n        stack && stack.scheduleRender();\n      }\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    createProjectionDeltas() {\n      this.prevProjectionDelta = createDelta();\n      this.projectionDelta = createDelta();\n      this.projectionDeltaWithTransform = createDelta();\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n\n      if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n      }\n\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const snapshotSource = snapshot ? snapshot.source : undefined;\n      const layoutSource = this.layout ? this.layout.source : undefined;\n      const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n      const stack = this.getStack();\n      const isOnlyMember = !stack || stack.members.length <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n      let prevRelativeTarget;\n\n      this.mixTargetDelta = latest => {\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {\n          calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n          /**\r\n           * If this is an unchanged relative target we can consider the\r\n           * projection not dirty.\r\n           */\n\n          if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {\n            this.isProjectionDirty = false;\n          }\n\n          if (!prevRelativeTarget) prevRelativeTarget = createBox();\n          copyBoxInto(prevRelativeTarget, this.relativeTarget);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n    }\n\n    startAnimation(options) {\n      this.notifyListeners(\"animationStart\");\n      this.currentAnimation && this.currentAnimation.stop();\n\n      if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n        this.resumingFrom.currentAnimation.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelFrame(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\r\n       * Start the animation in the next frame to have a frame with progress 0,\r\n       * where the target is the same as when the animation started, so we can\r\n       * calculate the relative positions correctly for instant transitions.\r\n       */\n\n\n      this.pendingAnimation = frame.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        activeAnimations.layout++;\n        this.currentAnimation = animateSingleValue(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            this.mixTargetDelta(latest);\n            options.onUpdate && options.onUpdate(latest);\n          },\n          onStop: () => {\n            activeAnimations.layout--;\n          },\n          onComplete: () => {\n            activeAnimations.layout--;\n            options.onComplete && options.onComplete();\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      const stack = this.getStack();\n      stack && stack.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      if (this.currentAnimation) {\n        this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\r\n       * If we're only animating position, and this element isn't the lead element,\r\n       * then instead of projecting into the lead box we instead want to calculate\r\n       * a new target that aligns the two boxes but maintains the layout shape.\r\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.layoutBox.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.layoutBox.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\r\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n       * This is the final box that we will then project into by calculating a transform delta and\r\n       * applying it to the corrected box.\r\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\r\n       * Update the delta between the corrected box and the final target box, after\r\n       * user-set transforms are applied to it. This will be used by the renderer to\r\n       * create a transform style that will reproject the element from its layout layout\r\n       * into the desired bounding box.\r\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      const config = node.options.initialPromotionConfig;\n      node.promote({\n        transition: config ? config.transition : undefined,\n        preserveFollowOpacity: config && config.shouldPreserveFollowOpacity ? config.shouldPreserveFollowOpacity(node) : undefined\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetSkewAndRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected skew or rotation values, we can early return without a forced render.\n\n      let hasDistortingTransform = false;\n      /**\r\n       * An unrolled check for rotation values. Most elements don't have any rotation and\r\n       * skipping the nested loop and new object creation is 50% faster.\r\n       */\n\n      const {\n        latestValues\n      } = visualElement;\n\n      if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {\n        hasDistortingTransform = true;\n      } // If there's no distorting values, we don't need to do any more.\n\n\n      if (!hasDistortingTransform) return;\n      const resetValues = {};\n\n      if (latestValues.z) {\n        resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n      } // Check the skew and rotate value of all axes and reset to 0\n\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n        resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n      } // Force a render of this element to apply the transform with all skews and rotations\n      // set to 0.\n\n\n      visualElement.render(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n\n        if (this.animationValues) {\n          this.animationValues[key] = resetValues[key];\n        }\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles(styleProp) {\n      var _a, _b;\n\n      if (!this.instance || this.isSVG) return undefined;\n\n      if (!this.isVisible) {\n        return hiddenVisibility;\n      }\n\n      const styles = {\n        visibility: \"\"\n      };\n      const transformTemplate = this.getTransformTemplate();\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\r\n         * If the lead component is animating, assign this either the entering/leaving\r\n         * opacity\r\n         */\n        styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\r\n         * Or we're not animating at all, set the lead component to its layout\r\n         * opacity and other components to hidden.\r\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\r\n       * Apply scale correction\r\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo,\n          isCSSVariable\n        } = scaleCorrectors[key];\n        /**\r\n         * Only apply scale correction to the value if we have an\r\n         * active projection transform. Otherwise these values become\r\n         * vulnerable to distortion if the element changes size without\r\n         * a corresponding layout animation.\r\n         */\n\n        const corrected = styles.transform === \"none\" ? valuesToRender[key] : correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          // If this is a CSS variable, set it directly on the instance.\n          // Replacing this function from creating styles to setting them\n          // would be a good place to remove per frame object creation\n          if (isCSSVariable) {\n            this.options.visualElement.renderState.vars[key] = corrected;\n          } else {\n            styles[key] = corrected;\n          }\n        }\n      }\n      /**\r\n       * Disable pointer events on follow components. This is to ensure\r\n       * that if a follow component covers a lead component it doesn't block\r\n       * pointer events on the lead.\r\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      layoutBox: layout,\n      measuredBox: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options;\n    const isShared = snapshot.source !== node.layout.source; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n        /**\r\n         * Ensure relative target gets resized and rerendererd\r\n         */\n\n        if (node.relativeTarget && !node.currentAnimation) {\n          node.isProjectionDirty = true;\n          node.relativeTarget[axis].max = node.relativeTarget[axis].min + length;\n        }\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n    const visualDelta = createDelta();\n\n    if (isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeLayoutChanged = false;\n\n    if (!node.resumeFrom) {\n      const relativeParent = node.getClosestProjectingParent();\n      /**\r\n       * If the relativeParent is itself resuming from a different element then\r\n       * the relative snapshot is not relavent\r\n       */\n\n      if (relativeParent && !relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n\n          if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n            hasRelativeLayoutChanged = true;\n          }\n\n          if (relativeParent.options.layoutRoot) {\n            node.relativeTarget = relativeLayout;\n            node.relativeTargetOrigin = relativeSnapshot;\n            node.relativeParent = relativeParent;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeLayoutChanged\n    });\n  } else if (node.isLead()) {\n    const {\n      onExitComplete\n    } = node.options;\n    onExitComplete && onExitComplete();\n  }\n  /**\r\n   * Clearing transition\r\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\r\n   * and why we need it at all\r\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction propagateDirtyNodes(node) {\n  /**\r\n   * Increase debug counter for nodes encountered this frame\r\n   */\n  if (statsBuffer.value) {\n    metrics.nodes++;\n  }\n\n  if (!node.parent) return;\n  /**\r\n   * If this node isn't projecting, propagate isProjectionDirty. It will have\r\n   * no performance impact but it will allow the next child that *is* projecting\r\n   * but *isn't* dirty to just check its parent to see if *any* ancestor needs\r\n   * correcting.\r\n   */\n\n  if (!node.isProjecting()) {\n    node.isProjectionDirty = node.parent.isProjectionDirty;\n  }\n  /**\r\n   * Propagate isSharedProjectionDirty and isTransformDirty\r\n   * throughout the whole tree. A future revision can take another look at\r\n   * this but for safety we still recalcualte shared nodes.\r\n   */\n\n\n  node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty || node.parent.isProjectionDirty || node.parent.isSharedProjectionDirty));\n  node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\n\nfunction cleanDirtyNodes(node) {\n  node.isProjectionDirty = node.isSharedProjectionDirty = node.isTransformDirty = false;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction clearIsLayoutDirty(node) {\n  node.isLayoutDirty = false;\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notify(\"BeforeLayoutMeasure\");\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n  node.isProjectionDirty = true;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetSkewAndRotation(node) {\n  node.resetSkewAndRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mixNumber(delta.translate, 0, p);\n  output.scale = mixNumber(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mixNumber(from.min, to.min, p);\n  output.max = mixNumber(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nconst userAgentContains = string => typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string);\n/**\r\n * Measured bounding boxes must be rounded in Safari and\r\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\r\n * can appear to jump.\r\n */\n\n\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\") ? Math.round : noop;\n\nfunction roundAxis(axis) {\n  // Round to the nearest .5 pixels to support subpixel layouts\n  axis.min = roundPoint(axis.min);\n  axis.max = roundPoint(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nfunction checkNodeWasScrollRoot(node) {\n  var _a;\n\n  return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"names":["statsBuffer","getValueTransition","cancelFrame","time","frameData","frameSteps","microtask","frame","activeAnimations","SubscriptionManager","noop","animateSingleValue","getOptimisedAppearId","isSVGElement","FlatTree","clamp","delay","mixNumber","resolveMotionValue","mixValues","copyBoxInto","copyAxisDeltaInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcLength","calcRelativePosition","calcRelativeBox","calcBoxDelta","isNear","removeBoxTransforms","createBox","createDelta","boxEqualsRounded","isDeltaZero","axisDeltaEquals","aspectRatio","boxEquals","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","has2DTranslate","globalProjectionState","metrics","nodes","calculatedTargetDeltas","calculatedProjections","transformAxes","hiddenVisibility","visibility","animationTarget","id","resetDistortingTransform","key","visualElement","values","sharedAnimationValues","latestValues","setStaticValue","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","root","options","appearId","window","MotionHasOptimisedAnimation","layout","layoutId","MotionCancelOptimisedAnimation","parent","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","animationId","children","Set","isTreeAnimating","isAnimationBlocked","isLayoutDirty","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","hasTreeAnimated","updateScheduled","scheduleUpdate","update","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","value","forEach","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","addProjectionMetrics","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","depth","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","mount","instance","current","cancelDelay","resizeUnblockUpdate","hasAnimatedSinceResize","finishAnimation","registerSharedNode","animate","delta","hasLayoutChanged","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","type","startAnimation","isLead","onExitComplete","unmount","willUpdate","remove","stack","getStack","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","transformTemplate","shouldNotifyListeners","node","updateScroll","prevTransformTemplateValue","updateSnapshot","updateWasBlocked","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","updateLayout","notifyLayoutUpdate","now","timestamp","isProcessing","process","preRender","render","didUpdate","read","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measure","measuredBox","alwaysMeasureLayout","prevLayout","layoutCorrected","projectionDelta","layoutBox","phase","needsMeasurement","Boolean","layoutScroll","scroll","isRoot","offset","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","removeTransform","pageBox","measurePageBox","removeElementScroll","roundBox","source","_a","box","measureViewportBox","wasInScrollRoot","some","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","lead","getLead","isShared","canSkip","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","pendingAnimation","prevTreeScaleX","prevTreeScaleY","prevProjectionDelta","createProjectionDeltas","hide","show","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","snapshotSource","layoutSource","isSharedLayoutAnimation","isOnlyMember","members","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","onStop","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","config","initialPromotionConfig","promote","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasDistortingTransform","z","rotate","rotateX","rotateY","rotateZ","skewX","skewY","resetValues","getProjectionStyles","styleProp","_b","styles","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","isCSSVariable","corrected","num","renderState","vars","resetTree","clear","measuredLayout","axis","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","Math","round","roundAxis"],"mappings":"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","sourcesContent":["import { statsBuffer, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, frame, activeAnimations } from 'motion-dom';\r\nimport { SubscriptionManager, noop } from 'motion-utils';\r\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\r\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\r\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\r\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\r\nimport { clamp } from '../../utils/clamp.mjs';\r\nimport { delay } from '../../utils/delay.mjs';\r\nimport { mixNumber } from '../../utils/mix/number.mjs';\r\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\r\nimport { mixValues } from '../animation/mix-values.mjs';\r\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\r\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\r\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\r\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\r\nimport { createBox, createDelta } from '../geometry/models.mjs';\r\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\r\nimport { NodeStack } from '../shared/stack.mjs';\r\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\r\nimport { buildProjectionTransform } from '../styles/transform.mjs';\r\nimport { eachAxis } from '../utils/each-axis.mjs';\r\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\r\nimport { globalProjectionState } from './state.mjs';\r\n\r\nconst metrics = {\r\n    nodes: 0,\r\n    calculatedTargetDeltas: 0,\r\n    calculatedProjections: 0,\r\n};\r\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\r\nconst hiddenVisibility = { visibility: \"hidden\" };\r\n/**\r\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\r\n * which has a noticeable difference in spring animations\r\n */\r\nconst animationTarget = 1000;\r\nlet id = 0;\r\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\r\n    const { latestValues } = visualElement;\r\n    // Record the distorting transform and then temporarily set it to 0\r\n    if (latestValues[key]) {\r\n        values[key] = latestValues[key];\r\n        visualElement.setStaticValue(key, 0);\r\n        if (sharedAnimationValues) {\r\n            sharedAnimationValues[key] = 0;\r\n        }\r\n    }\r\n}\r\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\r\n    projectionNode.hasCheckedOptimisedAppear = true;\r\n    if (projectionNode.root === projectionNode)\r\n        return;\r\n    const { visualElement } = projectionNode.options;\r\n    if (!visualElement)\r\n        return;\r\n    const appearId = getOptimisedAppearId(visualElement);\r\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\r\n        const { layout, layoutId } = projectionNode.options;\r\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\r\n    }\r\n    const { parent } = projectionNode;\r\n    if (parent && !parent.hasCheckedOptimisedAppear) {\r\n        cancelTreeOptimisedTransformAnimations(parent);\r\n    }\r\n}\r\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\r\n    return class ProjectionNode {\r\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\r\n            /**\r\n             * A unique ID generated for every projection node.\r\n             */\r\n            this.id = id++;\r\n            /**\r\n             * An id that represents a unique session instigated by startUpdate.\r\n             */\r\n            this.animationId = 0;\r\n            /**\r\n             * A Set containing all this component's children. This is used to iterate\r\n             * through the children.\r\n             *\r\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\r\n             */\r\n            this.children = new Set();\r\n            /**\r\n             * Options for the node. We use this to configure what kind of layout animations\r\n             * we should perform (if any).\r\n             */\r\n            this.options = {};\r\n            /**\r\n             * We use this to detect when its safe to shut down part of a projection tree.\r\n             * We have to keep projecting children for scale correction and relative projection\r\n             * until all their parents stop performing layout animations.\r\n             */\r\n            this.isTreeAnimating = false;\r\n            this.isAnimationBlocked = false;\r\n            /**\r\n             * Flag to true if we think this layout has been changed. We can't always know this,\r\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\r\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\r\n             * and if one node is dirtied, they all are.\r\n             */\r\n            this.isLayoutDirty = false;\r\n            /**\r\n             * Flag to true if we think the projection calculations for this node needs\r\n             * recalculating as a result of an updated transform or layout animation.\r\n             */\r\n            this.isProjectionDirty = false;\r\n            /**\r\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\r\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\r\n             */\r\n            this.isSharedProjectionDirty = false;\r\n            /**\r\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\r\n             * respected by shared nodes.\r\n             */\r\n            this.isTransformDirty = false;\r\n            /**\r\n             * Block layout updates for instant layout transitions throughout the tree.\r\n             */\r\n            this.updateManuallyBlocked = false;\r\n            this.updateBlockedByResize = false;\r\n            /**\r\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\r\n             * call.\r\n             */\r\n            this.isUpdating = false;\r\n            /**\r\n             * If this is an SVG element we currently disable projection transforms\r\n             */\r\n            this.isSVG = false;\r\n            /**\r\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\r\n             * its projection styles.\r\n             */\r\n            this.needsReset = false;\r\n            /**\r\n             * Flags whether this node should have its transform reset prior to measuring.\r\n             */\r\n            this.shouldResetTransform = false;\r\n            /**\r\n             * Store whether this node has been checked for optimised appear animations. As\r\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\r\n             * this makes sure we only check each path once, stopping at nodes that\r\n             * have already been checked.\r\n             */\r\n            this.hasCheckedOptimisedAppear = false;\r\n            /**\r\n             * An object representing the calculated contextual/accumulated/tree scale.\r\n             * This will be used to scale calculcated projection transforms, as these are\r\n             * calculated in screen-space but need to be scaled for elements to layoutly\r\n             * make it to their calculated destinations.\r\n             *\r\n             * TODO: Lazy-init\r\n             */\r\n            this.treeScale = { x: 1, y: 1 };\r\n            /**\r\n             *\r\n             */\r\n            this.eventHandlers = new Map();\r\n            this.hasTreeAnimated = false;\r\n            // Note: Currently only running on root node\r\n            this.updateScheduled = false;\r\n            this.scheduleUpdate = () => this.update();\r\n            this.projectionUpdateScheduled = false;\r\n            this.checkUpdateFailed = () => {\r\n                if (this.isUpdating) {\r\n                    this.isUpdating = false;\r\n                    this.clearAllSnapshots();\r\n                }\r\n            };\r\n            /**\r\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\r\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\r\n             * the next step.\r\n             */\r\n            this.updateProjection = () => {\r\n                this.projectionUpdateScheduled = false;\r\n                /**\r\n                 * Reset debug counts. Manually resetting rather than creating a new\r\n                 * object each frame.\r\n                 */\r\n                if (statsBuffer.value) {\r\n                    metrics.nodes =\r\n                        metrics.calculatedTargetDeltas =\r\n                            metrics.calculatedProjections =\r\n                                0;\r\n                }\r\n                this.nodes.forEach(propagateDirtyNodes);\r\n                this.nodes.forEach(resolveTargetDelta);\r\n                this.nodes.forEach(calcProjection);\r\n                this.nodes.forEach(cleanDirtyNodes);\r\n                if (statsBuffer.addProjectionMetrics) {\r\n                    statsBuffer.addProjectionMetrics(metrics);\r\n                }\r\n            };\r\n            /**\r\n             * Frame calculations\r\n             */\r\n            this.resolvedRelativeTargetAt = 0.0;\r\n            this.hasProjected = false;\r\n            this.isVisible = true;\r\n            this.animationProgress = 0;\r\n            /**\r\n             * Shared layout\r\n             */\r\n            // TODO Only running on root node\r\n            this.sharedNodes = new Map();\r\n            this.latestValues = latestValues;\r\n            this.root = parent ? parent.root || parent : this;\r\n            this.path = parent ? [...parent.path, parent] : [];\r\n            this.parent = parent;\r\n            this.depth = parent ? parent.depth + 1 : 0;\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                this.path[i].shouldResetTransform = true;\r\n            }\r\n            if (this.root === this)\r\n                this.nodes = new FlatTree();\r\n        }\r\n        addEventListener(name, handler) {\r\n            if (!this.eventHandlers.has(name)) {\r\n                this.eventHandlers.set(name, new SubscriptionManager());\r\n            }\r\n            return this.eventHandlers.get(name).add(handler);\r\n        }\r\n        notifyListeners(name, ...args) {\r\n            const subscriptionManager = this.eventHandlers.get(name);\r\n            subscriptionManager && subscriptionManager.notify(...args);\r\n        }\r\n        hasListeners(name) {\r\n            return this.eventHandlers.has(name);\r\n        }\r\n        /**\r\n         * Lifecycles\r\n         */\r\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\r\n            if (this.instance)\r\n                return;\r\n            this.isSVG = isSVGElement(instance);\r\n            this.instance = instance;\r\n            const { layoutId, layout, visualElement } = this.options;\r\n            if (visualElement && !visualElement.current) {\r\n                visualElement.mount(instance);\r\n            }\r\n            this.root.nodes.add(this);\r\n            this.parent && this.parent.children.add(this);\r\n            if (isLayoutDirty && (layout || layoutId)) {\r\n                this.isLayoutDirty = true;\r\n            }\r\n            if (attachResizeListener) {\r\n                let cancelDelay;\r\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\r\n                attachResizeListener(instance, () => {\r\n                    this.root.updateBlockedByResize = true;\r\n                    cancelDelay && cancelDelay();\r\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\r\n                    if (globalProjectionState.hasAnimatedSinceResize) {\r\n                        globalProjectionState.hasAnimatedSinceResize = false;\r\n                        this.nodes.forEach(finishAnimation);\r\n                    }\r\n                });\r\n            }\r\n            if (layoutId) {\r\n                this.root.registerSharedNode(layoutId, this);\r\n            }\r\n            // Only register the handler if it requires layout animation\r\n            if (this.options.animate !== false &&\r\n                visualElement &&\r\n                (layoutId || layout)) {\r\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\r\n                    if (this.isTreeAnimationBlocked()) {\r\n                        this.target = undefined;\r\n                        this.relativeTarget = undefined;\r\n                        return;\r\n                    }\r\n                    // TODO: Check here if an animation exists\r\n                    const layoutTransition = this.options.transition ||\r\n                        visualElement.getDefaultTransition() ||\r\n                        defaultLayoutTransition;\r\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\r\n                    /**\r\n                     * The target layout of the element might stay the same,\r\n                     * but its position relative to its parent has changed.\r\n                     */\r\n                    const hasTargetChanged = !this.targetLayout ||\r\n                        !boxEqualsRounded(this.targetLayout, newLayout);\r\n                    /*\r\n                     * Note: Disabled to fix relative animations always triggering new\r\n                     * layout animations. If this causes further issues, we can try\r\n                     * a different approach to detecting relative target changes.\r\n                     */\r\n                    // || hasRelativeLayoutChanged\r\n                    /**\r\n                     * If the layout hasn't seemed to have changed, it might be that the\r\n                     * element is visually in the same place in the document but its position\r\n                     * relative to its parent has indeed changed. So here we check for that.\r\n                     */\r\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\r\n                    if (this.options.layoutRoot ||\r\n                        this.resumeFrom ||\r\n                        hasOnlyRelativeTargetChanged ||\r\n                        (hasLayoutChanged &&\r\n                            (hasTargetChanged || !this.currentAnimation))) {\r\n                        if (this.resumeFrom) {\r\n                            this.resumingFrom = this.resumeFrom;\r\n                            this.resumingFrom.resumingFrom = undefined;\r\n                        }\r\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\r\n                        const animationOptions = {\r\n                            ...getValueTransition(layoutTransition, \"layout\"),\r\n                            onPlay: onLayoutAnimationStart,\r\n                            onComplete: onLayoutAnimationComplete,\r\n                        };\r\n                        if (visualElement.shouldReduceMotion ||\r\n                            this.options.layoutRoot) {\r\n                            animationOptions.delay = 0;\r\n                            animationOptions.type = false;\r\n                        }\r\n                        this.startAnimation(animationOptions);\r\n                    }\r\n                    else {\r\n                        /**\r\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\r\n                         * finish it immediately. Otherwise it will be animating from a location\r\n                         * that was probably never commited to screen and look like a jumpy box.\r\n                         */\r\n                        if (!hasLayoutChanged) {\r\n                            finishAnimation(this);\r\n                        }\r\n                        if (this.isLead() && this.options.onExitComplete) {\r\n                            this.options.onExitComplete();\r\n                        }\r\n                    }\r\n                    this.targetLayout = newLayout;\r\n                });\r\n            }\r\n        }\r\n        unmount() {\r\n            this.options.layoutId && this.willUpdate();\r\n            this.root.nodes.remove(this);\r\n            const stack = this.getStack();\r\n            stack && stack.remove(this);\r\n            this.parent && this.parent.children.delete(this);\r\n            this.instance = undefined;\r\n            cancelFrame(this.updateProjection);\r\n        }\r\n        // only on the root\r\n        blockUpdate() {\r\n            this.updateManuallyBlocked = true;\r\n        }\r\n        unblockUpdate() {\r\n            this.updateManuallyBlocked = false;\r\n        }\r\n        isUpdateBlocked() {\r\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\r\n        }\r\n        isTreeAnimationBlocked() {\r\n            return (this.isAnimationBlocked ||\r\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\r\n                false);\r\n        }\r\n        // Note: currently only running on root node\r\n        startUpdate() {\r\n            if (this.isUpdateBlocked())\r\n                return;\r\n            this.isUpdating = true;\r\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\r\n            this.animationId++;\r\n        }\r\n        getTransformTemplate() {\r\n            const { visualElement } = this.options;\r\n            return visualElement && visualElement.getProps().transformTemplate;\r\n        }\r\n        willUpdate(shouldNotifyListeners = true) {\r\n            this.root.hasTreeAnimated = true;\r\n            if (this.root.isUpdateBlocked()) {\r\n                this.options.onExitComplete && this.options.onExitComplete();\r\n                return;\r\n            }\r\n            /**\r\n             * If we're running optimised appear animations then these must be\r\n             * cancelled before measuring the DOM. This is so we can measure\r\n             * the true layout of the element rather than the WAAPI animation\r\n             * which will be unaffected by the resetSkewAndRotate step.\r\n             *\r\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\r\n             * between other snapshot reads which will cause unnecessary style recalculations.\r\n             * This has to happen here though, as we don't yet know which nodes will need\r\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\r\n             * if a layout animation measurement is actually going to be affected by them.\r\n             */\r\n            if (window.MotionCancelOptimisedAnimation &&\r\n                !this.hasCheckedOptimisedAppear) {\r\n                cancelTreeOptimisedTransformAnimations(this);\r\n            }\r\n            !this.root.isUpdating && this.root.startUpdate();\r\n            if (this.isLayoutDirty)\r\n                return;\r\n            this.isLayoutDirty = true;\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                node.shouldResetTransform = true;\r\n                node.updateScroll(\"snapshot\");\r\n                if (node.options.layoutRoot) {\r\n                    node.willUpdate(false);\r\n                }\r\n            }\r\n            const { layoutId, layout } = this.options;\r\n            if (layoutId === undefined && !layout)\r\n                return;\r\n            const transformTemplate = this.getTransformTemplate();\r\n            this.prevTransformTemplateValue = transformTemplate\r\n                ? transformTemplate(this.latestValues, \"\")\r\n                : undefined;\r\n            this.updateSnapshot();\r\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\r\n        }\r\n        update() {\r\n            this.updateScheduled = false;\r\n            const updateWasBlocked = this.isUpdateBlocked();\r\n            // When doing an instant transition, we skip the layout update,\r\n            // but should still clean up the measurements so that the next\r\n            // snapshot could be taken correctly.\r\n            if (updateWasBlocked) {\r\n                this.unblockUpdate();\r\n                this.clearAllSnapshots();\r\n                this.nodes.forEach(clearMeasurements);\r\n                return;\r\n            }\r\n            if (!this.isUpdating) {\r\n                this.nodes.forEach(clearIsLayoutDirty);\r\n            }\r\n            this.isUpdating = false;\r\n            /**\r\n             * Write\r\n             */\r\n            this.nodes.forEach(resetTransformStyle);\r\n            /**\r\n             * Read ==================\r\n             */\r\n            // Update layout measurements of updated children\r\n            this.nodes.forEach(updateLayout);\r\n            /**\r\n             * Write\r\n             */\r\n            // Notify listeners that the layout is updated\r\n            this.nodes.forEach(notifyLayoutUpdate);\r\n            this.clearAllSnapshots();\r\n            /**\r\n             * Manually flush any pending updates. Ideally\r\n             * we could leave this to the following requestAnimationFrame but this seems\r\n             * to leave a flash of incorrectly styled content.\r\n             */\r\n            const now = time.now();\r\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\r\n            frameData.timestamp = now;\r\n            frameData.isProcessing = true;\r\n            frameSteps.update.process(frameData);\r\n            frameSteps.preRender.process(frameData);\r\n            frameSteps.render.process(frameData);\r\n            frameData.isProcessing = false;\r\n        }\r\n        didUpdate() {\r\n            if (!this.updateScheduled) {\r\n                this.updateScheduled = true;\r\n                microtask.read(this.scheduleUpdate);\r\n            }\r\n        }\r\n        clearAllSnapshots() {\r\n            this.nodes.forEach(clearSnapshot);\r\n            this.sharedNodes.forEach(removeLeadSnapshots);\r\n        }\r\n        scheduleUpdateProjection() {\r\n            if (!this.projectionUpdateScheduled) {\r\n                this.projectionUpdateScheduled = true;\r\n                frame.preRender(this.updateProjection, false, true);\r\n            }\r\n        }\r\n        scheduleCheckAfterUnmount() {\r\n            /**\r\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\r\n             * we manually call didUpdate to give a chance to the siblings to animate.\r\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\r\n             */\r\n            frame.postRender(() => {\r\n                if (this.isLayoutDirty) {\r\n                    this.root.didUpdate();\r\n                }\r\n                else {\r\n                    this.root.checkUpdateFailed();\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Update measurements\r\n         */\r\n        updateSnapshot() {\r\n            if (this.snapshot || !this.instance)\r\n                return;\r\n            this.snapshot = this.measure();\r\n            if (this.snapshot &&\r\n                !calcLength(this.snapshot.measuredBox.x) &&\r\n                !calcLength(this.snapshot.measuredBox.y)) {\r\n                this.snapshot = undefined;\r\n            }\r\n        }\r\n        updateLayout() {\r\n            if (!this.instance)\r\n                return;\r\n            // TODO: Incorporate into a forwarded scroll offset\r\n            this.updateScroll();\r\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\r\n                !this.isLayoutDirty) {\r\n                return;\r\n            }\r\n            /**\r\n             * When a node is mounted, it simply resumes from the prevLead's\r\n             * snapshot instead of taking a new one, but the ancestors scroll\r\n             * might have updated while the prevLead is unmounted. We need to\r\n             * update the scroll again to make sure the layout we measure is\r\n             * up to date.\r\n             */\r\n            if (this.resumeFrom && !this.resumeFrom.instance) {\r\n                for (let i = 0; i < this.path.length; i++) {\r\n                    const node = this.path[i];\r\n                    node.updateScroll();\r\n                }\r\n            }\r\n            const prevLayout = this.layout;\r\n            this.layout = this.measure(false);\r\n            this.layoutCorrected = createBox();\r\n            this.isLayoutDirty = false;\r\n            this.projectionDelta = undefined;\r\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\r\n            const { visualElement } = this.options;\r\n            visualElement &&\r\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\r\n        }\r\n        updateScroll(phase = \"measure\") {\r\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\r\n            if (this.scroll &&\r\n                this.scroll.animationId === this.root.animationId &&\r\n                this.scroll.phase === phase) {\r\n                needsMeasurement = false;\r\n            }\r\n            if (needsMeasurement) {\r\n                const isRoot = checkIsScrollRoot(this.instance);\r\n                this.scroll = {\r\n                    animationId: this.root.animationId,\r\n                    phase,\r\n                    isRoot,\r\n                    offset: measureScroll(this.instance),\r\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\r\n                };\r\n            }\r\n        }\r\n        resetTransform() {\r\n            if (!resetTransform)\r\n                return;\r\n            const isResetRequested = this.isLayoutDirty ||\r\n                this.shouldResetTransform ||\r\n                this.options.alwaysMeasureLayout;\r\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\r\n            const transformTemplate = this.getTransformTemplate();\r\n            const transformTemplateValue = transformTemplate\r\n                ? transformTemplate(this.latestValues, \"\")\r\n                : undefined;\r\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\r\n            if (isResetRequested &&\r\n                (hasProjection ||\r\n                    hasTransform(this.latestValues) ||\r\n                    transformTemplateHasChanged)) {\r\n                resetTransform(this.instance, transformTemplateValue);\r\n                this.shouldResetTransform = false;\r\n                this.scheduleRender();\r\n            }\r\n        }\r\n        measure(removeTransform = true) {\r\n            const pageBox = this.measurePageBox();\r\n            let layoutBox = this.removeElementScroll(pageBox);\r\n            /**\r\n             * Measurements taken during the pre-render stage\r\n             * still have transforms applied so we remove them\r\n             * via calculation.\r\n             */\r\n            if (removeTransform) {\r\n                layoutBox = this.removeTransform(layoutBox);\r\n            }\r\n            roundBox(layoutBox);\r\n            return {\r\n                animationId: this.root.animationId,\r\n                measuredBox: pageBox,\r\n                layoutBox,\r\n                latestValues: {},\r\n                source: this.id,\r\n            };\r\n        }\r\n        measurePageBox() {\r\n            var _a;\r\n            const { visualElement } = this.options;\r\n            if (!visualElement)\r\n                return createBox();\r\n            const box = visualElement.measureViewportBox();\r\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\r\n            if (!wasInScrollRoot) {\r\n                // Remove viewport scroll to give page-relative coordinates\r\n                const { scroll } = this.root;\r\n                if (scroll) {\r\n                    translateAxis(box.x, scroll.offset.x);\r\n                    translateAxis(box.y, scroll.offset.y);\r\n                }\r\n            }\r\n            return box;\r\n        }\r\n        removeElementScroll(box) {\r\n            var _a;\r\n            const boxWithoutScroll = createBox();\r\n            copyBoxInto(boxWithoutScroll, box);\r\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\r\n                return boxWithoutScroll;\r\n            }\r\n            /**\r\n             * Performance TODO: Keep a cumulative scroll offset down the tree\r\n             * rather than loop back up the path.\r\n             */\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                const { scroll, options } = node;\r\n                if (node !== this.root && scroll && options.layoutScroll) {\r\n                    /**\r\n                     * If this is a new scroll root, we want to remove all previous scrolls\r\n                     * from the viewport box.\r\n                     */\r\n                    if (scroll.wasRoot) {\r\n                        copyBoxInto(boxWithoutScroll, box);\r\n                    }\r\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\r\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\r\n                }\r\n            }\r\n            return boxWithoutScroll;\r\n        }\r\n        applyTransform(box, transformOnly = false) {\r\n            const withTransforms = createBox();\r\n            copyBoxInto(withTransforms, box);\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                if (!transformOnly &&\r\n                    node.options.layoutScroll &&\r\n                    node.scroll &&\r\n                    node !== node.root) {\r\n                    transformBox(withTransforms, {\r\n                        x: -node.scroll.offset.x,\r\n                        y: -node.scroll.offset.y,\r\n                    });\r\n                }\r\n                if (!hasTransform(node.latestValues))\r\n                    continue;\r\n                transformBox(withTransforms, node.latestValues);\r\n            }\r\n            if (hasTransform(this.latestValues)) {\r\n                transformBox(withTransforms, this.latestValues);\r\n            }\r\n            return withTransforms;\r\n        }\r\n        removeTransform(box) {\r\n            const boxWithoutTransform = createBox();\r\n            copyBoxInto(boxWithoutTransform, box);\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                if (!node.instance)\r\n                    continue;\r\n                if (!hasTransform(node.latestValues))\r\n                    continue;\r\n                hasScale(node.latestValues) && node.updateSnapshot();\r\n                const sourceBox = createBox();\r\n                const nodeBox = node.measurePageBox();\r\n                copyBoxInto(sourceBox, nodeBox);\r\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\r\n            }\r\n            if (hasTransform(this.latestValues)) {\r\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\r\n            }\r\n            return boxWithoutTransform;\r\n        }\r\n        setTargetDelta(delta) {\r\n            this.targetDelta = delta;\r\n            this.root.scheduleUpdateProjection();\r\n            this.isProjectionDirty = true;\r\n        }\r\n        setOptions(options) {\r\n            this.options = {\r\n                ...this.options,\r\n                ...options,\r\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\r\n            };\r\n        }\r\n        clearMeasurements() {\r\n            this.scroll = undefined;\r\n            this.layout = undefined;\r\n            this.snapshot = undefined;\r\n            this.prevTransformTemplateValue = undefined;\r\n            this.targetDelta = undefined;\r\n            this.target = undefined;\r\n            this.isLayoutDirty = false;\r\n        }\r\n        forceRelativeParentToResolveTarget() {\r\n            if (!this.relativeParent)\r\n                return;\r\n            /**\r\n             * If the parent target isn't up-to-date, force it to update.\r\n             * This is an unfortunate de-optimisation as it means any updating relative\r\n             * projection will cause all the relative parents to recalculate back\r\n             * up the tree.\r\n             */\r\n            if (this.relativeParent.resolvedRelativeTargetAt !==\r\n                frameData.timestamp) {\r\n                this.relativeParent.resolveTargetDelta(true);\r\n            }\r\n        }\r\n        resolveTargetDelta(forceRecalculation = false) {\r\n            var _a;\r\n            /**\r\n             * Once the dirty status of nodes has been spread through the tree, we also\r\n             * need to check if we have a shared node of a different depth that has itself\r\n             * been dirtied.\r\n             */\r\n            const lead = this.getLead();\r\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\r\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\r\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\r\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\r\n            /**\r\n             * We don't use transform for this step of processing so we don't\r\n             * need to check whether any nodes have changed transform.\r\n             */\r\n            const canSkip = !(forceRecalculation ||\r\n                (isShared && this.isSharedProjectionDirty) ||\r\n                this.isProjectionDirty ||\r\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\r\n                this.attemptToResolveRelativeTarget ||\r\n                this.root.updateBlockedByResize);\r\n            if (canSkip)\r\n                return;\r\n            const { layout, layoutId } = this.options;\r\n            /**\r\n             * If we have no layout, we can't perform projection, so early return\r\n             */\r\n            if (!this.layout || !(layout || layoutId))\r\n                return;\r\n            this.resolvedRelativeTargetAt = frameData.timestamp;\r\n            /**\r\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\r\n             * a relativeParent. This will allow a component to perform scale correction\r\n             * even if no animation has started.\r\n             */\r\n            if (!this.targetDelta && !this.relativeTarget) {\r\n                const relativeParent = this.getClosestProjectingParent();\r\n                if (relativeParent &&\r\n                    relativeParent.layout &&\r\n                    this.animationProgress !== 1) {\r\n                    this.relativeParent = relativeParent;\r\n                    this.forceRelativeParentToResolveTarget();\r\n                    this.relativeTarget = createBox();\r\n                    this.relativeTargetOrigin = createBox();\r\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\r\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\r\n                }\r\n                else {\r\n                    this.relativeParent = this.relativeTarget = undefined;\r\n                }\r\n            }\r\n            /**\r\n             * If we have no relative target or no target delta our target isn't valid\r\n             * for this frame.\r\n             */\r\n            if (!this.relativeTarget && !this.targetDelta)\r\n                return;\r\n            /**\r\n             * Lazy-init target data structure\r\n             */\r\n            if (!this.target) {\r\n                this.target = createBox();\r\n                this.targetWithTransforms = createBox();\r\n            }\r\n            /**\r\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\r\n             */\r\n            if (this.relativeTarget &&\r\n                this.relativeTargetOrigin &&\r\n                this.relativeParent &&\r\n                this.relativeParent.target) {\r\n                this.forceRelativeParentToResolveTarget();\r\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\r\n                /**\r\n                 * If we've only got a targetDelta, resolve it into a target\r\n                 */\r\n            }\r\n            else if (this.targetDelta) {\r\n                if (Boolean(this.resumingFrom)) {\r\n                    // TODO: This is creating a new object every frame\r\n                    this.target = this.applyTransform(this.layout.layoutBox);\r\n                }\r\n                else {\r\n                    copyBoxInto(this.target, this.layout.layoutBox);\r\n                }\r\n                applyBoxDelta(this.target, this.targetDelta);\r\n            }\r\n            else {\r\n                /**\r\n                 * If no target, use own layout as target\r\n                 */\r\n                copyBoxInto(this.target, this.layout.layoutBox);\r\n            }\r\n            /**\r\n             * If we've been told to attempt to resolve a relative target, do so.\r\n             */\r\n            if (this.attemptToResolveRelativeTarget) {\r\n                this.attemptToResolveRelativeTarget = false;\r\n                const relativeParent = this.getClosestProjectingParent();\r\n                if (relativeParent &&\r\n                    Boolean(relativeParent.resumingFrom) ===\r\n                        Boolean(this.resumingFrom) &&\r\n                    !relativeParent.options.layoutScroll &&\r\n                    relativeParent.target &&\r\n                    this.animationProgress !== 1) {\r\n                    this.relativeParent = relativeParent;\r\n                    this.forceRelativeParentToResolveTarget();\r\n                    this.relativeTarget = createBox();\r\n                    this.relativeTargetOrigin = createBox();\r\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\r\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\r\n                }\r\n                else {\r\n                    this.relativeParent = this.relativeTarget = undefined;\r\n                }\r\n            }\r\n            /**\r\n             * Increase debug counter for resolved target deltas\r\n             */\r\n            if (statsBuffer.value) {\r\n                metrics.calculatedTargetDeltas++;\r\n            }\r\n        }\r\n        getClosestProjectingParent() {\r\n            if (!this.parent ||\r\n                hasScale(this.parent.latestValues) ||\r\n                has2DTranslate(this.parent.latestValues)) {\r\n                return undefined;\r\n            }\r\n            if (this.parent.isProjecting()) {\r\n                return this.parent;\r\n            }\r\n            else {\r\n                return this.parent.getClosestProjectingParent();\r\n            }\r\n        }\r\n        isProjecting() {\r\n            return Boolean((this.relativeTarget ||\r\n                this.targetDelta ||\r\n                this.options.layoutRoot) &&\r\n                this.layout);\r\n        }\r\n        calcProjection() {\r\n            var _a;\r\n            const lead = this.getLead();\r\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\r\n            let canSkip = true;\r\n            /**\r\n             * If this is a normal layout animation and neither this node nor its nearest projecting\r\n             * is dirty then we can't skip.\r\n             */\r\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\r\n                canSkip = false;\r\n            }\r\n            /**\r\n             * If this is a shared layout animation and this node's shared projection is dirty then\r\n             * we can't skip.\r\n             */\r\n            if (isShared &&\r\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\r\n                canSkip = false;\r\n            }\r\n            /**\r\n             * If we have resolved the target this frame we must recalculate the\r\n             * projection to ensure it visually represents the internal calculations.\r\n             */\r\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\r\n                canSkip = false;\r\n            }\r\n            if (canSkip)\r\n                return;\r\n            const { layout, layoutId } = this.options;\r\n            /**\r\n             * If this section of the tree isn't animating we can\r\n             * delete our target sources for the following frame.\r\n             */\r\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\r\n                this.currentAnimation ||\r\n                this.pendingAnimation);\r\n            if (!this.isTreeAnimating) {\r\n                this.targetDelta = this.relativeTarget = undefined;\r\n            }\r\n            if (!this.layout || !(layout || layoutId))\r\n                return;\r\n            /**\r\n             * Reset the corrected box with the latest values from box, as we're then going\r\n             * to perform mutative operations on it.\r\n             */\r\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\r\n            /**\r\n             * Record previous tree scales before updating.\r\n             */\r\n            const prevTreeScaleX = this.treeScale.x;\r\n            const prevTreeScaleY = this.treeScale.y;\r\n            /**\r\n             * Apply all the parent deltas to this box to produce the corrected box. This\r\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n             */\r\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\r\n            /**\r\n             * If this layer needs to perform scale correction but doesn't have a target,\r\n             * use the layout as the target.\r\n             */\r\n            if (lead.layout &&\r\n                !lead.target &&\r\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\r\n                lead.target = lead.layout.layoutBox;\r\n                lead.targetWithTransforms = createBox();\r\n            }\r\n            const { target } = lead;\r\n            if (!target) {\r\n                /**\r\n                 * If we don't have a target to project into, but we were previously\r\n                 * projecting, we want to remove the stored transform and schedule\r\n                 * a render to ensure the elements reflect the removed transform.\r\n                 */\r\n                if (this.prevProjectionDelta) {\r\n                    this.createProjectionDeltas();\r\n                    this.scheduleRender();\r\n                }\r\n                return;\r\n            }\r\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\r\n                this.createProjectionDeltas();\r\n            }\r\n            else {\r\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\r\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\r\n            }\r\n            /**\r\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n             * to allow people to choose whether these styles are corrected based on just the\r\n             * layout reprojection or the final bounding box.\r\n             */\r\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\r\n            if (this.treeScale.x !== prevTreeScaleX ||\r\n                this.treeScale.y !== prevTreeScaleY ||\r\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\r\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\r\n                this.hasProjected = true;\r\n                this.scheduleRender();\r\n                this.notifyListeners(\"projectionUpdate\", target);\r\n            }\r\n            /**\r\n             * Increase debug counter for recalculated projections\r\n             */\r\n            if (statsBuffer.value) {\r\n                metrics.calculatedProjections++;\r\n            }\r\n        }\r\n        hide() {\r\n            this.isVisible = false;\r\n            // TODO: Schedule render\r\n        }\r\n        show() {\r\n            this.isVisible = true;\r\n            // TODO: Schedule render\r\n        }\r\n        scheduleRender(notifyAll = true) {\r\n            var _a;\r\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\r\n            if (notifyAll) {\r\n                const stack = this.getStack();\r\n                stack && stack.scheduleRender();\r\n            }\r\n            if (this.resumingFrom && !this.resumingFrom.instance) {\r\n                this.resumingFrom = undefined;\r\n            }\r\n        }\r\n        createProjectionDeltas() {\r\n            this.prevProjectionDelta = createDelta();\r\n            this.projectionDelta = createDelta();\r\n            this.projectionDeltaWithTransform = createDelta();\r\n        }\r\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\r\n            const snapshot = this.snapshot;\r\n            const snapshotLatestValues = snapshot\r\n                ? snapshot.latestValues\r\n                : {};\r\n            const mixedValues = { ...this.latestValues };\r\n            const targetDelta = createDelta();\r\n            if (!this.relativeParent ||\r\n                !this.relativeParent.options.layoutRoot) {\r\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\r\n            }\r\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\r\n            const relativeLayout = createBox();\r\n            const snapshotSource = snapshot ? snapshot.source : undefined;\r\n            const layoutSource = this.layout ? this.layout.source : undefined;\r\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\r\n            const stack = this.getStack();\r\n            const isOnlyMember = !stack || stack.members.length <= 1;\r\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\r\n                !isOnlyMember &&\r\n                this.options.crossfade === true &&\r\n                !this.path.some(hasOpacityCrossfade));\r\n            this.animationProgress = 0;\r\n            let prevRelativeTarget;\r\n            this.mixTargetDelta = (latest) => {\r\n                const progress = latest / 1000;\r\n                mixAxisDelta(targetDelta.x, delta.x, progress);\r\n                mixAxisDelta(targetDelta.y, delta.y, progress);\r\n                this.setTargetDelta(targetDelta);\r\n                if (this.relativeTarget &&\r\n                    this.relativeTargetOrigin &&\r\n                    this.layout &&\r\n                    this.relativeParent &&\r\n                    this.relativeParent.layout) {\r\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\r\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\r\n                    /**\r\n                     * If this is an unchanged relative target we can consider the\r\n                     * projection not dirty.\r\n                     */\r\n                    if (prevRelativeTarget &&\r\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\r\n                        this.isProjectionDirty = false;\r\n                    }\r\n                    if (!prevRelativeTarget)\r\n                        prevRelativeTarget = createBox();\r\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\r\n                }\r\n                if (isSharedLayoutAnimation) {\r\n                    this.animationValues = mixedValues;\r\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\r\n                }\r\n                this.root.scheduleUpdateProjection();\r\n                this.scheduleRender();\r\n                this.animationProgress = progress;\r\n            };\r\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\r\n        }\r\n        startAnimation(options) {\r\n            this.notifyListeners(\"animationStart\");\r\n            this.currentAnimation && this.currentAnimation.stop();\r\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\r\n                this.resumingFrom.currentAnimation.stop();\r\n            }\r\n            if (this.pendingAnimation) {\r\n                cancelFrame(this.pendingAnimation);\r\n                this.pendingAnimation = undefined;\r\n            }\r\n            /**\r\n             * Start the animation in the next frame to have a frame with progress 0,\r\n             * where the target is the same as when the animation started, so we can\r\n             * calculate the relative positions correctly for instant transitions.\r\n             */\r\n            this.pendingAnimation = frame.update(() => {\r\n                globalProjectionState.hasAnimatedSinceResize = true;\r\n                activeAnimations.layout++;\r\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\r\n                    ...options,\r\n                    onUpdate: (latest) => {\r\n                        this.mixTargetDelta(latest);\r\n                        options.onUpdate && options.onUpdate(latest);\r\n                    },\r\n                    onStop: () => {\r\n                        activeAnimations.layout--;\r\n                    },\r\n                    onComplete: () => {\r\n                        activeAnimations.layout--;\r\n                        options.onComplete && options.onComplete();\r\n                        this.completeAnimation();\r\n                    },\r\n                });\r\n                if (this.resumingFrom) {\r\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\r\n                }\r\n                this.pendingAnimation = undefined;\r\n            });\r\n        }\r\n        completeAnimation() {\r\n            if (this.resumingFrom) {\r\n                this.resumingFrom.currentAnimation = undefined;\r\n                this.resumingFrom.preserveOpacity = undefined;\r\n            }\r\n            const stack = this.getStack();\r\n            stack && stack.exitAnimationComplete();\r\n            this.resumingFrom =\r\n                this.currentAnimation =\r\n                    this.animationValues =\r\n                        undefined;\r\n            this.notifyListeners(\"animationComplete\");\r\n        }\r\n        finishAnimation() {\r\n            if (this.currentAnimation) {\r\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\r\n                this.currentAnimation.stop();\r\n            }\r\n            this.completeAnimation();\r\n        }\r\n        applyTransformsToTarget() {\r\n            const lead = this.getLead();\r\n            let { targetWithTransforms, target, layout, latestValues } = lead;\r\n            if (!targetWithTransforms || !target || !layout)\r\n                return;\r\n            /**\r\n             * If we're only animating position, and this element isn't the lead element,\r\n             * then instead of projecting into the lead box we instead want to calculate\r\n             * a new target that aligns the two boxes but maintains the layout shape.\r\n             */\r\n            if (this !== lead &&\r\n                this.layout &&\r\n                layout &&\r\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\r\n                target = this.target || createBox();\r\n                const xLength = calcLength(this.layout.layoutBox.x);\r\n                target.x.min = lead.target.x.min;\r\n                target.x.max = target.x.min + xLength;\r\n                const yLength = calcLength(this.layout.layoutBox.y);\r\n                target.y.min = lead.target.y.min;\r\n                target.y.max = target.y.min + yLength;\r\n            }\r\n            copyBoxInto(targetWithTransforms, target);\r\n            /**\r\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n             * This is the final box that we will then project into by calculating a transform delta and\r\n             * applying it to the corrected box.\r\n             */\r\n            transformBox(targetWithTransforms, latestValues);\r\n            /**\r\n             * Update the delta between the corrected box and the final target box, after\r\n             * user-set transforms are applied to it. This will be used by the renderer to\r\n             * create a transform style that will reproject the element from its layout layout\r\n             * into the desired bounding box.\r\n             */\r\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\r\n        }\r\n        registerSharedNode(layoutId, node) {\r\n            if (!this.sharedNodes.has(layoutId)) {\r\n                this.sharedNodes.set(layoutId, new NodeStack());\r\n            }\r\n            const stack = this.sharedNodes.get(layoutId);\r\n            stack.add(node);\r\n            const config = node.options.initialPromotionConfig;\r\n            node.promote({\r\n                transition: config ? config.transition : undefined,\r\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\r\n                    ? config.shouldPreserveFollowOpacity(node)\r\n                    : undefined,\r\n            });\r\n        }\r\n        isLead() {\r\n            const stack = this.getStack();\r\n            return stack ? stack.lead === this : true;\r\n        }\r\n        getLead() {\r\n            var _a;\r\n            const { layoutId } = this.options;\r\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\r\n        }\r\n        getPrevLead() {\r\n            var _a;\r\n            const { layoutId } = this.options;\r\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\r\n        }\r\n        getStack() {\r\n            const { layoutId } = this.options;\r\n            if (layoutId)\r\n                return this.root.sharedNodes.get(layoutId);\r\n        }\r\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\r\n            const stack = this.getStack();\r\n            if (stack)\r\n                stack.promote(this, preserveFollowOpacity);\r\n            if (needsReset) {\r\n                this.projectionDelta = undefined;\r\n                this.needsReset = true;\r\n            }\r\n            if (transition)\r\n                this.setOptions({ transition });\r\n        }\r\n        relegate() {\r\n            const stack = this.getStack();\r\n            if (stack) {\r\n                return stack.relegate(this);\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        resetSkewAndRotation() {\r\n            const { visualElement } = this.options;\r\n            if (!visualElement)\r\n                return;\r\n            // If there's no detected skew or rotation values, we can early return without a forced render.\r\n            let hasDistortingTransform = false;\r\n            /**\r\n             * An unrolled check for rotation values. Most elements don't have any rotation and\r\n             * skipping the nested loop and new object creation is 50% faster.\r\n             */\r\n            const { latestValues } = visualElement;\r\n            if (latestValues.z ||\r\n                latestValues.rotate ||\r\n                latestValues.rotateX ||\r\n                latestValues.rotateY ||\r\n                latestValues.rotateZ ||\r\n                latestValues.skewX ||\r\n                latestValues.skewY) {\r\n                hasDistortingTransform = true;\r\n            }\r\n            // If there's no distorting values, we don't need to do any more.\r\n            if (!hasDistortingTransform)\r\n                return;\r\n            const resetValues = {};\r\n            if (latestValues.z) {\r\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\r\n            }\r\n            // Check the skew and rotate value of all axes and reset to 0\r\n            for (let i = 0; i < transformAxes.length; i++) {\r\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\r\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\r\n            }\r\n            // Force a render of this element to apply the transform with all skews and rotations\r\n            // set to 0.\r\n            visualElement.render();\r\n            // Put back all the values we reset\r\n            for (const key in resetValues) {\r\n                visualElement.setStaticValue(key, resetValues[key]);\r\n                if (this.animationValues) {\r\n                    this.animationValues[key] = resetValues[key];\r\n                }\r\n            }\r\n            // Schedule a render for the next frame. This ensures we won't visually\r\n            // see the element with the reset rotate value applied.\r\n            visualElement.scheduleRender();\r\n        }\r\n        getProjectionStyles(styleProp) {\r\n            var _a, _b;\r\n            if (!this.instance || this.isSVG)\r\n                return undefined;\r\n            if (!this.isVisible) {\r\n                return hiddenVisibility;\r\n            }\r\n            const styles = {\r\n                visibility: \"\",\r\n            };\r\n            const transformTemplate = this.getTransformTemplate();\r\n            if (this.needsReset) {\r\n                this.needsReset = false;\r\n                styles.opacity = \"\";\r\n                styles.pointerEvents =\r\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\r\n                styles.transform = transformTemplate\r\n                    ? transformTemplate(this.latestValues, \"\")\r\n                    : \"none\";\r\n                return styles;\r\n            }\r\n            const lead = this.getLead();\r\n            if (!this.projectionDelta || !this.layout || !lead.target) {\r\n                const emptyStyles = {};\r\n                if (this.options.layoutId) {\r\n                    emptyStyles.opacity =\r\n                        this.latestValues.opacity !== undefined\r\n                            ? this.latestValues.opacity\r\n                            : 1;\r\n                    emptyStyles.pointerEvents =\r\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\r\n                }\r\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\r\n                    emptyStyles.transform = transformTemplate\r\n                        ? transformTemplate({}, \"\")\r\n                        : \"none\";\r\n                    this.hasProjected = false;\r\n                }\r\n                return emptyStyles;\r\n            }\r\n            const valuesToRender = lead.animationValues || lead.latestValues;\r\n            this.applyTransformsToTarget();\r\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\r\n            if (transformTemplate) {\r\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\r\n            }\r\n            const { x, y } = this.projectionDelta;\r\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\r\n            if (lead.animationValues) {\r\n                /**\r\n                 * If the lead component is animating, assign this either the entering/leaving\r\n                 * opacity\r\n                 */\r\n                styles.opacity =\r\n                    lead === this\r\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\r\n                        : this.preserveOpacity\r\n                            ? this.latestValues.opacity\r\n                            : valuesToRender.opacityExit;\r\n            }\r\n            else {\r\n                /**\r\n                 * Or we're not animating at all, set the lead component to its layout\r\n                 * opacity and other components to hidden.\r\n                 */\r\n                styles.opacity =\r\n                    lead === this\r\n                        ? valuesToRender.opacity !== undefined\r\n                            ? valuesToRender.opacity\r\n                            : \"\"\r\n                        : valuesToRender.opacityExit !== undefined\r\n                            ? valuesToRender.opacityExit\r\n                            : 0;\r\n            }\r\n            /**\r\n             * Apply scale correction\r\n             */\r\n            for (const key in scaleCorrectors) {\r\n                if (valuesToRender[key] === undefined)\r\n                    continue;\r\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\r\n                /**\r\n                 * Only apply scale correction to the value if we have an\r\n                 * active projection transform. Otherwise these values become\r\n                 * vulnerable to distortion if the element changes size without\r\n                 * a corresponding layout animation.\r\n                 */\r\n                const corrected = styles.transform === \"none\"\r\n                    ? valuesToRender[key]\r\n                    : correct(valuesToRender[key], lead);\r\n                if (applyTo) {\r\n                    const num = applyTo.length;\r\n                    for (let i = 0; i < num; i++) {\r\n                        styles[applyTo[i]] = corrected;\r\n                    }\r\n                }\r\n                else {\r\n                    // If this is a CSS variable, set it directly on the instance.\r\n                    // Replacing this function from creating styles to setting them\r\n                    // would be a good place to remove per frame object creation\r\n                    if (isCSSVariable) {\r\n                        this.options.visualElement.renderState.vars[key] = corrected;\r\n                    }\r\n                    else {\r\n                        styles[key] = corrected;\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * Disable pointer events on follow components. This is to ensure\r\n             * that if a follow component covers a lead component it doesn't block\r\n             * pointer events on the lead.\r\n             */\r\n            if (this.options.layoutId) {\r\n                styles.pointerEvents =\r\n                    lead === this\r\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\r\n                        : \"none\";\r\n            }\r\n            return styles;\r\n        }\r\n        clearSnapshot() {\r\n            this.resumeFrom = this.snapshot = undefined;\r\n        }\r\n        // Only run on root\r\n        resetTree() {\r\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\r\n            this.root.nodes.forEach(clearMeasurements);\r\n            this.root.sharedNodes.clear();\r\n        }\r\n    };\r\n}\r\nfunction updateLayout(node) {\r\n    node.updateLayout();\r\n}\r\nfunction notifyLayoutUpdate(node) {\r\n    var _a;\r\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\r\n    if (node.isLead() &&\r\n        node.layout &&\r\n        snapshot &&\r\n        node.hasListeners(\"didUpdate\")) {\r\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\r\n        const { animationType } = node.options;\r\n        const isShared = snapshot.source !== node.layout.source;\r\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\r\n        // animations for instance if layout=\"size\" and an element has only changed position\r\n        if (animationType === \"size\") {\r\n            eachAxis((axis) => {\r\n                const axisSnapshot = isShared\r\n                    ? snapshot.measuredBox[axis]\r\n                    : snapshot.layoutBox[axis];\r\n                const length = calcLength(axisSnapshot);\r\n                axisSnapshot.min = layout[axis].min;\r\n                axisSnapshot.max = axisSnapshot.min + length;\r\n            });\r\n        }\r\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\r\n            eachAxis((axis) => {\r\n                const axisSnapshot = isShared\r\n                    ? snapshot.measuredBox[axis]\r\n                    : snapshot.layoutBox[axis];\r\n                const length = calcLength(layout[axis]);\r\n                axisSnapshot.max = axisSnapshot.min + length;\r\n                /**\r\n                 * Ensure relative target gets resized and rerendererd\r\n                 */\r\n                if (node.relativeTarget && !node.currentAnimation) {\r\n                    node.isProjectionDirty = true;\r\n                    node.relativeTarget[axis].max =\r\n                        node.relativeTarget[axis].min + length;\r\n                }\r\n            });\r\n        }\r\n        const layoutDelta = createDelta();\r\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\r\n        const visualDelta = createDelta();\r\n        if (isShared) {\r\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\r\n        }\r\n        else {\r\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\r\n        }\r\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\r\n        let hasRelativeLayoutChanged = false;\r\n        if (!node.resumeFrom) {\r\n            const relativeParent = node.getClosestProjectingParent();\r\n            /**\r\n             * If the relativeParent is itself resuming from a different element then\r\n             * the relative snapshot is not relavent\r\n             */\r\n            if (relativeParent && !relativeParent.resumeFrom) {\r\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\r\n                if (parentSnapshot && parentLayout) {\r\n                    const relativeSnapshot = createBox();\r\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\r\n                    const relativeLayout = createBox();\r\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\r\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\r\n                        hasRelativeLayoutChanged = true;\r\n                    }\r\n                    if (relativeParent.options.layoutRoot) {\r\n                        node.relativeTarget = relativeLayout;\r\n                        node.relativeTargetOrigin = relativeSnapshot;\r\n                        node.relativeParent = relativeParent;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        node.notifyListeners(\"didUpdate\", {\r\n            layout,\r\n            snapshot,\r\n            delta: visualDelta,\r\n            layoutDelta,\r\n            hasLayoutChanged,\r\n            hasRelativeLayoutChanged,\r\n        });\r\n    }\r\n    else if (node.isLead()) {\r\n        const { onExitComplete } = node.options;\r\n        onExitComplete && onExitComplete();\r\n    }\r\n    /**\r\n     * Clearing transition\r\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\r\n     * and why we need it at all\r\n     */\r\n    node.options.transition = undefined;\r\n}\r\nfunction propagateDirtyNodes(node) {\r\n    /**\r\n     * Increase debug counter for nodes encountered this frame\r\n     */\r\n    if (statsBuffer.value) {\r\n        metrics.nodes++;\r\n    }\r\n    if (!node.parent)\r\n        return;\r\n    /**\r\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\r\n     * no performance impact but it will allow the next child that *is* projecting\r\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\r\n     * correcting.\r\n     */\r\n    if (!node.isProjecting()) {\r\n        node.isProjectionDirty = node.parent.isProjectionDirty;\r\n    }\r\n    /**\r\n     * Propagate isSharedProjectionDirty and isTransformDirty\r\n     * throughout the whole tree. A future revision can take another look at\r\n     * this but for safety we still recalcualte shared nodes.\r\n     */\r\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\r\n        node.parent.isProjectionDirty ||\r\n        node.parent.isSharedProjectionDirty));\r\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\r\n}\r\nfunction cleanDirtyNodes(node) {\r\n    node.isProjectionDirty =\r\n        node.isSharedProjectionDirty =\r\n            node.isTransformDirty =\r\n                false;\r\n}\r\nfunction clearSnapshot(node) {\r\n    node.clearSnapshot();\r\n}\r\nfunction clearMeasurements(node) {\r\n    node.clearMeasurements();\r\n}\r\nfunction clearIsLayoutDirty(node) {\r\n    node.isLayoutDirty = false;\r\n}\r\nfunction resetTransformStyle(node) {\r\n    const { visualElement } = node.options;\r\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\r\n        visualElement.notify(\"BeforeLayoutMeasure\");\r\n    }\r\n    node.resetTransform();\r\n}\r\nfunction finishAnimation(node) {\r\n    node.finishAnimation();\r\n    node.targetDelta = node.relativeTarget = node.target = undefined;\r\n    node.isProjectionDirty = true;\r\n}\r\nfunction resolveTargetDelta(node) {\r\n    node.resolveTargetDelta();\r\n}\r\nfunction calcProjection(node) {\r\n    node.calcProjection();\r\n}\r\nfunction resetSkewAndRotation(node) {\r\n    node.resetSkewAndRotation();\r\n}\r\nfunction removeLeadSnapshots(stack) {\r\n    stack.removeLeadSnapshot();\r\n}\r\nfunction mixAxisDelta(output, delta, p) {\r\n    output.translate = mixNumber(delta.translate, 0, p);\r\n    output.scale = mixNumber(delta.scale, 1, p);\r\n    output.origin = delta.origin;\r\n    output.originPoint = delta.originPoint;\r\n}\r\nfunction mixAxis(output, from, to, p) {\r\n    output.min = mixNumber(from.min, to.min, p);\r\n    output.max = mixNumber(from.max, to.max, p);\r\n}\r\nfunction mixBox(output, from, to, p) {\r\n    mixAxis(output.x, from.x, to.x, p);\r\n    mixAxis(output.y, from.y, to.y, p);\r\n}\r\nfunction hasOpacityCrossfade(node) {\r\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\r\n}\r\nconst defaultLayoutTransition = {\r\n    duration: 0.45,\r\n    ease: [0.4, 0, 0.1, 1],\r\n};\r\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\r\n    navigator.userAgent &&\r\n    navigator.userAgent.toLowerCase().includes(string);\r\n/**\r\n * Measured bounding boxes must be rounded in Safari and\r\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\r\n * can appear to jump.\r\n */\r\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\r\n    ? Math.round\r\n    : noop;\r\nfunction roundAxis(axis) {\r\n    // Round to the nearest .5 pixels to support subpixel layouts\r\n    axis.min = roundPoint(axis.min);\r\n    axis.max = roundPoint(axis.max);\r\n}\r\nfunction roundBox(box) {\r\n    roundAxis(box.x);\r\n    roundAxis(box.y);\r\n}\r\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\r\n    return (animationType === \"position\" ||\r\n        (animationType === \"preserve-aspect\" &&\r\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\r\n}\r\nfunction checkNodeWasScrollRoot(node) {\r\n    var _a;\r\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\r\n}\r\n\r\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\r\n"]},"metadata":{},"sourceType":"module"}