{"ast":null,"code":"import { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { transformProps } from './utils/keys-transform.mjs';\nimport { readTransformValue } from './utils/parse-transform.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n  return window.getComputedStyle(element);\n}\n\nclass HTMLVisualElement extends DOMVisualElement {\n  constructor() {\n    super(...arguments);\n    this.type = \"html\";\n    this.renderInstance = renderHTML;\n  }\n\n  readValueFromInstance(instance, key) {\n    if (transformProps.has(key)) {\n      return readTransformValue(instance, key);\n    } else {\n      const computedStyle = getComputedStyle(instance);\n      const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;\n      return typeof value === \"string\" ? value.trim() : value;\n    }\n  }\n\n  measureInstanceViewportBox(instance, _ref) {\n    let {\n      transformPagePoint\n    } = _ref;\n    return measureViewportBox(instance, transformPagePoint);\n  }\n\n  build(renderState, latestValues, props) {\n    buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n  }\n\n  scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n  }\n\n}\n\nexport { HTMLVisualElement, getComputedStyle };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs"],"names":["measureViewportBox","DOMVisualElement","isCSSVariableName","buildHTMLStyles","transformProps","readTransformValue","renderHTML","scrapeMotionValuesFromProps","getComputedStyle","element","window","HTMLVisualElement","constructor","arguments","type","renderInstance","readValueFromInstance","instance","key","has","computedStyle","value","getPropertyValue","trim","measureInstanceViewportBox","transformPagePoint","build","renderState","latestValues","props","transformTemplate","prevProps","visualElement"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,oCAAnC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;;AAEA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAOC,MAAM,CAACF,gBAAP,CAAwBC,OAAxB,CAAP;AACH;;AACD,MAAME,iBAAN,SAAgCV,gBAAhC,CAAiD;AAC7CW,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKC,cAAL,GAAsBT,UAAtB;AACH;;AACDU,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACjC,QAAId,cAAc,CAACe,GAAf,CAAmBD,GAAnB,CAAJ,EAA6B;AACzB,aAAOb,kBAAkB,CAACY,QAAD,EAAWC,GAAX,CAAzB;AACH,KAFD,MAGK;AACD,YAAME,aAAa,GAAGZ,gBAAgB,CAACS,QAAD,CAAtC;AACA,YAAMI,KAAK,GAAG,CAACnB,iBAAiB,CAACgB,GAAD,CAAjB,GACTE,aAAa,CAACE,gBAAd,CAA+BJ,GAA/B,CADS,GAETE,aAAa,CAACF,GAAD,CAFL,KAEe,CAF7B;AAGA,aAAO,OAAOG,KAAP,KAAiB,QAAjB,GAA4BA,KAAK,CAACE,IAAN,EAA5B,GAA2CF,KAAlD;AACH;AACJ;;AACDG,EAAAA,0BAA0B,CAACP,QAAD,QAAmC;AAAA,QAAxB;AAAEQ,MAAAA;AAAF,KAAwB;AACzD,WAAOzB,kBAAkB,CAACiB,QAAD,EAAWQ,kBAAX,CAAzB;AACH;;AACDC,EAAAA,KAAK,CAACC,WAAD,EAAcC,YAAd,EAA4BC,KAA5B,EAAmC;AACpC1B,IAAAA,eAAe,CAACwB,WAAD,EAAcC,YAAd,EAA4BC,KAAK,CAACC,iBAAlC,CAAf;AACH;;AACDvB,EAAAA,2BAA2B,CAACsB,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,EAAkC;AACzD,WAAOzB,2BAA2B,CAACsB,KAAD,EAAQE,SAAR,EAAmBC,aAAnB,CAAlC;AACH;;AA1B4C;;AA6BjD,SAASrB,iBAAT,EAA4BH,gBAA5B","sourcesContent":["import { measureViewportBox } from '../../projection/utils/measure.mjs';\r\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\r\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\r\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\r\nimport { transformProps } from './utils/keys-transform.mjs';\r\nimport { readTransformValue } from './utils/parse-transform.mjs';\r\nimport { renderHTML } from './utils/render.mjs';\r\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\r\n\r\nfunction getComputedStyle(element) {\r\n    return window.getComputedStyle(element);\r\n}\r\nclass HTMLVisualElement extends DOMVisualElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.type = \"html\";\r\n        this.renderInstance = renderHTML;\r\n    }\r\n    readValueFromInstance(instance, key) {\r\n        if (transformProps.has(key)) {\r\n            return readTransformValue(instance, key);\r\n        }\r\n        else {\r\n            const computedStyle = getComputedStyle(instance);\r\n            const value = (isCSSVariableName(key)\r\n                ? computedStyle.getPropertyValue(key)\r\n                : computedStyle[key]) || 0;\r\n            return typeof value === \"string\" ? value.trim() : value;\r\n        }\r\n    }\r\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\r\n        return measureViewportBox(instance, transformPagePoint);\r\n    }\r\n    build(renderState, latestValues, props) {\r\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\r\n    }\r\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\r\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\r\n    }\r\n}\r\n\r\nexport { HTMLVisualElement, getComputedStyle };\r\n"]},"metadata":{},"sourceType":"module"}