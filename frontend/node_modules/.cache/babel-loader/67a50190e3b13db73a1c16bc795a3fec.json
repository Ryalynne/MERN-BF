{"ast":null,"code":"/**\r\n * Applies a function to the value at the given index of an array\r\n *\r\n * @param index\r\n * @param fn\r\n * @param collection\r\n * @returns Copy of the array with the element at the given index replaced with the result of the function application.\r\n */\nconst adjust = (index, fn, collection) => {\n  if (index >= 0 && index >= collection.length) return collection;\n  if (index < 0 && Math.abs(index) > collection.length) return collection;\n  const i = index < 0 ? collection.length + index : index;\n  return Object.assign([], collection, {\n    [i]: fn(collection[i])\n  });\n};\n/* eslint-disable no-await-in-loop */\n\n/**\r\n * Performs right-to-left function composition with async functions support\r\n *\r\n * @param fns - Functions\r\n * @returns Composed function\r\n */\n\n\nconst asyncCompose = function () {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return async function (value) {\n    let result = value;\n    const reversedFns = fns.slice().reverse();\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    for (let i = 0; i < reversedFns.length; i += 1) {\n      const fn = reversedFns[i];\n      result = await fn(result, ...args);\n    }\n\n    return result;\n  };\n};\n/**\r\n * Capitalize first letter of each word\r\n *\r\n * @param value - Any string\r\n * @returns Capitalized string\r\n */\n\n\nconst capitalize = value => {\n  if (!value) return value;\n  return value.replace(/(^|\\s)\\S/g, l => l.toUpperCase());\n};\n/**\r\n * Casts value to array\r\n *\r\n * @template T - The type of the value.\r\n * @param value - The value to cast into an array.\r\n * @returns An array containing the given value.\r\n */\n\n\nconst castArray = value => {\n  return Array.isArray(value) ? value : [value];\n};\n/**\r\n * Performs right-to-left function composition\r\n *\r\n * @param fns - Functions\r\n * @returns Composed function\r\n */\n\n\nconst compose = function () {\n  for (var _len3 = arguments.length, fns = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    fns[_key3] = arguments[_key3];\n  }\n\n  return function (value) {\n    let result = value;\n    const reversedFns = fns.slice().reverse();\n\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    for (let i = 0; i < reversedFns.length; i += 1) {\n      const fn = reversedFns[i];\n      result = fn(result, ...args);\n    }\n\n    return result;\n  };\n};\n/**\r\n * Drops the last element from an array.\r\n *\r\n * @template T\r\n * @param  array - The array to drop the last element from\r\n * @returns - The new array with the last element dropped\r\n */\n\n\nconst dropLast = array => array.slice(0, array.length - 1);\n/**\r\n * Applies a set of transformations to an object and returns a new object with the transformed values.\r\n *\r\n * @template T\r\n * @param transformations - The transformations to apply.\r\n * @param object - The object to transform.\r\n * @returns The transformed object.\r\n */\n\n\nfunction evolve(transformations, object) {\n  const result = {};\n  const keys = Object.keys(object);\n\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    const transformation = transformations[key];\n\n    if (typeof transformation === 'function') {\n      result[key] = transformation(object[key]);\n    } else {\n      result[key] = object[key];\n    }\n  }\n\n  return result;\n}\n/**\r\n * Checks if a value is null or undefined.\r\n *\r\n * @template T - The type of the value.\r\n * @param value - The value to check\r\n * @returns True if the value is null or undefined, false otherwise\r\n */\n\n\nconst isNil = value => value === null || value === undefined;\n/**\r\n * Retrieves the value at a given path from an object.\r\n *\r\n * @param target - The object to retrieve the value from.\r\n * @param path - The path of the value to retrieve.\r\n * @param defaultValue - The default value to return if the path does not exist.\r\n * @returns The value at the given path, or the default value if the path does not exist.\r\n */\n\n\nconst get = (target, path, defaultValue) => {\n  if (isNil(target)) return defaultValue;\n\n  const _path = castArray(path);\n\n  let result = target;\n\n  for (let i = 0; i < _path.length; i += 1) {\n    if (isNil(result)) return undefined;\n    result = result[_path[i]];\n  }\n\n  return isNil(result) ? defaultValue : result;\n};\n\nfunction last(value) {\n  return value === '' ? '' : value[value.length - 1];\n}\n/**\r\n * Maps over the values of an object and applies a function to each value.\r\n *\r\n * @param object - The object to map over\r\n * @param fn - The function to apply to each value\r\n * @returns A new object with the mapped values\r\n */\n\n\nconst mapValues = (object, fn) => {\n  const entries = Object.entries(object);\n  const acc = {};\n  return entries.reduce((acc, _ref, index) => {\n    let [key, value] = _ref;\n    acc[key] = fn(value, key, index);\n    return acc;\n  }, acc);\n};\n\nconst isPercent = value => /((-)?\\d+\\.?\\d*)%/g.exec(`${value}`);\n/**\r\n * Get percentage value of input\r\n *\r\n * @param value\r\n * @returns Percent value (if matches)\r\n */\n\n\nconst matchPercent = value => {\n  const match = isPercent(value);\n\n  if (match) {\n    const f = parseFloat(match[1]);\n    const percent = f / 100;\n    return {\n      percent,\n      value: f\n    };\n  }\n\n  return null;\n};\n/**\r\n * Creates a new object by omitting specified keys from the original object.\r\n *\r\n * @param keys - The key or keys to omit\r\n * @param object - The original object\r\n * @returns The new object without the omitted keys\r\n */\n\n\nconst omit = (keys, object) => {\n  const _keys = castArray(keys);\n\n  const copy = Object.assign({}, object);\n\n  _keys.forEach(key => {\n    delete copy[key];\n  });\n\n  return copy;\n};\n/**\r\n * Picks the specified keys from an object and returns a new object with only those keys.\r\n *\r\n * @param keys - The keys to pick from the object\r\n * @param object - The object to pick the keys from\r\n * @returns A new object with only the picked keys\r\n */\n\n\nconst pick = (keys, obj) => {\n  const result = {};\n\n  for (let i = 0; i < keys.length; i += 1) {\n    const key = keys[i];\n    if (key in obj) result[key] = obj[key];\n  }\n\n  return result;\n};\n/**\r\n * Repeats an element a specified number of times.\r\n *\r\n * @template T\r\n * @param element - Element to be repeated\r\n * @param length - Number of times to repeat element\r\n * @returns Repeated elements\r\n */\n\n\nconst repeat = function (element) {\n  let length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const result = new Array(length);\n\n  for (let i = 0; i < length; i += 1) {\n    result[i] = element;\n  }\n\n  return result;\n};\n/**\r\n * Reverses the list\r\n *\r\n * @template T\r\n * @param list - List to be reversed\r\n * @returns Reversed list\r\n */\n\n\nconst reverse = list => Array.prototype.slice.call(list, 0).reverse();\n/**\r\n * Capitalize first letter of string\r\n *\r\n * @param value - String\r\n * @returns Capitalized string\r\n */\n\n\nconst upperFirst = value => {\n  if (!value) return value;\n  return value.charAt(0).toUpperCase() + value.slice(1);\n};\n/**\r\n * Returns a new array with all the values from the original array that are not present in the keys array.\r\n *\r\n * @param keys - The keys to pick from the object\r\n * @param array - Array to filter the values from\r\n * @returns A new array with without the omitted values\r\n */\n\n\nconst without = (keys, array) => {\n  const result = [];\n\n  for (let i = 0; i < array.length; i += 1) {\n    const value = array[i];\n    if (!keys.includes(value)) result.push(value);\n  }\n\n  return result;\n};\n/**\r\n * Parse a string or number to a float\r\n *\r\n * @param value - String or number\r\n * @returns Parsed float\r\n */\n\n\nconst parseFloat$1 = value => {\n  return typeof value === 'string' ? Number.parseFloat(value) : value;\n};\n\nexport { adjust, asyncCompose, capitalize, castArray, compose, dropLast, evolve, get, isNil, last, mapValues, matchPercent, omit, parseFloat$1 as parseFloat, pick, repeat, reverse, upperFirst, without };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/@react-pdf/fns/lib/index.js"],"names":["adjust","index","fn","collection","length","Math","abs","i","Object","assign","asyncCompose","fns","value","result","reversedFns","slice","reverse","args","capitalize","replace","l","toUpperCase","castArray","Array","isArray","compose","dropLast","array","evolve","transformations","object","keys","key","transformation","isNil","undefined","get","target","path","defaultValue","_path","last","mapValues","entries","acc","reduce","isPercent","exec","matchPercent","match","f","parseFloat","percent","omit","_keys","copy","forEach","pick","obj","repeat","element","list","prototype","call","upperFirst","charAt","without","includes","push","parseFloat$1","Number"],"mappings":"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","sourcesContent":["/**\r\n * Applies a function to the value at the given index of an array\r\n *\r\n * @param index\r\n * @param fn\r\n * @param collection\r\n * @returns Copy of the array with the element at the given index replaced with the result of the function application.\r\n */\r\nconst adjust = (index, fn, collection) => {\r\n    if (index >= 0 && index >= collection.length)\r\n        return collection;\r\n    if (index < 0 && Math.abs(index) > collection.length)\r\n        return collection;\r\n    const i = index < 0 ? collection.length + index : index;\r\n    return Object.assign([], collection, { [i]: fn(collection[i]) });\r\n};\r\n\r\n/* eslint-disable no-await-in-loop */\r\n/**\r\n * Performs right-to-left function composition with async functions support\r\n *\r\n * @param fns - Functions\r\n * @returns Composed function\r\n */\r\nconst asyncCompose = (...fns) => async (value, ...args) => {\r\n    let result = value;\r\n    const reversedFns = fns.slice().reverse();\r\n    for (let i = 0; i < reversedFns.length; i += 1) {\r\n        const fn = reversedFns[i];\r\n        result = await fn(result, ...args);\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Capitalize first letter of each word\r\n *\r\n * @param value - Any string\r\n * @returns Capitalized string\r\n */\r\nconst capitalize = (value) => {\r\n    if (!value)\r\n        return value;\r\n    return value.replace(/(^|\\s)\\S/g, (l) => l.toUpperCase());\r\n};\r\n\r\n/**\r\n * Casts value to array\r\n *\r\n * @template T - The type of the value.\r\n * @param value - The value to cast into an array.\r\n * @returns An array containing the given value.\r\n */\r\nconst castArray = (value) => {\r\n    return Array.isArray(value) ? value : [value];\r\n};\r\n\r\n/**\r\n * Performs right-to-left function composition\r\n *\r\n * @param fns - Functions\r\n * @returns Composed function\r\n */\r\nconst compose = (...fns) => (value, ...args) => {\r\n    let result = value;\r\n    const reversedFns = fns.slice().reverse();\r\n    for (let i = 0; i < reversedFns.length; i += 1) {\r\n        const fn = reversedFns[i];\r\n        result = fn(result, ...args);\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Drops the last element from an array.\r\n *\r\n * @template T\r\n * @param  array - The array to drop the last element from\r\n * @returns - The new array with the last element dropped\r\n */\r\nconst dropLast = (array) => array.slice(0, array.length - 1);\r\n\r\n/**\r\n * Applies a set of transformations to an object and returns a new object with the transformed values.\r\n *\r\n * @template T\r\n * @param transformations - The transformations to apply.\r\n * @param object - The object to transform.\r\n * @returns The transformed object.\r\n */\r\nfunction evolve(transformations, object) {\r\n    const result = {};\r\n    const keys = Object.keys(object);\r\n    for (let i = 0; i < keys.length; i += 1) {\r\n        const key = keys[i];\r\n        const transformation = transformations[key];\r\n        if (typeof transformation === 'function') {\r\n            result[key] = transformation(object[key]);\r\n        }\r\n        else {\r\n            result[key] = object[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * Checks if a value is null or undefined.\r\n *\r\n * @template T - The type of the value.\r\n * @param value - The value to check\r\n * @returns True if the value is null or undefined, false otherwise\r\n */\r\nconst isNil = (value) => value === null || value === undefined;\r\n\r\n/**\r\n * Retrieves the value at a given path from an object.\r\n *\r\n * @param target - The object to retrieve the value from.\r\n * @param path - The path of the value to retrieve.\r\n * @param defaultValue - The default value to return if the path does not exist.\r\n * @returns The value at the given path, or the default value if the path does not exist.\r\n */\r\nconst get = (target, path, defaultValue) => {\r\n    if (isNil(target))\r\n        return defaultValue;\r\n    const _path = castArray(path);\r\n    let result = target;\r\n    for (let i = 0; i < _path.length; i += 1) {\r\n        if (isNil(result))\r\n            return undefined;\r\n        result = result[_path[i]];\r\n    }\r\n    return isNil(result) ? defaultValue : result;\r\n};\r\n\r\nfunction last(value) {\r\n    return value === '' ? '' : value[value.length - 1];\r\n}\r\n\r\n/**\r\n * Maps over the values of an object and applies a function to each value.\r\n *\r\n * @param object - The object to map over\r\n * @param fn - The function to apply to each value\r\n * @returns A new object with the mapped values\r\n */\r\nconst mapValues = (object, fn) => {\r\n    const entries = Object.entries(object);\r\n    const acc = {};\r\n    return entries.reduce((acc, [key, value], index) => {\r\n        acc[key] = fn(value, key, index);\r\n        return acc;\r\n    }, acc);\r\n};\r\n\r\nconst isPercent = (value) => /((-)?\\d+\\.?\\d*)%/g.exec(`${value}`);\r\n/**\r\n * Get percentage value of input\r\n *\r\n * @param value\r\n * @returns Percent value (if matches)\r\n */\r\nconst matchPercent = (value) => {\r\n    const match = isPercent(value);\r\n    if (match) {\r\n        const f = parseFloat(match[1]);\r\n        const percent = f / 100;\r\n        return { percent, value: f };\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Creates a new object by omitting specified keys from the original object.\r\n *\r\n * @param keys - The key or keys to omit\r\n * @param object - The original object\r\n * @returns The new object without the omitted keys\r\n */\r\nconst omit = (keys, object) => {\r\n    const _keys = castArray(keys);\r\n    const copy = Object.assign({}, object);\r\n    _keys.forEach((key) => {\r\n        delete copy[key];\r\n    });\r\n    return copy;\r\n};\r\n\r\n/**\r\n * Picks the specified keys from an object and returns a new object with only those keys.\r\n *\r\n * @param keys - The keys to pick from the object\r\n * @param object - The object to pick the keys from\r\n * @returns A new object with only the picked keys\r\n */\r\nconst pick = (keys, obj) => {\r\n    const result = {};\r\n    for (let i = 0; i < keys.length; i += 1) {\r\n        const key = keys[i];\r\n        if (key in obj)\r\n            result[key] = obj[key];\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Repeats an element a specified number of times.\r\n *\r\n * @template T\r\n * @param element - Element to be repeated\r\n * @param length - Number of times to repeat element\r\n * @returns Repeated elements\r\n */\r\nconst repeat = (element, length = 0) => {\r\n    const result = new Array(length);\r\n    for (let i = 0; i < length; i += 1) {\r\n        result[i] = element;\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Reverses the list\r\n *\r\n * @template T\r\n * @param list - List to be reversed\r\n * @returns Reversed list\r\n */\r\nconst reverse = (list) => Array.prototype.slice.call(list, 0).reverse();\r\n\r\n/**\r\n * Capitalize first letter of string\r\n *\r\n * @param value - String\r\n * @returns Capitalized string\r\n */\r\nconst upperFirst = (value) => {\r\n    if (!value)\r\n        return value;\r\n    return value.charAt(0).toUpperCase() + value.slice(1);\r\n};\r\n\r\n/**\r\n * Returns a new array with all the values from the original array that are not present in the keys array.\r\n *\r\n * @param keys - The keys to pick from the object\r\n * @param array - Array to filter the values from\r\n * @returns A new array with without the omitted values\r\n */\r\nconst without = (keys, array) => {\r\n    const result = [];\r\n    for (let i = 0; i < array.length; i += 1) {\r\n        const value = array[i];\r\n        if (!keys.includes(value))\r\n            result.push(value);\r\n    }\r\n    return result;\r\n};\r\n\r\n/**\r\n * Parse a string or number to a float\r\n *\r\n * @param value - String or number\r\n * @returns Parsed float\r\n */\r\nconst parseFloat$1 = (value) => {\r\n    return typeof value === 'string' ? Number.parseFloat(value) : value;\r\n};\r\n\r\nexport { adjust, asyncCompose, capitalize, castArray, compose, dropLast, evolve, get, isNil, last, mapValues, matchPercent, omit, parseFloat$1 as parseFloat, pick, repeat, reverse, upperFirst, without };\r\n"]},"metadata":{},"sourceType":"module"}