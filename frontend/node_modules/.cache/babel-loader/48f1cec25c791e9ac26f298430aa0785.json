{"ast":null,"code":"import { getValueTransition, frame } from 'motion-dom';\nimport { positionalKeys } from '../../render/html/utils/keys-position.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\n\nfunction shouldBlockAnimation(_ref, key) {\n  let {\n    protectedKeys,\n    needsAnimating\n  } = _ref;\n  const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n  needsAnimating[key] = false;\n  return shouldBlock;\n}\n\nfunction animateTarget(visualElement, targetAndTransition) {\n  let {\n    delay = 0,\n    transitionOverride,\n    type\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  let {\n    transition = visualElement.getDefaultTransition(),\n    transitionEnd,\n    ...target\n  } = targetAndTransition;\n  if (transitionOverride) transition = transitionOverride;\n  const animations = [];\n  const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];\n\n  for (const key in target) {\n    const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n    const valueTarget = target[key];\n\n    if (valueTarget === undefined || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {\n      continue;\n    }\n\n    const valueTransition = {\n      delay,\n      ...getValueTransition(transition || {}, key)\n    };\n    /**\r\n     * If this is the first time a value is being animated, check\r\n     * to see if we're handling off from an existing animation.\r\n     */\n\n    let isHandoff = false;\n\n    if (window.MotionHandoffAnimation) {\n      const appearId = getOptimisedAppearId(visualElement);\n\n      if (appearId) {\n        const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n\n        if (startTime !== null) {\n          valueTransition.startTime = startTime;\n          isHandoff = true;\n        }\n      }\n    }\n\n    addValueToWillChange(visualElement, key);\n    value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key) ? {\n      type: false\n    } : valueTransition, visualElement, isHandoff));\n    const animation = value.animation;\n\n    if (animation) {\n      animations.push(animation);\n    }\n  }\n\n  if (transitionEnd) {\n    Promise.all(animations).then(() => {\n      frame.update(() => {\n        transitionEnd && setTarget(visualElement, transitionEnd);\n      });\n    });\n  }\n\n  return animations;\n}\n\nexport { animateTarget };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs"],"names":["getValueTransition","frame","positionalKeys","setTarget","addValueToWillChange","getOptimisedAppearId","animateMotionValue","shouldBlockAnimation","key","protectedKeys","needsAnimating","shouldBlock","hasOwnProperty","animateTarget","visualElement","targetAndTransition","delay","transitionOverride","type","_a","transition","getDefaultTransition","transitionEnd","target","animations","animationTypeState","animationState","getState","value","getValue","latestValues","valueTarget","undefined","valueTransition","isHandoff","window","MotionHandoffAnimation","appearId","startTime","start","shouldReduceMotion","has","animation","push","Promise","all","then","update"],"mappings":"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","sourcesContent":["import { getValueTransition, frame } from 'motion-dom';\r\nimport { positionalKeys } from '../../render/html/utils/keys-position.mjs';\r\nimport { setTarget } from '../../render/utils/setters.mjs';\r\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\r\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\r\nimport { animateMotionValue } from './motion-value.mjs';\r\n\r\n/**\r\n * Decide whether we should block this animation. Previously, we achieved this\r\n * just by checking whether the key was listed in protectedKeys, but this\r\n * posed problems if an animation was triggered by afterChildren and protectedKeys\r\n * had been set to true in the meantime.\r\n */\r\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\r\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\r\n    needsAnimating[key] = false;\r\n    return shouldBlock;\r\n}\r\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\r\n    var _a;\r\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\r\n    if (transitionOverride)\r\n        transition = transitionOverride;\r\n    const animations = [];\r\n    const animationTypeState = type &&\r\n        visualElement.animationState &&\r\n        visualElement.animationState.getState()[type];\r\n    for (const key in target) {\r\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\r\n        const valueTarget = target[key];\r\n        if (valueTarget === undefined ||\r\n            (animationTypeState &&\r\n                shouldBlockAnimation(animationTypeState, key))) {\r\n            continue;\r\n        }\r\n        const valueTransition = {\r\n            delay,\r\n            ...getValueTransition(transition || {}, key),\r\n        };\r\n        /**\r\n         * If this is the first time a value is being animated, check\r\n         * to see if we're handling off from an existing animation.\r\n         */\r\n        let isHandoff = false;\r\n        if (window.MotionHandoffAnimation) {\r\n            const appearId = getOptimisedAppearId(visualElement);\r\n            if (appearId) {\r\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\r\n                if (startTime !== null) {\r\n                    valueTransition.startTime = startTime;\r\n                    isHandoff = true;\r\n                }\r\n            }\r\n        }\r\n        addValueToWillChange(visualElement, key);\r\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\r\n            ? { type: false }\r\n            : valueTransition, visualElement, isHandoff));\r\n        const animation = value.animation;\r\n        if (animation) {\r\n            animations.push(animation);\r\n        }\r\n    }\r\n    if (transitionEnd) {\r\n        Promise.all(animations).then(() => {\r\n            frame.update(() => {\r\n                transitionEnd && setTarget(visualElement, transitionEnd);\r\n            });\r\n        });\r\n    }\r\n    return animations;\r\n}\r\n\r\nexport { animateTarget };\r\n"]},"metadata":{},"sourceType":"module"}