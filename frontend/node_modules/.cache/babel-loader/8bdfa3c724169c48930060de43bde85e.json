{"ast":null,"code":"import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n  constructor() {\n    this.members = [];\n  }\n\n  add(node) {\n    addUniqueItem(this.members, node);\n    node.scheduleRender();\n  }\n\n  remove(node) {\n    removeItem(this.members, node);\n\n    if (node === this.prevLead) {\n      this.prevLead = undefined;\n    }\n\n    if (node === this.lead) {\n      const prevLead = this.members[this.members.length - 1];\n\n      if (prevLead) {\n        this.promote(prevLead);\n      }\n    }\n  }\n\n  relegate(node) {\n    const indexOfNode = this.members.findIndex(member => node === member);\n    if (indexOfNode === 0) return false;\n    /**\r\n     * Find the next projection node that is present\r\n     */\n\n    let prevLead;\n\n    for (let i = indexOfNode; i >= 0; i--) {\n      const member = this.members[i];\n\n      if (member.isPresent !== false) {\n        prevLead = member;\n        break;\n      }\n    }\n\n    if (prevLead) {\n      this.promote(prevLead);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  promote(node, preserveFollowOpacity) {\n    const prevLead = this.lead;\n    if (node === prevLead) return;\n    this.prevLead = prevLead;\n    this.lead = node;\n    node.show();\n\n    if (prevLead) {\n      prevLead.instance && prevLead.scheduleRender();\n      node.scheduleRender();\n      node.resumeFrom = prevLead;\n\n      if (preserveFollowOpacity) {\n        node.resumeFrom.preserveOpacity = true;\n      }\n\n      if (prevLead.snapshot) {\n        node.snapshot = prevLead.snapshot;\n        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n      }\n\n      if (node.root && node.root.isUpdating) {\n        node.isLayoutDirty = true;\n      }\n\n      const {\n        crossfade\n      } = node.options;\n\n      if (crossfade === false) {\n        prevLead.hide();\n      }\n      /**\r\n       * TODO:\r\n       *   - Test border radius when previous node was deleted\r\n       *   - boxShadow mixing\r\n       *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\r\n       *   - Shared between element A in transformed container and element B (transform stays the same or changes)\r\n       *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\r\n       * ---\r\n       *   - Crossfade opacity of root nodes\r\n       *   - layoutId changes after animation\r\n       *   - layoutId changes mid animation\r\n       */\n\n    }\n  }\n\n  exitAnimationComplete() {\n    this.members.forEach(node => {\n      const {\n        options,\n        resumingFrom\n      } = node;\n      options.onExitComplete && options.onExitComplete();\n\n      if (resumingFrom) {\n        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n      }\n    });\n  }\n\n  scheduleRender() {\n    this.members.forEach(node => {\n      node.instance && node.scheduleRender(false);\n    });\n  }\n  /**\r\n   * Clear any leads that have been removed this render to prevent them from being\r\n   * used in future animations and to prevent memory leaks\r\n   */\n\n\n  removeLeadSnapshot() {\n    if (this.lead && this.lead.snapshot) {\n      this.lead.snapshot = undefined;\n    }\n  }\n\n}\n\nexport { NodeStack };","map":{"version":3,"sources":["C:/Users/PC/Documents/PROGRAMMING/New folder/MERN-BF/frontend/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"names":["addUniqueItem","removeItem","NodeStack","constructor","members","add","node","scheduleRender","remove","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","resumingFrom","onExitComplete","removeLeadSnapshot"],"mappings":"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","sourcesContent":["import { addUniqueItem, removeItem } from 'motion-utils';\r\n\r\nclass NodeStack {\r\n    constructor() {\r\n        this.members = [];\r\n    }\r\n    add(node) {\r\n        addUniqueItem(this.members, node);\r\n        node.scheduleRender();\r\n    }\r\n    remove(node) {\r\n        removeItem(this.members, node);\r\n        if (node === this.prevLead) {\r\n            this.prevLead = undefined;\r\n        }\r\n        if (node === this.lead) {\r\n            const prevLead = this.members[this.members.length - 1];\r\n            if (prevLead) {\r\n                this.promote(prevLead);\r\n            }\r\n        }\r\n    }\r\n    relegate(node) {\r\n        const indexOfNode = this.members.findIndex((member) => node === member);\r\n        if (indexOfNode === 0)\r\n            return false;\r\n        /**\r\n         * Find the next projection node that is present\r\n         */\r\n        let prevLead;\r\n        for (let i = indexOfNode; i >= 0; i--) {\r\n            const member = this.members[i];\r\n            if (member.isPresent !== false) {\r\n                prevLead = member;\r\n                break;\r\n            }\r\n        }\r\n        if (prevLead) {\r\n            this.promote(prevLead);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    promote(node, preserveFollowOpacity) {\r\n        const prevLead = this.lead;\r\n        if (node === prevLead)\r\n            return;\r\n        this.prevLead = prevLead;\r\n        this.lead = node;\r\n        node.show();\r\n        if (prevLead) {\r\n            prevLead.instance && prevLead.scheduleRender();\r\n            node.scheduleRender();\r\n            node.resumeFrom = prevLead;\r\n            if (preserveFollowOpacity) {\r\n                node.resumeFrom.preserveOpacity = true;\r\n            }\r\n            if (prevLead.snapshot) {\r\n                node.snapshot = prevLead.snapshot;\r\n                node.snapshot.latestValues =\r\n                    prevLead.animationValues || prevLead.latestValues;\r\n            }\r\n            if (node.root && node.root.isUpdating) {\r\n                node.isLayoutDirty = true;\r\n            }\r\n            const { crossfade } = node.options;\r\n            if (crossfade === false) {\r\n                prevLead.hide();\r\n            }\r\n            /**\r\n             * TODO:\r\n             *   - Test border radius when previous node was deleted\r\n             *   - boxShadow mixing\r\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\r\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\r\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\r\n             * ---\r\n             *   - Crossfade opacity of root nodes\r\n             *   - layoutId changes after animation\r\n             *   - layoutId changes mid animation\r\n             */\r\n        }\r\n    }\r\n    exitAnimationComplete() {\r\n        this.members.forEach((node) => {\r\n            const { options, resumingFrom } = node;\r\n            options.onExitComplete && options.onExitComplete();\r\n            if (resumingFrom) {\r\n                resumingFrom.options.onExitComplete &&\r\n                    resumingFrom.options.onExitComplete();\r\n            }\r\n        });\r\n    }\r\n    scheduleRender() {\r\n        this.members.forEach((node) => {\r\n            node.instance && node.scheduleRender(false);\r\n        });\r\n    }\r\n    /**\r\n     * Clear any leads that have been removed this render to prevent them from being\r\n     * used in future animations and to prevent memory leaks\r\n     */\r\n    removeLeadSnapshot() {\r\n        if (this.lead && this.lead.snapshot) {\r\n            this.lead.snapshot = undefined;\r\n        }\r\n    }\r\n}\r\n\r\nexport { NodeStack };\r\n"]},"metadata":{},"sourceType":"module"}